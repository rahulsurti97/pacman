
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00012448 memsz 0x00012448 flags r-x
    LOAD off    0x00013468 vaddr 0x08012468 paddr 0x08013f54 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a40 vaddr 0x08015a40 paddr 0x08015a40 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117c0  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  080119f0  080119f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08012468  08013f54  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  08015a40  08015a40  00015a40  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014f54  2**0
                  CONTENTS
  7 .sdram        00000000  08015ba4  08015ba4  00014f54  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014f54  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00014f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000236f5  00000000  00000000  00015e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c8  00000000  00000000  00039585  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b88a  00000000  00000000  0004264d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004ded8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a0c  00000000  00000000  0005025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b4d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b518  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00070159  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007015c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00070168  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00070169  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007016a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007016e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00070172  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00070176  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00070181  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007018c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00070197  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001f  00000000  00000000  0007019f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00076265  00000000  00000000  000701be  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
080119f0 l    d  .rodata	00000000 .rodata
08012468 l    d  .rwdata	00000000 .rwdata
08015a40 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015ba4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
08015a40 l     O .bss	00000002 ctl_reg.3589
08015a42 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080121ae l     O .rodata	00000010 zeroes.4404
08004760 l     F .text	000000bc __sbprintf
080121be l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004970 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080064c8 l     F .text	00000008 __fp_unlock
080064dc l     F .text	0000019c __sinit.part.1
08006678 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08012468 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
080128ac l     O .rwdata	00000020 lc_ctype_charset
0801288c l     O .rwdata	00000020 lc_message_charset
080128cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080121f0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009b4c l     F .text	000000fc __sprint_r.part.0
08012314 l     O .rodata	00000010 zeroes.4349
0800b188 l     F .text	000000bc __sbprintf
08012324 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f1d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f2e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800f310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800f404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800f4ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800f5d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f7b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08013f44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800fa58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800fb94 l     F .text	00000034 alt_dev_reg
08012eb4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800fe70 l     F .text	0000020c altera_avalon_jtag_uart_irq
0801007c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010db8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010f18 l     F .text	0000003c alt_get_errno
08010f54 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08015a78 g     O .bss	00000004 alt_instruction_exception_handler
08009190 g     F .text	00000074 _mprec_log10
0800927c g     F .text	0000008c __any_on
0800b73c g     F .text	00000054 _isatty_r
080121fc g     O .rodata	00000028 __mprec_tinytens
0800f6f0 g     F .text	0000007c alt_main
080022fc g     F .text	000000c0 _puts_r
08015aa4 g     O .bss	00000100 alt_irq
0800b790 g     F .text	00000060 _lseek_r
08013f54 g       *ABS*	00000000 __flash_rwdata_start
0800dba8 g     F .text	00000088 .hidden __eqdf2
08015ba4 g       *ABS*	00000000 __alt_heap_start
080022c0 g     F .text	0000003c printf
0800b9a8 g     F .text	0000009c _wcrtomb_r
08009a0c g     F .text	0000005c __sseek
08006828 g     F .text	00000010 __sinit
0800b850 g     F .text	00000140 __swbuf_r
080072fc g     F .text	0000007c _setlocale_r
08006680 g     F .text	00000078 __sfmoreglue
0800f790 g     F .text	00000024 __malloc_unlock
08002190 g     F .text	00000080 UsbGetRetryCnt
08007fcc g     F .text	0000015c memmove
0800026c g     F .text	00000088 IO_init
08006810 g     F .text	00000018 _cleanup
08008250 g     F .text	000000a8 _Balloc
0800dc30 g     F .text	000000dc .hidden __gtdf2
08011340 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b6e0 g     F .text	0000005c _fstat_r
08015a5c g     O .bss	00000004 errno
08009988 g     F .text	00000008 __seofread
08015a64 g     O .bss	00000004 alt_argv
0801bf14 g       *ABS*	00000000 _gp
0800fa28 g     F .text	00000030 usleep
08012d34 g     O .rwdata	00000180 alt_fd_list
08011364 g     F .text	00000090 alt_find_dev
08007e84 g     F .text	00000148 memcpy
080064d0 g     F .text	0000000c _cleanup_r
0800efe8 g     F .text	000000dc .hidden __floatsidf
08010e9c g     F .text	0000007c alt_io_redirect
0800dd0c g     F .text	000000f4 .hidden __ltdf2
080119f0 g       *ABS*	00000000 __DTOR_END__
080023bc g     F .text	00000014 puts
080115c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800986c g     F .text	00000074 __fpclassifyd
080090ec g     F .text	000000a4 __ratio
0800b16c g     F .text	0000001c __vfiprintf_internal
08010274 g     F .text	0000021c altera_avalon_jtag_uart_read
08002290 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800c848 g     F .text	00000064 .hidden __udivsi3
0800f440 g     F .text	000000ac isatty
0801224c g     O .rodata	000000c8 __mprec_tens
08007378 g     F .text	0000000c __locale_charset
08015a58 g     O .bss	00000004 __malloc_top_pad
0800181c g     F .text	00000268 UsbGetConfigDesc2
08013f1c g     O .rwdata	00000004 __mb_cur_max
080073a8 g     F .text	0000000c _localeconv_r
08008684 g     F .text	0000003c __i2b
08006cac g     F .text	000004c8 __sfvwrite_r
080098e0 g     F .text	00000054 _sbrk_r
0800b7f0 g     F .text	00000060 _read_r
08013f3c g     O .rwdata	00000004 alt_max_fd
0800b3d4 g     F .text	000000f0 _fclose_r
08006498 g     F .text	00000030 fflush
08015a54 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c92c g     F .text	000008ac .hidden __adddf3
08008e94 g     F .text	0000010c __b2d
0800c18c g     F .text	000005c4 .hidden __umoddi3
0800f614 g     F .text	000000dc lseek
08013f14 g     O .rwdata	00000004 _global_impure_ptr
08009308 g     F .text	00000564 _realloc_r
08015ba4 g       *ABS*	00000000 __bss_end
08010cc8 g     F .text	000000f0 alt_iic_isr_register
08011238 g     F .text	00000108 alt_tick
0800bb90 g     F .text	000005fc .hidden __udivdi3
0800b63c g     F .text	00000024 _fputwc_r
08012224 g     O .rodata	00000028 __mprec_bigtens
08008468 g     F .text	00000104 __s2b
0800f0c4 g     F .text	000000a8 .hidden __floatunsidf
08008bd4 g     F .text	00000060 __mcmp
0800126c g     F .text	00000100 UsbSetAddress
08006848 g     F .text	00000018 __fp_lock_all
08010c7c g     F .text	0000004c alt_ic_irq_enabled
0801119c g     F .text	0000009c alt_alarm_stop
08015a6c g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08012d0c g     O .rwdata	00000028 alt_dev_null
08010938 g     F .text	00000020 alt_dcache_flush_all
0800856c g     F .text	00000068 __hi0bits
08000364 g     F .text	00000074 IO_read
0800ef68 g     F .text	00000080 .hidden __fixdfsi
08013f54 g       *ABS*	00000000 __ram_rwdata_end
08013f34 g     O .rwdata	00000008 alt_dev_list
0800fa94 g     F .text	00000100 write
08012468 g       *ABS*	00000000 __ram_rodata_end
0800f34c g     F .text	000000b8 fstat
0800dd0c g     F .text	000000f4 .hidden __ledf2
08002210 g     F .text	00000080 UsbPrintMem
0800894c g     F .text	00000140 __pow5mult
08009c60 g     F .text	0000150c ___vfiprintf_internal_r
08015a4c g     O .bss	00000004 __nlocale_changed
0800c8ac g     F .text	00000058 .hidden __umodsi3
08015ba4 g       *ABS*	00000000 end
0800fdb0 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
080119f0 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800f16c g     F .text	00000064 .hidden __clzsi2
08010490 g     F .text	00000224 altera_avalon_jtag_uart_write
08006838 g     F .text	00000004 __sfp_lock_acquire
08007da0 g     F .text	000000e4 memchr
08002468 g     F .text	000022dc ___vfprintf_internal_r
08001b84 g     F .text	00000100 UsbClassRequest
0800699c g     F .text	00000310 _free_r
08007384 g     F .text	00000010 __locale_mb_cur_max
0801183c g     F .text	00000180 __call_exitprocs
08015a48 g     O .bss	00000004 __mlocale_changed
08013f20 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08015a70 g     O .bss	00000004 _alt_tick_rate
08008a8c g     F .text	00000148 __lshift
08015a74 g     O .bss	00000004 _alt_nticks
0800f7f0 g     F .text	00000104 read
0800fc00 g     F .text	0000004c alt_sys_init
08011724 g     F .text	00000118 __register_exitproc
080086c0 g     F .text	0000028c __multiply
0801011c g     F .text	00000068 altera_avalon_jtag_uart_close
0800c904 g     F .text	00000028 .hidden __mulsi3
08012468 g       *ABS*	00000000 __ram_rwdata_start
080119f0 g       *ABS*	00000000 __ram_rodata_start
08015a7c g     O .bss	00000028 __malloc_current_mallinfo
08008fa0 g     F .text	0000014c __d2b
0800136c g     F .text	00000148 UsbGetDeviceDesc1
0800fc4c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080114fc g     F .text	000000c4 alt_get_fd
080107e0 g     F .text	00000158 alt_busy_sleep
0800b2a4 g     F .text	00000054 _close_r
080116a8 g     F .text	0000007c memcmp
0800fd0c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015ba4 g       *ABS*	00000000 __alt_stack_base
0800fd5c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800481c g     F .text	00000154 __swsetup_r
0800d1d8 g     F .text	000009d0 .hidden __divdf3
080066f8 g     F .text	00000118 __sfp
08009204 g     F .text	00000078 __copybits
08012904 g     O .rwdata	00000408 __malloc_av_
08006844 g     F .text	00000004 __sinit_lock_release
0800de00 g     F .text	0000086c .hidden __muldf3
08009934 g     F .text	00000054 __sread
0800210c g     F .text	00000084 UsbWaitTDListDone
080113f4 g     F .text	00000108 alt_find_file
08010994 g     F .text	000000a4 alt_dev_llist_insert
0800f76c g     F .text	00000024 __malloc_lock
0800f978 g     F .text	000000b0 sbrk
0800643c g     F .text	0000005c _fflush_r
0800b2f8 g     F .text	000000dc _calloc_r
08015a40 g       *ABS*	00000000 __bss_start
08008128 g     F .text	00000128 memset
080003d8 g     F .text	00000d44 main
08015a68 g     O .bss	00000004 alt_envp
08015a50 g     O .bss	00000004 __malloc_max_total_mem
0800fcac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001a84 g     F .text	00000100 UsbSetConfig
0800b990 g     F .text	00000018 __swbuf
08009a68 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800b4c4 g     F .text	00000014 fclose
08004b98 g     F .text	00001688 _dtoa_r
08007594 g     F .text	0000080c _malloc_r
0800bb04 g     F .text	00000030 __ascii_wctomb
08013f40 g     O .rwdata	00000004 alt_errno
08007174 g     F .text	000000c4 _fwalk
0800c750 g     F .text	00000084 .hidden __divsi3
08006878 g     F .text	00000124 _malloc_trim_r
08001c84 g     F .text	00000148 UsbGetHidDesc
080119f0 g       *ABS*	00000000 __CTOR_END__
08009a70 g     F .text	000000dc strcmp
080119f0 g       *ABS*	00000000 __flash_rodata_start
080119f0 g       *ABS*	00000000 __DTOR_LIST__
0800dba8 g     F .text	00000088 .hidden __nedf2
08001174 g     F .text	00000044 UsbRead
0800fbc8 g     F .text	00000038 alt_irq_init
0800f8f4 g     F .text	00000084 alt_release_fd
08012334 g     O .rodata	00000100 .hidden __clz_tab
08015a44 g     O .bss	00000004 _PathLocale
0801165c g     F .text	00000014 atexit
0800b244 g     F .text	00000060 _write_r
080073b4 g     F .text	00000018 setlocale
08013f18 g     O .rwdata	00000004 _impure_ptr
08015a60 g     O .bss	00000004 alt_argc
08006220 g     F .text	0000021c __sflush_r
08010a98 g     F .text	00000060 _do_dtors
080073a0 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08008e30 g     F .text	00000064 __ulp
08006860 g     F .text	00000018 __fp_unlock_all
08013f2c g     O .rwdata	00000008 alt_fs_list
08001dcc g     F .text	00000340 UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
080073cc g     F .text	0000000c localeconv
08010b18 g     F .text	00000050 alt_ic_isr_register
08013f54 g       *ABS*	00000000 _edata
08015ba4 g       *ABS*	00000000 _end
0800111c g     F .text	00000058 UsbWrite
0800b4d8 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08010184 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08010bf0 g     F .text	0000008c alt_ic_irq_disable
08009990 g     F .text	0000007c __swrite
08013f24 g     O .rwdata	00000004 __malloc_trim_threshold
08007394 g     F .text	0000000c __locale_msgcharset
08011670 g     F .text	00000038 exit
08007238 g     F .text	000000c4 _fwalk_reent
08008c34 g     F .text	000001fc __mdiff
0800c7d4 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800683c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080002f4 g     F .text	00000070 IO_write
080119bc g     F .text	00000034 _exit
080106b4 g     F .text	0000012c alt_alarm_start
080073d8 g     F .text	000001bc __smakebuf_r
080023d0 g     F .text	00000098 strlen
08011040 g     F .text	0000015c open
0800dc30 g     F .text	000000dc .hidden __gedf2
08013f28 g     O .rwdata	00000004 __wctomb
08009c48 g     F .text	00000018 __sprint_r
08010af8 g     F .text	00000020 alt_icache_flush_all
08013f48 g     O .rwdata	00000004 alt_priority_mask
08010b68 g     F .text	00000088 alt_ic_irq_enable
08004744 g     F .text	0000001c __vfprintf_internal
0800bb34 g     F .text	0000005c _wctomb_r
0800e66c g     F .text	000008fc .hidden __subdf3
080085d4 g     F .text	000000b0 __lo0bits
0800168c g     F .text	00000190 UsbGetConfigDesc1
08013f4c g     O .rwdata	00000008 alt_alarm_list
08010a38 g     F .text	00000060 _do_ctors
080011b8 g     F .text	000000b4 UsbSoftReset
0800ba44 g     F .text	000000c0 wcrtomb
0800f20c g     F .text	000000d8 close
080014b4 g     F .text	000001d8 UsbGetDeviceDesc2
0800f554 g     F .text	00000084 alt_load
0800b660 g     F .text	00000080 fputwc
08006840 g     F .text	00000004 __sinit_lock_acquire
08008320 g     F .text	00000148 __multadd
080082f8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	1096a904 	addi	r2,r2,23204
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	1096a904 	addi	r2,r2,23204
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a6d917 	ldw	r2,-25756(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a6d917 	ldw	r2,-25756(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6afc514 	ori	gp,gp,48916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10969014 	ori	r2,r2,23104

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18d6e914 	ori	r3,r3,23460

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800f5540 	call	800f554 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800f6f00 	call	800f6f0 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 800026c:	deffff04 	addi	sp,sp,-4
 8000270:	df000015 	stw	fp,0(sp)
 8000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 8000278:	00800c04 	movi	r2,48
 800027c:	00c00044 	movi	r3,1
 8000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000284:	00801004 	movi	r2,64
 8000288:	00c00044 	movi	r3,1
 800028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 8000290:	00801804 	movi	r2,96
 8000294:	00c00044 	movi	r3,1
 8000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 800029c:	00801404 	movi	r2,80
 80002a0:	00c00044 	movi	r3,1
 80002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 80002a8:	00802004 	movi	r2,128
 80002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 80002b0:	00801c04 	movi	r2,112
 80002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 80002b8:	00801004 	movi	r2,64
 80002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 80002c0:	00800c04 	movi	r2,48
 80002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 80002c8:	00800c04 	movi	r2,48
 80002cc:	00c00044 	movi	r3,1
 80002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 80002d4:	00801004 	movi	r2,64
 80002d8:	00c00044 	movi	r3,1
 80002dc:	10c00005 	stb	r3,0(r2)
}
 80002e0:	0001883a 	nop
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 80002f4:	defffd04 	addi	sp,sp,-12
 80002f8:	df000215 	stw	fp,8(sp)
 80002fc:	df000204 	addi	fp,sp,8
 8000300:	2007883a 	mov	r3,r4
 8000304:	2805883a 	mov	r2,r5
 8000308:	e0fffe05 	stb	r3,-8(fp)
 800030c:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	*otg_hpi_address = Address;
 8000310:	00802004 	movi	r2,128
 8000314:	e0fffe03 	ldbu	r3,-8(fp)
 8000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
 800031c:	00801004 	movi	r2,64
 8000320:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
 8000324:	00801404 	movi	r2,80
 8000328:	10000005 	stb	zero,0(r2)
	// enable write and set data
	*otg_hpi_data = Data;
 800032c:	00801c04 	movi	r2,112
 8000330:	e0ffff0b 	ldhu	r3,-4(fp)
 8000334:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
 8000338:	00801404 	movi	r2,80
 800033c:	00c00044 	movi	r3,1
 8000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000344:	00801004 	movi	r2,64
 8000348:	00c00044 	movi	r3,1
 800034c:	10c00005 	stb	r3,0(r2)
}
 8000350:	0001883a 	nop
 8000354:	e037883a 	mov	sp,fp
 8000358:	df000017 	ldw	fp,0(sp)
 800035c:	dec00104 	addi	sp,sp,4
 8000360:	f800283a 	ret

08000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 8000364:	defffd04 	addi	sp,sp,-12
 8000368:	df000215 	stw	fp,8(sp)
 800036c:	df000204 	addi	fp,sp,8
 8000370:	2005883a 	mov	r2,r4
 8000374:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	alt_u16 temp;

	*otg_hpi_address = Address;
 8000378:	00802004 	movi	r2,128
 800037c:	e0ffff03 	ldbu	r3,-4(fp)
 8000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
 8000384:	00801004 	movi	r2,64
 8000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
 800038c:	00801804 	movi	r2,96
 8000390:	10000005 	stb	zero,0(r2)
	*otg_hpi_address = Address;
 8000394:	00802004 	movi	r2,128
 8000398:	e0ffff03 	ldbu	r3,-4(fp)
 800039c:	10c00015 	stw	r3,0(r2)


	// enable read and retrieve data
	temp = *otg_hpi_data;
 80003a0:	00801c04 	movi	r2,112
 80003a4:	10800017 	ldw	r2,0(r2)
 80003a8:	e0bffe0d 	sth	r2,-8(fp)
//	printf("IO_read: %x\n",temp);

	*otg_hpi_r = 1;
 80003ac:	00801804 	movi	r2,96
 80003b0:	00c00044 	movi	r3,1
 80003b4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 80003b8:	00801004 	movi	r2,64
 80003bc:	00c00044 	movi	r3,1
 80003c0:	10c00005 	stb	r3,0(r2)

	return temp;
 80003c4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 80003c8:	e037883a 	mov	sp,fp
 80003cc:	df000017 	ldw	fp,0(sp)
 80003d0:	dec00104 	addi	sp,sp,4
 80003d4:	f800283a 	ret

080003d8 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 80003d8:	defff904 	addi	sp,sp,-28
 80003dc:	dfc00615 	stw	ra,24(sp)
 80003e0:	df000515 	stw	fp,20(sp)
 80003e4:	df000504 	addi	fp,sp,20
	IO_init();
 80003e8:	800026c0 	call	800026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 80003ec:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 80003f0:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 80003f4:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 80003f8:	01020074 	movhi	r4,2049
 80003fc:	21067c04 	addi	r4,r4,6640
 8000400:	80023bc0 	call	80023bc <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 8000404:	80011b80 	call	80011b8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000408:	000b883a 	mov	r5,zero
 800040c:	01005104 	movi	r4,324
 8000410:	800111c0 	call	800111c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8000414:	017fffd4 	movui	r5,65535
 8000418:	01302414 	movui	r4,49296
 800041c:	800111c0 	call	800111c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 8000420:	01409604 	movi	r5,600
 8000424:	01006d04 	movi	r4,436
 8000428:	800111c0 	call	800111c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 800042c:	00811004 	movi	r2,1088
 8000430:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 8000434:	e0bffb0b 	ldhu	r2,-20(fp)
 8000438:	100b883a 	mov	r5,r2
 800043c:	01005084 	movi	r4,322
 8000440:	800111c0 	call	800111c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 8000444:	00808404 	movi	r2,528
 8000448:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 800044c:	e0bffe0b 	ldhu	r2,-8(fp)
 8000450:	100b883a 	mov	r5,r2
 8000454:	01302314 	movui	r4,49292
 8000458:	800111c0 	call	800111c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 800045c:	000b883a 	mov	r5,zero
 8000460:	01007104 	movi	r4,452
 8000464:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8000468:	000b883a 	mov	r5,zero
 800046c:	01007184 	movi	r4,454
 8000470:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000474:	000b883a 	mov	r5,zero
 8000478:	01007204 	movi	r4,456
 800047c:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8000480:	000b883a 	mov	r5,zero
 8000484:	01007284 	movi	r4,458
 8000488:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 800048c:	000b883a 	mov	r5,zero
 8000490:	01007304 	movi	r4,460
 8000494:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 8000498:	000b883a 	mov	r5,zero
 800049c:	01007384 	movi	r4,462
 80004a0:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80004a4:	000b883a 	mov	r5,zero
 80004a8:	01007404 	movi	r4,464
 80004ac:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80004b0:	000b883a 	mov	r5,zero
 80004b4:	01007484 	movi	r4,466
 80004b8:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80004bc:	000b883a 	mov	r5,zero
 80004c0:	01007504 	movi	r4,468
 80004c4:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80004c8:	000b883a 	mov	r5,zero
 80004cc:	01007584 	movi	r4,470
 80004d0:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80004d4:	000b883a 	mov	r5,zero
 80004d8:	01007604 	movi	r4,472
 80004dc:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 80004e0:	000b883a 	mov	r5,zero
 80004e4:	01007684 	movi	r4,474
 80004e8:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 80004ec:	000b883a 	mov	r5,zero
 80004f0:	01007704 	movi	r4,476
 80004f4:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 80004f8:	000b883a 	mov	r5,zero
 80004fc:	01007784 	movi	r4,478
 8000500:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 8000504:	01401c84 	movi	r5,114
 8000508:	01007084 	movi	r4,450
 800050c:	800111c0 	call	800111c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8000510:	01738054 	movui	r5,52737
 8000514:	01000044 	movi	r4,1
 8000518:	80002f40 	call	80002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 800051c:	0001883a 	nop
 8000520:	010000c4 	movi	r4,3
 8000524:	80003640 	call	8000364 <IO_read>
 8000528:	10bfffcc 	andi	r2,r2,65535
 800052c:	103ffc26 	beq	r2,zero,8000520 <__alt_data_end+0xfc000520>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000530:	00000806 	br	8000554 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 8000534:	01000044 	movi	r4,1
 8000538:	80003640 	call	8000364 <IO_read>
 800053c:	10bfffcc 	andi	r2,r2,65535
 8000540:	100b883a 	mov	r5,r2
 8000544:	01020074 	movhi	r4,2049
 8000548:	21068204 	addi	r4,r4,6664
 800054c:	80022c00 	call	80022c0 <printf>
		goto USB_HOT_PLUG;
 8000550:	003fac06 	br	8000404 <__alt_data_end+0xfc000404>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000554:	01000044 	movi	r4,1
 8000558:	80003640 	call	8000364 <IO_read>
 800055c:	10bfffcc 	andi	r2,r2,65535
 8000560:	1083fb58 	cmpnei	r2,r2,4077
 8000564:	103ff31e 	bne	r2,zero,8000534 <__alt_data_end+0xfc000534>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 8000568:	01020074 	movhi	r4,2049
 800056c:	21068b04 	addi	r4,r4,6700
 8000570:	80022c00 	call	80022c0 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 8000574:	01401d04 	movi	r5,116
 8000578:	01007084 	movi	r4,450
 800057c:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 8000580:	01400f04 	movi	r5,60
 8000584:	01007104 	movi	r4,452
 8000588:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 800058c:	000b883a 	mov	r5,zero
 8000590:	01007184 	movi	r4,454
 8000594:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000598:	000b883a 	mov	r5,zero
 800059c:	01007204 	movi	r4,456
 80005a0:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80005a4:	000b883a 	mov	r5,zero
 80005a8:	01007284 	movi	r4,458
 80005ac:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80005b0:	000b883a 	mov	r5,zero
 80005b4:	01007304 	movi	r4,460
 80005b8:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80005bc:	000b883a 	mov	r5,zero
 80005c0:	01007384 	movi	r4,462
 80005c4:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80005c8:	000b883a 	mov	r5,zero
 80005cc:	01007404 	movi	r4,464
 80005d0:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80005d4:	000b883a 	mov	r5,zero
 80005d8:	01007484 	movi	r4,466
 80005dc:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80005e0:	000b883a 	mov	r5,zero
 80005e4:	01007504 	movi	r4,468
 80005e8:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80005ec:	000b883a 	mov	r5,zero
 80005f0:	01007584 	movi	r4,470
 80005f4:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80005f8:	000b883a 	mov	r5,zero
 80005fc:	01007604 	movi	r4,472
 8000600:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000604:	000b883a 	mov	r5,zero
 8000608:	01007684 	movi	r4,474
 800060c:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000610:	000b883a 	mov	r5,zero
 8000614:	01007704 	movi	r4,476
 8000618:	800111c0 	call	800111c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 800061c:	000b883a 	mov	r5,zero
 8000620:	01007784 	movi	r4,478
 8000624:	800111c0 	call	800111c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8000628:	01738054 	movui	r5,52737
 800062c:	01000044 	movi	r4,1
 8000630:	80002f40 	call	80002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000634:	0001883a 	nop
 8000638:	01000044 	movi	r4,1
 800063c:	80003640 	call	8000364 <IO_read>
 8000640:	10bfffcc 	andi	r2,r2,65535
 8000644:	1083fb58 	cmpnei	r2,r2,4077
 8000648:	10000826 	beq	r2,zero,800066c <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 800064c:	01000044 	movi	r4,1
 8000650:	80003640 	call	8000364 <IO_read>
 8000654:	10bfffcc 	andi	r2,r2,65535
 8000658:	100b883a 	mov	r5,r2
 800065c:	01020074 	movhi	r4,2049
 8000660:	21068204 	addi	r4,r4,6664
 8000664:	80022c00 	call	80022c0 <printf>
		goto USB_HOT_PLUG;
 8000668:	003f6606 	br	8000404 <__alt_data_end+0xfc000404>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 800066c:	00b02284 	movi	r2,-16246
 8000670:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 8000674:	008c0004 	movi	r2,12288
 8000678:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 800067c:	00880004 	movi	r2,8192
 8000680:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 8000684:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000688:	10bfffcc 	andi	r2,r2,65535
 800068c:	1009883a 	mov	r4,r2
 8000690:	80011740 	call	8001174 <UsbRead>
 8000694:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 8000698:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800069c:	e0fffb0b 	ldhu	r3,-20(fp)
 80006a0:	1884703a 	and	r2,r3,r2
 80006a4:	10bfffcc 	andi	r2,r2,65535
 80006a8:	1000351e 	bne	r2,zero,8000780 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80006ac:	e03ffbc5 	stb	zero,-17(fp)
 80006b0:	00000f06 	br	80006f0 <main+0x318>
		{
			usleep(5*1000);
 80006b4:	0104e204 	movi	r4,5000
 80006b8:	800fa280 	call	800fa28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 80006bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80006c0:	10bfffcc 	andi	r2,r2,65535
 80006c4:	1009883a 	mov	r4,r2
 80006c8:	80011740 	call	8001174 <UsbRead>
 80006cc:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 80006d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006d4:	e0fffb0b 	ldhu	r3,-20(fp)
 80006d8:	1884703a 	and	r2,r3,r2
 80006dc:	10bfffcc 	andi	r2,r2,65535
 80006e0:	1000071e 	bne	r2,zero,8000700 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80006e4:	e0bffbc3 	ldbu	r2,-17(fp)
 80006e8:	10800044 	addi	r2,r2,1
 80006ec:	e0bffbc5 	stb	r2,-17(fp)
 80006f0:	e0bffbc3 	ldbu	r2,-17(fp)
 80006f4:	10800170 	cmpltui	r2,r2,5
 80006f8:	103fee1e 	bne	r2,zero,80006b4 <__alt_data_end+0xfc0006b4>
 80006fc:	00000106 	br	8000704 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
 8000700:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
 8000704:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000708:	e0fffb0b 	ldhu	r3,-20(fp)
 800070c:	1884703a 	and	r2,r3,r2
 8000710:	10bfffcc 	andi	r2,r2,65535
 8000714:	1000261e 	bne	r2,zero,80007b0 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 8000718:	01020074 	movhi	r4,2049
 800071c:	21068f04 	addi	r4,r4,6716
 8000720:	80023bc0 	call	80023bc <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 8000724:	01020074 	movhi	r4,2049
 8000728:	21069904 	addi	r4,r4,6756
 800072c:	80023bc0 	call	80023bc <puts>
			while (!(usb_ctl_val & no_device))
 8000730:	00000d06 	br	8000768 <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 8000734:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000738:	10bfffcc 	andi	r2,r2,65535
 800073c:	1009883a 	mov	r4,r2
 8000740:	80011740 	call	8001174 <UsbRead>
 8000744:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 8000748:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800074c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000750:	1884703a 	and	r2,r3,r2
 8000754:	10bfffcc 	andi	r2,r2,65535
 8000758:	10000126 	beq	r2,zero,8000760 <main+0x388>
					goto USB_HOT_PLUG;
 800075c:	003f2906 	br	8000404 <__alt_data_end+0xfc000404>

				usleep(2000);
 8000760:	0101f404 	movi	r4,2000
 8000764:	800fa280 	call	800fa28 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 8000768:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800076c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000770:	1884703a 	and	r2,r3,r2
 8000774:	10bfffcc 	andi	r2,r2,65535
 8000778:	103fee26 	beq	r2,zero,8000734 <__alt_data_end+0xfc000734>
 800077c:	00000c06 	br	80007b0 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 8000780:	e0fffb0b 	ldhu	r3,-20(fp)
 8000784:	e0bffc0b 	ldhu	r2,-16(fp)
 8000788:	1884703a 	and	r2,r3,r2
 800078c:	10bfffcc 	andi	r2,r2,65535
 8000790:	10000426 	beq	r2,zero,80007a4 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
 8000794:	01020074 	movhi	r4,2049
 8000798:	2106a504 	addi	r4,r4,6804
 800079c:	80023bc0 	call	80023bc <puts>
 80007a0:	00000306 	br	80007b0 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 80007a4:	01020074 	movhi	r4,2049
 80007a8:	2106ac04 	addi	r4,r4,6832
 80007ac:	80023bc0 	call	80023bc <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80007b0:	800126c0 	call	800126c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007b4:	00000306 	br	80007c4 <main+0x3ec>
	{
		UsbSetAddress();
 80007b8:	800126c0 	call	800126c <UsbSetAddress>
		usleep(10*1000);
 80007bc:	0109c404 	movi	r4,10000
 80007c0:	800fa280 	call	800fa28 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007c4:	010000c4 	movi	r4,3
 80007c8:	80003640 	call	8000364 <IO_read>
 80007cc:	10bfffcc 	andi	r2,r2,65535
 80007d0:	1080040c 	andi	r2,r2,16
 80007d4:	103ff826 	beq	r2,zero,80007b8 <__alt_data_end+0xfc0007b8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80007d8:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 80007dc:	01414184 	movi	r5,1286
 80007e0:	01000084 	movi	r4,2
 80007e4:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80007e8:	0009883a 	mov	r4,zero
 80007ec:	80003640 	call	8000364 <IO_read>
 80007f0:	10bfffcc 	andi	r2,r2,65535
 80007f4:	100b883a 	mov	r5,r2
 80007f8:	01020074 	movhi	r4,2049
 80007fc:	2106b304 	addi	r4,r4,6860
 8000800:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 8000804:	01414204 	movi	r5,1288
 8000808:	01000084 	movi	r4,2
 800080c:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000810:	0009883a 	mov	r4,zero
 8000814:	80003640 	call	8000364 <IO_read>
 8000818:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 800081c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000820:	100b883a 	mov	r5,r2
 8000824:	01020074 	movhi	r4,2049
 8000828:	2106be04 	addi	r4,r4,6904
 800082c:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 8000830:	e0bffb0b 	ldhu	r2,-20(fp)
 8000834:	108000e0 	cmpeqi	r2,r2,3
 8000838:	1000031e 	bne	r2,zero,8000848 <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
 800083c:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000840:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 8000844:	003eef06 	br	8000404 <__alt_data_end+0xfc000404>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8000848:	01020074 	movhi	r4,2049
 800084c:	2106ca04 	addi	r4,r4,6952
 8000850:	80023bc0 	call	80023bc <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 8000854:	800136c0 	call	800136c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000858:	00000306 	br	8000868 <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 800085c:	800136c0 	call	800136c <UsbGetDeviceDesc1>
		usleep(10*1000);
 8000860:	0109c404 	movi	r4,10000
 8000864:	800fa280 	call	800fa28 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000868:	010000c4 	movi	r4,3
 800086c:	80003640 	call	8000364 <IO_read>
 8000870:	10bfffcc 	andi	r2,r2,65535
 8000874:	1080040c 	andi	r2,r2,16
 8000878:	103ff826 	beq	r2,zero,800085c <__alt_data_end+0xfc00085c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 800087c:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000880:	01414184 	movi	r5,1286
 8000884:	01000084 	movi	r4,2
 8000888:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 800088c:	0009883a 	mov	r4,zero
 8000890:	80003640 	call	8000364 <IO_read>
 8000894:	10bfffcc 	andi	r2,r2,65535
 8000898:	100b883a 	mov	r5,r2
 800089c:	01020074 	movhi	r4,2049
 80008a0:	2106d904 	addi	r4,r4,7012
 80008a4:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 80008a8:	01414204 	movi	r5,1288
 80008ac:	01000084 	movi	r4,2
 80008b0:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80008b4:	0009883a 	mov	r4,zero
 80008b8:	80003640 	call	8000364 <IO_read>
 80008bc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80008c0:	e0bffb0b 	ldhu	r2,-20(fp)
 80008c4:	100b883a 	mov	r5,r2
 80008c8:	01020074 	movhi	r4,2049
 80008cc:	2106e404 	addi	r4,r4,7056
 80008d0:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 80008d4:	00000206 	br	80008e0 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80008d8:	80021900 	call	8002190 <UsbGetRetryCnt>
 80008dc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80008e0:	e0bffb0b 	ldhu	r2,-20(fp)
 80008e4:	108000d8 	cmpnei	r2,r2,3
 80008e8:	103ffb1e 	bne	r2,zero,80008d8 <__alt_data_end+0xfc0008d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 80008ec:	01020074 	movhi	r4,2049
 80008f0:	2106f004 	addi	r4,r4,7104
 80008f4:	80023bc0 	call	80023bc <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 80008f8:	80014b40 	call	80014b4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008fc:	00000306 	br	800090c <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 8000900:	80014b40 	call	80014b4 <UsbGetDeviceDesc2>
		usleep(10*1000);
 8000904:	0109c404 	movi	r4,10000
 8000908:	800fa280 	call	800fa28 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800090c:	010000c4 	movi	r4,3
 8000910:	80003640 	call	8000364 <IO_read>
 8000914:	10bfffcc 	andi	r2,r2,65535
 8000918:	1080040c 	andi	r2,r2,16
 800091c:	103ff826 	beq	r2,zero,8000900 <__alt_data_end+0xfc000900>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000920:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000924:	01414184 	movi	r5,1286
 8000928:	01000084 	movi	r4,2
 800092c:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000930:	0009883a 	mov	r4,zero
 8000934:	80003640 	call	8000364 <IO_read>
 8000938:	10bfffcc 	andi	r2,r2,65535
 800093c:	100b883a 	mov	r5,r2
 8000940:	01020074 	movhi	r4,2049
 8000944:	2106d904 	addi	r4,r4,7012
 8000948:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 800094c:	01414204 	movi	r5,1288
 8000950:	01000084 	movi	r4,2
 8000954:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000958:	0009883a 	mov	r4,zero
 800095c:	80003640 	call	8000364 <IO_read>
 8000960:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8000964:	e0bffb0b 	ldhu	r2,-20(fp)
 8000968:	100b883a 	mov	r5,r2
 800096c:	01020074 	movhi	r4,2049
 8000970:	2106e404 	addi	r4,r4,7056
 8000974:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 8000978:	00000206 	br	8000984 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
 800097c:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000980:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000984:	e0bffb0b 	ldhu	r2,-20(fp)
 8000988:	108000d8 	cmpnei	r2,r2,3
 800098c:	103ffb1e 	bne	r2,zero,800097c <__alt_data_end+0xfc00097c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 8000990:	01020074 	movhi	r4,2049
 8000994:	21070404 	addi	r4,r4,7184
 8000998:	80023bc0 	call	80023bc <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 800099c:	800168c0 	call	800168c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009a0:	00000306 	br	80009b0 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 80009a4:	800168c0 	call	800168c <UsbGetConfigDesc1>
		usleep(10*1000);
 80009a8:	0109c404 	movi	r4,10000
 80009ac:	800fa280 	call	800fa28 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009b0:	010000c4 	movi	r4,3
 80009b4:	80003640 	call	8000364 <IO_read>
 80009b8:	10bfffcc 	andi	r2,r2,65535
 80009bc:	1080040c 	andi	r2,r2,16
 80009c0:	103ff826 	beq	r2,zero,80009a4 <__alt_data_end+0xfc0009a4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80009c4:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80009c8:	01414184 	movi	r5,1286
 80009cc:	01000084 	movi	r4,2
 80009d0:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80009d4:	0009883a 	mov	r4,zero
 80009d8:	80003640 	call	8000364 <IO_read>
 80009dc:	10bfffcc 	andi	r2,r2,65535
 80009e0:	100b883a 	mov	r5,r2
 80009e4:	01020074 	movhi	r4,2049
 80009e8:	21071604 	addi	r4,r4,7256
 80009ec:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 80009f0:	01414204 	movi	r5,1288
 80009f4:	01000084 	movi	r4,2
 80009f8:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80009fc:	0009883a 	mov	r4,zero
 8000a00:	80003640 	call	8000364 <IO_read>
 8000a04:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000a08:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a0c:	100b883a 	mov	r5,r2
 8000a10:	01020074 	movhi	r4,2049
 8000a14:	21072104 	addi	r4,r4,7300
 8000a18:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 8000a1c:	00000206 	br	8000a28 <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a20:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000a24:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a28:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a2c:	108000d8 	cmpnei	r2,r2,3
 8000a30:	103ffb1e 	bne	r2,zero,8000a20 <__alt_data_end+0xfc000a20>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 8000a34:	01020074 	movhi	r4,2049
 8000a38:	21072d04 	addi	r4,r4,7348
 8000a3c:	80023bc0 	call	80023bc <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 8000a40:	800181c0 	call	800181c <UsbGetConfigDesc2>

	usleep(100*1000);
 8000a44:	010000b4 	movhi	r4,2
 8000a48:	2121a804 	addi	r4,r4,-31072
 8000a4c:	800fa280 	call	800fa28 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a50:	00000306 	br	8000a60 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 8000a54:	800181c0 	call	800181c <UsbGetConfigDesc2>
		usleep(10*1000);
 8000a58:	0109c404 	movi	r4,10000
 8000a5c:	800fa280 	call	800fa28 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a60:	010000c4 	movi	r4,3
 8000a64:	80003640 	call	8000364 <IO_read>
 8000a68:	10bfffcc 	andi	r2,r2,65535
 8000a6c:	1080040c 	andi	r2,r2,16
 8000a70:	103ff826 	beq	r2,zero,8000a54 <__alt_data_end+0xfc000a54>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000a74:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000a78:	01414184 	movi	r5,1286
 8000a7c:	01000084 	movi	r4,2
 8000a80:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000a84:	0009883a 	mov	r4,zero
 8000a88:	80003640 	call	8000364 <IO_read>
 8000a8c:	10bfffcc 	andi	r2,r2,65535
 8000a90:	100b883a 	mov	r5,r2
 8000a94:	01020074 	movhi	r4,2049
 8000a98:	21074004 	addi	r4,r4,7424
 8000a9c:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000aa0:	01414204 	movi	r5,1288
 8000aa4:	01000084 	movi	r4,2
 8000aa8:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000aac:	0009883a 	mov	r4,zero
 8000ab0:	80003640 	call	8000364 <IO_read>
 8000ab4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 8000ab8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000abc:	100b883a 	mov	r5,r2
 8000ac0:	01020074 	movhi	r4,2049
 8000ac4:	21074b04 	addi	r4,r4,7468
 8000ac8:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 8000acc:	00000206 	br	8000ad8 <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000ad0:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000ad4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000ad8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000adc:	108000d8 	cmpnei	r2,r2,3
 8000ae0:	103ffb1e 	bne	r2,zero,8000ad0 <__alt_data_end+0xfc000ad0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000ae4:	01020074 	movhi	r4,2049
 8000ae8:	21075704 	addi	r4,r4,7516
 8000aec:	80023bc0 	call	80023bc <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 8000af0:	01415b04 	movi	r5,1388
 8000af4:	01000084 	movi	r4,2
 8000af8:	80002f40 	call	80002f4 <IO_write>
	code = IO_read(HPI_DATA);
 8000afc:	0009883a 	mov	r4,zero
 8000b00:	80003640 	call	8000364 <IO_read>
 8000b04:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 8000b08:	e0bffe8b 	ldhu	r2,-6(fp)
 8000b0c:	108000cc 	andi	r2,r2,3
 8000b10:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000b14:	e0bffe8b 	ldhu	r2,-6(fp)
 8000b18:	100b883a 	mov	r5,r2
 8000b1c:	01020074 	movhi	r4,2049
 8000b20:	21076a04 	addi	r4,r4,7592
 8000b24:	80022c00 	call	80022c0 <printf>

	if (code == 0x01)
 8000b28:	e0bffe8b 	ldhu	r2,-6(fp)
 8000b2c:	10800058 	cmpnei	r2,r2,1
 8000b30:	1000041e 	bne	r2,zero,8000b44 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000b34:	01020074 	movhi	r4,2049
 8000b38:	21076d04 	addi	r4,r4,7604
 8000b3c:	80023bc0 	call	80023bc <puts>
 8000b40:	00000306 	br	8000b50 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000b44:	01020074 	movhi	r4,2049
 8000b48:	21077c04 	addi	r4,r4,7664
 8000b4c:	80023bc0 	call	80023bc <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 8000b50:	01415d84 	movi	r5,1398
 8000b54:	01000084 	movi	r4,2
 8000b58:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
 8000b5c:	0141cfc4 	movi	r5,1855
 8000b60:	0009883a 	mov	r4,zero
 8000b64:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
 8000b68:	01604154 	movui	r5,33029
 8000b6c:	0009883a 	mov	r4,zero
 8000b70:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
 8000b74:	014000c4 	movi	r5,3
 8000b78:	0009883a 	mov	r4,zero
 8000b7c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8000b80:	01400204 	movi	r5,8
 8000b84:	0009883a 	mov	r4,zero
 8000b88:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 8000b8c:	016b0294 	movui	r5,44042
 8000b90:	0009883a 	mov	r4,zero
 8000b94:	80002f40 	call	80002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 8000b98:	01415d84 	movi	r5,1398
 8000b9c:	01006c04 	movi	r4,432
 8000ba0:	800111c0 	call	800111c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 8000ba4:	01415f04 	movi	r5,1404
 8000ba8:	01000084 	movi	r4,2
 8000bac:	80002f40 	call	80002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 8000bb0:	0009883a 	mov	r4,zero
 8000bb4:	80003640 	call	8000364 <IO_read>
 8000bb8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000bbc:	e0bfff03 	ldbu	r2,-4(fp)
 8000bc0:	100b883a 	mov	r5,r2
 8000bc4:	01020074 	movhi	r4,2049
 8000bc8:	21078504 	addi	r4,r4,7700
 8000bcc:	80022c00 	call	80022c0 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 8000bd0:	8001a840 	call	8001a84 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bd4:	00000306 	br	8000be4 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 8000bd8:	8001a840 	call	8001a84 <UsbSetConfig>
		usleep(10*1000);
 8000bdc:	0109c404 	movi	r4,10000
 8000be0:	800fa280 	call	800fa28 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000be4:	010000c4 	movi	r4,3
 8000be8:	80003640 	call	8000364 <IO_read>
 8000bec:	10bfffcc 	andi	r2,r2,65535
 8000bf0:	1080040c 	andi	r2,r2,16
 8000bf4:	103ff826 	beq	r2,zero,8000bd8 <__alt_data_end+0xfc000bd8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000bf8:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000bfc:	01414184 	movi	r5,1286
 8000c00:	01000084 	movi	r4,2
 8000c04:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000c08:	0009883a 	mov	r4,zero
 8000c0c:	80003640 	call	8000364 <IO_read>
 8000c10:	10bfffcc 	andi	r2,r2,65535
 8000c14:	100b883a 	mov	r5,r2
 8000c18:	01020074 	movhi	r4,2049
 8000c1c:	21078f04 	addi	r4,r4,7740
 8000c20:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000c24:	01414204 	movi	r5,1288
 8000c28:	01000084 	movi	r4,2
 8000c2c:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000c30:	0009883a 	mov	r4,zero
 8000c34:	80003640 	call	8000364 <IO_read>
 8000c38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000c3c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c40:	100b883a 	mov	r5,r2
 8000c44:	01020074 	movhi	r4,2049
 8000c48:	21079a04 	addi	r4,r4,7784
 8000c4c:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 8000c50:	00000206 	br	8000c5c <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c54:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000c58:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c5c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c60:	108000d8 	cmpnei	r2,r2,3
 8000c64:	103ffb1e 	bne	r2,zero,8000c54 <__alt_data_end+0xfc000c54>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000c68:	01020074 	movhi	r4,2049
 8000c6c:	2107a604 	addi	r4,r4,7832
 8000c70:	80023bc0 	call	80023bc <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8000c74:	8001b840 	call	8001b84 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c78:	00000306 	br	8000c88 <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000c7c:	8001b840 	call	8001b84 <UsbClassRequest>
		usleep(10*1000);
 8000c80:	0109c404 	movi	r4,10000
 8000c84:	800fa280 	call	800fa28 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c88:	010000c4 	movi	r4,3
 8000c8c:	80003640 	call	8000364 <IO_read>
 8000c90:	10bfffcc 	andi	r2,r2,65535
 8000c94:	1080040c 	andi	r2,r2,16
 8000c98:	103ff826 	beq	r2,zero,8000c7c <__alt_data_end+0xfc000c7c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c9c:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000ca0:	01414184 	movi	r5,1286
 8000ca4:	01000084 	movi	r4,2
 8000ca8:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000cac:	0009883a 	mov	r4,zero
 8000cb0:	80003640 	call	8000364 <IO_read>
 8000cb4:	10bfffcc 	andi	r2,r2,65535
 8000cb8:	100b883a 	mov	r5,r2
 8000cbc:	01020074 	movhi	r4,2049
 8000cc0:	2107b804 	addi	r4,r4,7904
 8000cc4:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000cc8:	01414204 	movi	r5,1288
 8000ccc:	01000084 	movi	r4,2
 8000cd0:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000cd4:	0009883a 	mov	r4,zero
 8000cd8:	80003640 	call	8000364 <IO_read>
 8000cdc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000ce0:	e0bffb0b 	ldhu	r2,-20(fp)
 8000ce4:	100b883a 	mov	r5,r2
 8000ce8:	01020074 	movhi	r4,2049
 8000cec:	2107c304 	addi	r4,r4,7948
 8000cf0:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 8000cf4:	00000206 	br	8000d00 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000cf8:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000cfc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000d00:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d04:	108000d8 	cmpnei	r2,r2,3
 8000d08:	103ffb1e 	bne	r2,zero,8000cf8 <__alt_data_end+0xfc000cf8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000d0c:	01020074 	movhi	r4,2049
 8000d10:	2107cf04 	addi	r4,r4,7996
 8000d14:	80023bc0 	call	80023bc <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8000d18:	8001c840 	call	8001c84 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d1c:	00000306 	br	8000d2c <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000d20:	8001c840 	call	8001c84 <UsbGetHidDesc>
		usleep(10*1000);
 8000d24:	0109c404 	movi	r4,10000
 8000d28:	800fa280 	call	800fa28 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d2c:	010000c4 	movi	r4,3
 8000d30:	80003640 	call	8000364 <IO_read>
 8000d34:	10bfffcc 	andi	r2,r2,65535
 8000d38:	1080040c 	andi	r2,r2,16
 8000d3c:	103ff826 	beq	r2,zero,8000d20 <__alt_data_end+0xfc000d20>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000d40:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000d44:	01414184 	movi	r5,1286
 8000d48:	01000084 	movi	r4,2
 8000d4c:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000d50:	0009883a 	mov	r4,zero
 8000d54:	80003640 	call	8000364 <IO_read>
 8000d58:	10bfffcc 	andi	r2,r2,65535
 8000d5c:	100b883a 	mov	r5,r2
 8000d60:	01020074 	movhi	r4,2049
 8000d64:	2107b804 	addi	r4,r4,7904
 8000d68:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000d6c:	01414204 	movi	r5,1288
 8000d70:	01000084 	movi	r4,2
 8000d74:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000d78:	0009883a 	mov	r4,zero
 8000d7c:	80003640 	call	8000364 <IO_read>
 8000d80:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000d84:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d88:	100b883a 	mov	r5,r2
 8000d8c:	01020074 	movhi	r4,2049
 8000d90:	2107c304 	addi	r4,r4,7948
 8000d94:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 8000d98:	00000206 	br	8000da4 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000d9c:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000da0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000da4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000da8:	108000d8 	cmpnei	r2,r2,3
 8000dac:	103ffb1e 	bne	r2,zero,8000d9c <__alt_data_end+0xfc000d9c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000db0:	01020074 	movhi	r4,2049
 8000db4:	2107e104 	addi	r4,r4,8068
 8000db8:	80023bc0 	call	80023bc <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8000dbc:	8001dcc0 	call	8001dcc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000dc0:	00000306 	br	8000dd0 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000dc4:	8001dcc0 	call	8001dcc <UsbGetReportDesc>
		usleep(10*1000);
 8000dc8:	0109c404 	movi	r4,10000
 8000dcc:	800fa280 	call	800fa28 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000dd0:	010000c4 	movi	r4,3
 8000dd4:	80003640 	call	8000364 <IO_read>
 8000dd8:	10bfffcc 	andi	r2,r2,65535
 8000ddc:	1080040c 	andi	r2,r2,16
 8000de0:	103ff826 	beq	r2,zero,8000dc4 <__alt_data_end+0xfc000dc4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000de4:	800210c0 	call	800210c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000de8:	01414184 	movi	r5,1286
 8000dec:	01000084 	movi	r4,2
 8000df0:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000df4:	0009883a 	mov	r4,zero
 8000df8:	80003640 	call	8000364 <IO_read>
 8000dfc:	10bfffcc 	andi	r2,r2,65535
 8000e00:	100b883a 	mov	r5,r2
 8000e04:	01020074 	movhi	r4,2049
 8000e08:	2107f504 	addi	r4,r4,8148
 8000e0c:	80022c00 	call	80022c0 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000e10:	01414204 	movi	r5,1288
 8000e14:	01000084 	movi	r4,2
 8000e18:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000e1c:	0009883a 	mov	r4,zero
 8000e20:	80003640 	call	8000364 <IO_read>
 8000e24:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000e28:	e0bffb0b 	ldhu	r2,-20(fp)
 8000e2c:	100b883a 	mov	r5,r2
 8000e30:	01020074 	movhi	r4,2049
 8000e34:	21080104 	addi	r4,r4,8196
 8000e38:	80022c00 	call	80022c0 <printf>
	while (usb_ctl_val != 0x03)
 8000e3c:	00000206 	br	8000e48 <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000e40:	80021900 	call	8002190 <UsbGetRetryCnt>
 8000e44:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000e48:	e0bffb0b 	ldhu	r2,-20(fp)
 8000e4c:	108000d8 	cmpnei	r2,r2,3
 8000e50:	103ffb1e 	bne	r2,zero,8000e40 <__alt_data_end+0xfc000e40>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000e54:	01020074 	movhi	r4,2049
 8000e58:	21080d04 	addi	r4,r4,8244
 8000e5c:	80023bc0 	call	80023bc <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000e60:	0109c404 	movi	r4,10000
 8000e64:	800fa280 	call	800fa28 <usleep>
	while(1)
	{
		toggle++;
 8000e68:	e0bffb83 	ldbu	r2,-18(fp)
 8000e6c:	10800044 	addi	r2,r2,1
 8000e70:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 8000e74:	01414004 	movi	r5,1280
 8000e78:	01000084 	movi	r4,2
 8000e7c:	80002f40 	call	80002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 8000e80:	01414704 	movi	r5,1308
 8000e84:	0009883a 	mov	r4,zero
 8000e88:	80002f40 	call	80002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000e8c:	e0bfff03 	ldbu	r2,-4(fp)
 8000e90:	108003cc 	andi	r2,r2,15
 8000e94:	100b883a 	mov	r5,r2
 8000e98:	0009883a 	mov	r4,zero
 8000e9c:	80002f40 	call	80002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000ea0:	0140a444 	movi	r5,657
 8000ea4:	0009883a 	mov	r4,zero
 8000ea8:	80002f40 	call	80002f4 <IO_write>
		if(toggle%2)
 8000eac:	e0bffb83 	ldbu	r2,-18(fp)
 8000eb0:	1080004c 	andi	r2,r2,1
 8000eb4:	10803fcc 	andi	r2,r2,255
 8000eb8:	10000426 	beq	r2,zero,8000ecc <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 8000ebc:	01400044 	movi	r5,1
 8000ec0:	0009883a 	mov	r4,zero
 8000ec4:	80002f40 	call	80002f4 <IO_write>
 8000ec8:	00000306 	br	8000ed8 <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 8000ecc:	01401044 	movi	r5,65
 8000ed0:	0009883a 	mov	r4,zero
 8000ed4:	80002f40 	call	80002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 8000ed8:	014004c4 	movi	r5,19
 8000edc:	0009883a 	mov	r4,zero
 8000ee0:	80002f40 	call	80002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 8000ee4:	000b883a 	mov	r5,zero
 8000ee8:	0009883a 	mov	r4,zero
 8000eec:	80002f40 	call	80002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000ef0:	01414004 	movi	r5,1280
 8000ef4:	01006c04 	movi	r4,432
 8000ef8:	800111c0 	call	800111c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000efc:	00002406 	br	8000f90 <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 8000f00:	01414004 	movi	r5,1280
 8000f04:	01000084 	movi	r4,2
 8000f08:	80002f40 	call	80002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 8000f0c:	01414704 	movi	r5,1308
 8000f10:	0009883a 	mov	r4,zero
 8000f14:	80002f40 	call	80002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000f18:	e0bfff03 	ldbu	r2,-4(fp)
 8000f1c:	108003cc 	andi	r2,r2,15
 8000f20:	100b883a 	mov	r5,r2
 8000f24:	0009883a 	mov	r4,zero
 8000f28:	80002f40 	call	80002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000f2c:	0140a444 	movi	r5,657
 8000f30:	0009883a 	mov	r4,zero
 8000f34:	80002f40 	call	80002f4 <IO_write>
			if(toggle%2)
 8000f38:	e0bffb83 	ldbu	r2,-18(fp)
 8000f3c:	1080004c 	andi	r2,r2,1
 8000f40:	10803fcc 	andi	r2,r2,255
 8000f44:	10000426 	beq	r2,zero,8000f58 <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 8000f48:	01400044 	movi	r5,1
 8000f4c:	0009883a 	mov	r4,zero
 8000f50:	80002f40 	call	80002f4 <IO_write>
 8000f54:	00000306 	br	8000f64 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 8000f58:	01401044 	movi	r5,65
 8000f5c:	0009883a 	mov	r4,zero
 8000f60:	80002f40 	call	80002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 8000f64:	014004c4 	movi	r5,19
 8000f68:	0009883a 	mov	r4,zero
 8000f6c:	80002f40 	call	80002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 8000f70:	000b883a 	mov	r5,zero
 8000f74:	0009883a 	mov	r4,zero
 8000f78:	80002f40 	call	80002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000f7c:	01414004 	movi	r5,1280
 8000f80:	01006c04 	movi	r4,432
 8000f84:	800111c0 	call	800111c <UsbWrite>
			usleep(10*1000);
 8000f88:	0109c404 	movi	r4,10000
 8000f8c:	800fa280 	call	800fa28 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000f90:	010000c4 	movi	r4,3
 8000f94:	80003640 	call	8000364 <IO_read>
 8000f98:	10bfffcc 	andi	r2,r2,65535
 8000f9c:	1080040c 	andi	r2,r2,16
 8000fa0:	103fd726 	beq	r2,zero,8000f00 <__alt_data_end+0xfc000f00>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
 8000fa4:	800210c0 	call	800210c <UsbWaitTDListDone>
 8000fa8:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
 8000fac:	01014784 	movi	r4,1310
 8000fb0:	80011740 	call	8001174 <UsbRead>
 8000fb4:	10bfffcc 	andi	r2,r2,65535
 8000fb8:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000fbc:	e17ffd17 	ldw	r5,-12(fp)
 8000fc0:	01020074 	movhi	r4,2049
 8000fc4:	21082104 	addi	r4,r4,8324
 8000fc8:	80022c00 	call	80022c0 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
 8000fcc:	00800804 	movi	r2,32
 8000fd0:	e0fffd17 	ldw	r3,-12(fp)
 8000fd4:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
 8000fd8:	01003204 	movi	r4,200
 8000fdc:	800fa280 	call	800fa28 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000fe0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000fe4:	10bfffcc 	andi	r2,r2,65535
 8000fe8:	1009883a 	mov	r4,r2
 8000fec:	80011740 	call	8001174 <UsbRead>
 8000ff0:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 8000ff4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000ff8:	e0fffb0b 	ldhu	r3,-20(fp)
 8000ffc:	1884703a 	and	r2,r3,r2
 8001000:	10bfffcc 	andi	r2,r2,65535
 8001004:	10003f1e 	bne	r2,zero,8001104 <main+0xd2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8001008:	e03ffbc5 	stb	zero,-17(fp)
 800100c:	00000f06 	br	800104c <main+0xc74>
			{
				usleep(5*1000);
 8001010:	0104e204 	movi	r4,5000
 8001014:	800fa280 	call	800fa28 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8001018:	d0a6cb0b 	ldhu	r2,-25812(gp)
 800101c:	10bfffcc 	andi	r2,r2,65535
 8001020:	1009883a 	mov	r4,r2
 8001024:	80011740 	call	8001174 <UsbRead>
 8001028:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 800102c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001030:	e0fffb0b 	ldhu	r3,-20(fp)
 8001034:	1884703a 	and	r2,r3,r2
 8001038:	10bfffcc 	andi	r2,r2,65535
 800103c:	1000071e 	bne	r2,zero,800105c <main+0xc84>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8001040:	e0bffbc3 	ldbu	r2,-17(fp)
 8001044:	10800044 	addi	r2,r2,1
 8001048:	e0bffbc5 	stb	r2,-17(fp)
 800104c:	e0bffbc3 	ldbu	r2,-17(fp)
 8001050:	108001f0 	cmpltui	r2,r2,7
 8001054:	103fee1e 	bne	r2,zero,8001010 <__alt_data_end+0xfc001010>
 8001058:	00000106 	br	8001060 <main+0xc88>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
 800105c:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
 8001060:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001064:	e0fffb0b 	ldhu	r3,-20(fp)
 8001068:	1884703a 	and	r2,r3,r2
 800106c:	10bfffcc 	andi	r2,r2,65535
 8001070:	1000241e 	bne	r2,zero,8001104 <main+0xd2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8001074:	01020074 	movhi	r4,2049
 8001078:	21082a04 	addi	r4,r4,8360
 800107c:	80023bc0 	call	80023bc <puts>
				printf("[INFO]: please insert again!!! \n");
 8001080:	01020074 	movhi	r4,2049
 8001084:	21083504 	addi	r4,r4,8404
 8001088:	80023bc0 	call	80023bc <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 800108c:	00001d06 	br	8001104 <main+0xd2c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8001090:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001094:	10bfffcc 	andi	r2,r2,65535
 8001098:	1009883a 	mov	r4,r2
 800109c:	80011740 	call	8001174 <UsbRead>
 80010a0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 80010a4:	0104e204 	movi	r4,5000
 80010a8:	800fa280 	call	800fa28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 80010ac:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80010b0:	10bfffcc 	andi	r2,r2,65535
 80010b4:	1009883a 	mov	r4,r2
 80010b8:	80011740 	call	8001174 <UsbRead>
 80010bc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 80010c0:	0104e204 	movi	r4,5000
 80010c4:	800fa280 	call	800fa28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 80010c8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80010cc:	10bfffcc 	andi	r2,r2,65535
 80010d0:	1009883a 	mov	r4,r2
 80010d4:	80011740 	call	8001174 <UsbRead>
 80010d8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 80010dc:	0104e204 	movi	r4,5000
 80010e0:	800fa280 	call	800fa28 <usleep>

			if(usb_ctl_val & no_device)
 80010e4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80010e8:	e0fffb0b 	ldhu	r3,-20(fp)
 80010ec:	1884703a 	and	r2,r3,r2
 80010f0:	10bfffcc 	andi	r2,r2,65535
 80010f4:	10000126 	beq	r2,zero,80010fc <main+0xd24>
				goto USB_HOT_PLUG;
 80010f8:	003cc206 	br	8000404 <__alt_data_end+0xfc000404>

			usleep(200);
 80010fc:	01003204 	movi	r4,200
 8001100:	800fa280 	call	800fa28 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 8001104:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001108:	e0fffb0b 	ldhu	r3,-20(fp)
 800110c:	1884703a 	and	r2,r3,r2
 8001110:	10bfffcc 	andi	r2,r2,65535
 8001114:	103fde26 	beq	r2,zero,8001090 <__alt_data_end+0xfc001090>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 8001118:	003f5306 	br	8000e68 <__alt_data_end+0xfc000e68>

0800111c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 800111c:	defffc04 	addi	sp,sp,-16
 8001120:	dfc00315 	stw	ra,12(sp)
 8001124:	df000215 	stw	fp,8(sp)
 8001128:	df000204 	addi	fp,sp,8
 800112c:	2007883a 	mov	r3,r4
 8001130:	2805883a 	mov	r2,r5
 8001134:	e0fffe0d 	sth	r3,-8(fp)
 8001138:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	IO_write(HPI_ADDR, Address);
 800113c:	e0bffe0b 	ldhu	r2,-8(fp)
 8001140:	100b883a 	mov	r5,r2
 8001144:	01000084 	movi	r4,2
 8001148:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA, Data);
 800114c:	e0bfff0b 	ldhu	r2,-4(fp)
 8001150:	100b883a 	mov	r5,r2
 8001154:	0009883a 	mov	r4,zero
 8001158:	80002f40 	call	80002f4 <IO_write>
}
 800115c:	0001883a 	nop
 8001160:	e037883a 	mov	sp,fp
 8001164:	dfc00117 	ldw	ra,4(sp)
 8001168:	df000017 	ldw	fp,0(sp)
 800116c:	dec00204 	addi	sp,sp,8
 8001170:	f800283a 	ret

08001174 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 8001174:	defffd04 	addi	sp,sp,-12
 8001178:	dfc00215 	stw	ra,8(sp)
 800117c:	df000115 	stw	fp,4(sp)
 8001180:	df000104 	addi	fp,sp,4
 8001184:	2005883a 	mov	r2,r4
 8001188:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 800118c:	e0bfff0b 	ldhu	r2,-4(fp)
 8001190:	100b883a 	mov	r5,r2
 8001194:	01000084 	movi	r4,2
 8001198:	80002f40 	call	80002f4 <IO_write>
	return IO_read(HPI_DATA);
 800119c:	0009883a 	mov	r4,zero
 80011a0:	80003640 	call	8000364 <IO_read>
}
 80011a4:	e037883a 	mov	sp,fp
 80011a8:	dfc00117 	ldw	ra,4(sp)
 80011ac:	df000017 	ldw	fp,0(sp)
 80011b0:	dec00204 	addi	sp,sp,8
 80011b4:	f800283a 	ret

080011b8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 80011b8:	defffe04 	addi	sp,sp,-8
 80011bc:	dfc00115 	stw	ra,4(sp)
 80011c0:	df000015 	stw	fp,0(sp)
 80011c4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 80011c8:	017e9414 	movui	r5,64080
 80011cc:	01000044 	movi	r4,1
 80011d0:	80002f40 	call	80002f4 <IO_write>
	usleep(100000);
 80011d4:	010000b4 	movhi	r4,2
 80011d8:	2121a804 	addi	r4,r4,-31072
 80011dc:	800fa280 	call	800fa28 <usleep>
	printf("[USB INIT]:reset finished!\n");
 80011e0:	01020074 	movhi	r4,2049
 80011e4:	21083d04 	addi	r4,r4,8436
 80011e8:	80023bc0 	call	80023bc <puts>

	usleep(500000);
 80011ec:	01000234 	movhi	r4,8
 80011f0:	21284804 	addi	r4,r4,-24288
 80011f4:	800fa280 	call	800fa28 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 80011f8:	01020074 	movhi	r4,2049
 80011fc:	21084404 	addi	r4,r4,8464
 8001200:	80023bc0 	call	80023bc <puts>
	IO_read(HPI_MAILBOX);
 8001204:	01000044 	movi	r4,1
 8001208:	80003640 	call	8000364 <IO_read>
	IO_read(HPI_STATUS);
 800120c:	010000c4 	movi	r4,3
 8001210:	80003640 	call	8000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8001214:	01005104 	movi	r4,324
 8001218:	80011740 	call	8001174 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 800121c:	000b883a 	mov	r5,zero
 8001220:	01005104 	movi	r4,324
 8001224:	800111c0 	call	800111c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 8001228:	01005204 	movi	r4,328
 800122c:	80011740 	call	8001174 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 8001230:	000b883a 	mov	r5,zero
 8001234:	01005204 	movi	r4,328
 8001238:	800111c0 	call	800111c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 800123c:	017fffd4 	movui	r5,65535
 8001240:	01302414 	movui	r4,49296
 8001244:	800111c0 	call	800111c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 8001248:	017fffd4 	movui	r5,65535
 800124c:	01302c14 	movui	r4,49328
 8001250:	800111c0 	call	800111c <UsbWrite>
}
 8001254:	0001883a 	nop
 8001258:	e037883a 	mov	sp,fp
 800125c:	dfc00117 	ldw	ra,4(sp)
 8001260:	df000017 	ldw	fp,0(sp)
 8001264:	dec00204 	addi	sp,sp,8
 8001268:	f800283a 	ret

0800126c <UsbSetAddress>:


void UsbSetAddress()
{
 800126c:	defffe04 	addi	sp,sp,-8
 8001270:	dfc00115 	stw	ra,4(sp)
 8001274:	df000015 	stw	fp,0(sp)
 8001278:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800127c:	01414004 	movi	r5,1280
 8001280:	01000084 	movi	r4,2
 8001284:	80002f40 	call	80002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 8001288:	01414304 	movi	r5,1292
 800128c:	0009883a 	mov	r4,zero
 8001290:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001294:	01400204 	movi	r5,8
 8001298:	0009883a 	mov	r4,zero
 800129c:	80002f40 	call	80002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 80012a0:	01403404 	movi	r5,208
 80012a4:	0009883a 	mov	r4,zero
 80012a8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80012ac:	01400044 	movi	r5,1
 80012b0:	0009883a 	mov	r4,zero
 80012b4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80012b8:	014004c4 	movi	r5,19
 80012bc:	0009883a 	mov	r4,zero
 80012c0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80012c4:	01414504 	movi	r5,1300
 80012c8:	0009883a 	mov	r4,zero
 80012cc:	80002f40 	call	80002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 80012d0:	01414004 	movi	r5,1280
 80012d4:	0009883a 	mov	r4,zero
 80012d8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
 80012dc:	01400084 	movi	r5,2
 80012e0:	0009883a 	mov	r4,zero
 80012e4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 80012e8:	000b883a 	mov	r5,zero
 80012ec:	0009883a 	mov	r4,zero
 80012f0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 80012f4:	000b883a 	mov	r5,zero
 80012f8:	0009883a 	mov	r4,zero
 80012fc:	80002f40 	call	80002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 8001300:	000b883a 	mov	r5,zero
 8001304:	0009883a 	mov	r4,zero
 8001308:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 800130c:	000b883a 	mov	r5,zero
 8001310:	0009883a 	mov	r4,zero
 8001314:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 8001318:	01402404 	movi	r5,144
 800131c:	0009883a 	mov	r4,zero
 8001320:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001324:	01401044 	movi	r5,65
 8001328:	0009883a 	mov	r4,zero
 800132c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001330:	014004c4 	movi	r5,19
 8001334:	0009883a 	mov	r4,zero
 8001338:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 800133c:	000b883a 	mov	r5,zero
 8001340:	0009883a 	mov	r4,zero
 8001344:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001348:	01414004 	movi	r5,1280
 800134c:	01006c04 	movi	r4,432
 8001350:	800111c0 	call	800111c <UsbWrite>
}
 8001354:	0001883a 	nop
 8001358:	e037883a 	mov	sp,fp
 800135c:	dfc00117 	ldw	ra,4(sp)
 8001360:	df000017 	ldw	fp,0(sp)
 8001364:	dec00204 	addi	sp,sp,8
 8001368:	f800283a 	ret

0800136c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 800136c:	defffe04 	addi	sp,sp,-8
 8001370:	dfc00115 	stw	ra,4(sp)
 8001374:	df000015 	stw	fp,0(sp)
 8001378:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800137c:	01414004 	movi	r5,1280
 8001380:	01000084 	movi	r4,2
 8001384:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001388:	01414304 	movi	r5,1292
 800138c:	0009883a 	mov	r4,zero
 8001390:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001394:	01400204 	movi	r5,8
 8001398:	0009883a 	mov	r4,zero
 800139c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80013a0:	0140b404 	movi	r5,720
 80013a4:	0009883a 	mov	r4,zero
 80013a8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80013ac:	01400044 	movi	r5,1
 80013b0:	0009883a 	mov	r4,zero
 80013b4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80013b8:	014004c4 	movi	r5,19
 80013bc:	0009883a 	mov	r4,zero
 80013c0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80013c4:	01414504 	movi	r5,1300
 80013c8:	0009883a 	mov	r4,zero
 80013cc:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 80013d0:	0141a004 	movi	r5,1664
 80013d4:	0009883a 	mov	r4,zero
 80013d8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 80013dc:	01404004 	movi	r5,256
 80013e0:	0009883a 	mov	r4,zero
 80013e4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 80013e8:	000b883a 	mov	r5,zero
 80013ec:	0009883a 	mov	r4,zero
 80013f0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 80013f4:	01400204 	movi	r5,8
 80013f8:	0009883a 	mov	r4,zero
 80013fc:	80002f40 	call	80002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 8001400:	01414b04 	movi	r5,1324
 8001404:	0009883a 	mov	r4,zero
 8001408:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 800140c:	01400204 	movi	r5,8
 8001410:	0009883a 	mov	r4,zero
 8001414:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 8001418:	0140a404 	movi	r5,656
 800141c:	0009883a 	mov	r4,zero
 8001420:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001424:	01401044 	movi	r5,65
 8001428:	0009883a 	mov	r4,zero
 800142c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001430:	014004c4 	movi	r5,19
 8001434:	0009883a 	mov	r4,zero
 8001438:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
 800143c:	01414804 	movi	r5,1312
 8001440:	0009883a 	mov	r4,zero
 8001444:	80002f40 	call	80002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 8001448:	000b883a 	mov	r5,zero
 800144c:	0009883a 	mov	r4,zero
 8001450:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001454:	000b883a 	mov	r5,zero
 8001458:	0009883a 	mov	r4,zero
 800145c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 8001460:	01408404 	movi	r5,528
 8001464:	0009883a 	mov	r4,zero
 8001468:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 800146c:	01401044 	movi	r5,65
 8001470:	0009883a 	mov	r4,zero
 8001474:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001478:	014004c4 	movi	r5,19
 800147c:	0009883a 	mov	r4,zero
 8001480:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001484:	000b883a 	mov	r5,zero
 8001488:	0009883a 	mov	r4,zero
 800148c:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001490:	01414004 	movi	r5,1280
 8001494:	01006c04 	movi	r4,432
 8001498:	800111c0 	call	800111c <UsbWrite>
}
 800149c:	0001883a 	nop
 80014a0:	e037883a 	mov	sp,fp
 80014a4:	dfc00117 	ldw	ra,4(sp)
 80014a8:	df000017 	ldw	fp,0(sp)
 80014ac:	dec00204 	addi	sp,sp,8
 80014b0:	f800283a 	ret

080014b4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 80014b4:	defffe04 	addi	sp,sp,-8
 80014b8:	dfc00115 	stw	ra,4(sp)
 80014bc:	df000015 	stw	fp,0(sp)
 80014c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80014c4:	01414004 	movi	r5,1280
 80014c8:	01000084 	movi	r4,2
 80014cc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80014d0:	01414304 	movi	r5,1292
 80014d4:	0009883a 	mov	r4,zero
 80014d8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80014dc:	01400204 	movi	r5,8
 80014e0:	0009883a 	mov	r4,zero
 80014e4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80014e8:	0140b404 	movi	r5,720
 80014ec:	0009883a 	mov	r4,zero
 80014f0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80014f4:	01400044 	movi	r5,1
 80014f8:	0009883a 	mov	r4,zero
 80014fc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001500:	014004c4 	movi	r5,19
 8001504:	0009883a 	mov	r4,zero
 8001508:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 800150c:	01414504 	movi	r5,1300
 8001510:	0009883a 	mov	r4,zero
 8001514:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001518:	0141a004 	movi	r5,1664
 800151c:	0009883a 	mov	r4,zero
 8001520:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 8001524:	01404004 	movi	r5,256
 8001528:	0009883a 	mov	r4,zero
 800152c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001530:	000b883a 	mov	r5,zero
 8001534:	0009883a 	mov	r4,zero
 8001538:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 800153c:	01400484 	movi	r5,18
 8001540:	0009883a 	mov	r4,zero
 8001544:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001548:	01415104 	movi	r5,1348
 800154c:	0009883a 	mov	r4,zero
 8001550:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001554:	01400204 	movi	r5,8
 8001558:	0009883a 	mov	r4,zero
 800155c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001560:	0140a404 	movi	r5,656
 8001564:	0009883a 	mov	r4,zero
 8001568:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 800156c:	01401044 	movi	r5,65
 8001570:	0009883a 	mov	r4,zero
 8001574:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001578:	014004c4 	movi	r5,19
 800157c:	0009883a 	mov	r4,zero
 8001580:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001584:	01414804 	movi	r5,1312
 8001588:	0009883a 	mov	r4,zero
 800158c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 8001590:	01415304 	movi	r5,1356
 8001594:	0009883a 	mov	r4,zero
 8001598:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 800159c:	01400204 	movi	r5,8
 80015a0:	0009883a 	mov	r4,zero
 80015a4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80015a8:	0140a404 	movi	r5,656
 80015ac:	0009883a 	mov	r4,zero
 80015b0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 80015b4:	01400044 	movi	r5,1
 80015b8:	0009883a 	mov	r4,zero
 80015bc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80015c0:	014004c4 	movi	r5,19
 80015c4:	0009883a 	mov	r4,zero
 80015c8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 80015cc:	01414b04 	movi	r5,1324
 80015d0:	0009883a 	mov	r4,zero
 80015d4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 80015d8:	01415504 	movi	r5,1364
 80015dc:	0009883a 	mov	r4,zero
 80015e0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 80015e4:	01400084 	movi	r5,2
 80015e8:	0009883a 	mov	r4,zero
 80015ec:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 80015f0:	0140a404 	movi	r5,656
 80015f4:	0009883a 	mov	r4,zero
 80015f8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 80015fc:	01401044 	movi	r5,65
 8001600:	0009883a 	mov	r4,zero
 8001604:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001608:	014004c4 	movi	r5,19
 800160c:	0009883a 	mov	r4,zero
 8001610:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001614:	01414e04 	movi	r5,1336
 8001618:	0009883a 	mov	r4,zero
 800161c:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 8001620:	000b883a 	mov	r5,zero
 8001624:	0009883a 	mov	r4,zero
 8001628:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 800162c:	000b883a 	mov	r5,zero
 8001630:	0009883a 	mov	r4,zero
 8001634:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 8001638:	01408404 	movi	r5,528
 800163c:	0009883a 	mov	r4,zero
 8001640:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 8001644:	01401044 	movi	r5,65
 8001648:	0009883a 	mov	r4,zero
 800164c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001650:	014004c4 	movi	r5,19
 8001654:	0009883a 	mov	r4,zero
 8001658:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 800165c:	000b883a 	mov	r5,zero
 8001660:	0009883a 	mov	r4,zero
 8001664:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001668:	01414004 	movi	r5,1280
 800166c:	01006c04 	movi	r4,432
 8001670:	800111c0 	call	800111c <UsbWrite>
}
 8001674:	0001883a 	nop
 8001678:	e037883a 	mov	sp,fp
 800167c:	dfc00117 	ldw	ra,4(sp)
 8001680:	df000017 	ldw	fp,0(sp)
 8001684:	dec00204 	addi	sp,sp,8
 8001688:	f800283a 	ret

0800168c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 800168c:	defffe04 	addi	sp,sp,-8
 8001690:	dfc00115 	stw	ra,4(sp)
 8001694:	df000015 	stw	fp,0(sp)
 8001698:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800169c:	01414004 	movi	r5,1280
 80016a0:	01000084 	movi	r4,2
 80016a4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80016a8:	01414304 	movi	r5,1292
 80016ac:	0009883a 	mov	r4,zero
 80016b0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80016b4:	01400204 	movi	r5,8
 80016b8:	0009883a 	mov	r4,zero
 80016bc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80016c0:	0140b404 	movi	r5,720
 80016c4:	0009883a 	mov	r4,zero
 80016c8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80016cc:	01400044 	movi	r5,1
 80016d0:	0009883a 	mov	r4,zero
 80016d4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80016d8:	014004c4 	movi	r5,19
 80016dc:	0009883a 	mov	r4,zero
 80016e0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80016e4:	01414504 	movi	r5,1300
 80016e8:	0009883a 	mov	r4,zero
 80016ec:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 80016f0:	0141a004 	movi	r5,1664
 80016f4:	0009883a 	mov	r4,zero
 80016f8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 80016fc:	01408004 	movi	r5,512
 8001700:	0009883a 	mov	r4,zero
 8001704:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001708:	000b883a 	mov	r5,zero
 800170c:	0009883a 	mov	r4,zero
 8001710:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 8001714:	01400244 	movi	r5,9
 8001718:	0009883a 	mov	r4,zero
 800171c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001720:	01415104 	movi	r5,1348
 8001724:	0009883a 	mov	r4,zero
 8001728:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 800172c:	01400204 	movi	r5,8
 8001730:	0009883a 	mov	r4,zero
 8001734:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001738:	0140a404 	movi	r5,656
 800173c:	0009883a 	mov	r4,zero
 8001740:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001744:	01401044 	movi	r5,65
 8001748:	0009883a 	mov	r4,zero
 800174c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001750:	014004c4 	movi	r5,19
 8001754:	0009883a 	mov	r4,zero
 8001758:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 800175c:	01414804 	movi	r5,1312
 8001760:	0009883a 	mov	r4,zero
 8001764:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 8001768:	01415304 	movi	r5,1356
 800176c:	0009883a 	mov	r4,zero
 8001770:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 8001774:	01400044 	movi	r5,1
 8001778:	0009883a 	mov	r4,zero
 800177c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001780:	0140a404 	movi	r5,656
 8001784:	0009883a 	mov	r4,zero
 8001788:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800178c:	01400044 	movi	r5,1
 8001790:	0009883a 	mov	r4,zero
 8001794:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001798:	014004c4 	movi	r5,19
 800179c:	0009883a 	mov	r4,zero
 80017a0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 80017a4:	01414b04 	movi	r5,1324
 80017a8:	0009883a 	mov	r4,zero
 80017ac:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 80017b0:	000b883a 	mov	r5,zero
 80017b4:	0009883a 	mov	r4,zero
 80017b8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 80017bc:	000b883a 	mov	r5,zero
 80017c0:	0009883a 	mov	r4,zero
 80017c4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 80017c8:	01408404 	movi	r5,528
 80017cc:	0009883a 	mov	r4,zero
 80017d0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 80017d4:	01401044 	movi	r5,65
 80017d8:	0009883a 	mov	r4,zero
 80017dc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 80017e0:	014004c4 	movi	r5,19
 80017e4:	0009883a 	mov	r4,zero
 80017e8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 80017ec:	000b883a 	mov	r5,zero
 80017f0:	0009883a 	mov	r4,zero
 80017f4:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80017f8:	01414004 	movi	r5,1280
 80017fc:	01006c04 	movi	r4,432
 8001800:	800111c0 	call	800111c <UsbWrite>
}
 8001804:	0001883a 	nop
 8001808:	e037883a 	mov	sp,fp
 800180c:	dfc00117 	ldw	ra,4(sp)
 8001810:	df000017 	ldw	fp,0(sp)
 8001814:	dec00204 	addi	sp,sp,8
 8001818:	f800283a 	ret

0800181c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 800181c:	defffe04 	addi	sp,sp,-8
 8001820:	dfc00115 	stw	ra,4(sp)
 8001824:	df000015 	stw	fp,0(sp)
 8001828:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800182c:	01414004 	movi	r5,1280
 8001830:	01000084 	movi	r4,2
 8001834:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001838:	01414304 	movi	r5,1292
 800183c:	0009883a 	mov	r4,zero
 8001840:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001844:	01400204 	movi	r5,8
 8001848:	0009883a 	mov	r4,zero
 800184c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001850:	0140b404 	movi	r5,720
 8001854:	0009883a 	mov	r4,zero
 8001858:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 800185c:	01400044 	movi	r5,1
 8001860:	0009883a 	mov	r4,zero
 8001864:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001868:	014004c4 	movi	r5,19
 800186c:	0009883a 	mov	r4,zero
 8001870:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001874:	01414504 	movi	r5,1300
 8001878:	0009883a 	mov	r4,zero
 800187c:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001880:	0141a004 	movi	r5,1664
 8001884:	0009883a 	mov	r4,zero
 8001888:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 800188c:	01408004 	movi	r5,512
 8001890:	0009883a 	mov	r4,zero
 8001894:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001898:	000b883a 	mov	r5,zero
 800189c:	0009883a 	mov	r4,zero
 80018a0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 80018a4:	01403fc4 	movi	r5,255
 80018a8:	0009883a 	mov	r4,zero
 80018ac:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 80018b0:	01415704 	movi	r5,1372
 80018b4:	0009883a 	mov	r4,zero
 80018b8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80018bc:	01400204 	movi	r5,8
 80018c0:	0009883a 	mov	r4,zero
 80018c4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80018c8:	0140a404 	movi	r5,656
 80018cc:	0009883a 	mov	r4,zero
 80018d0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80018d4:	01401044 	movi	r5,65
 80018d8:	0009883a 	mov	r4,zero
 80018dc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80018e0:	014004c4 	movi	r5,19
 80018e4:	0009883a 	mov	r4,zero
 80018e8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80018ec:	01414804 	movi	r5,1312
 80018f0:	0009883a 	mov	r4,zero
 80018f4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 80018f8:	01415904 	movi	r5,1380
 80018fc:	0009883a 	mov	r4,zero
 8001900:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001904:	01400204 	movi	r5,8
 8001908:	0009883a 	mov	r4,zero
 800190c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001910:	0140a404 	movi	r5,656
 8001914:	0009883a 	mov	r4,zero
 8001918:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800191c:	01400044 	movi	r5,1
 8001920:	0009883a 	mov	r4,zero
 8001924:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001928:	014004c4 	movi	r5,19
 800192c:	0009883a 	mov	r4,zero
 8001930:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001934:	01414b04 	movi	r5,1324
 8001938:	0009883a 	mov	r4,zero
 800193c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 8001940:	01415b04 	movi	r5,1388
 8001944:	0009883a 	mov	r4,zero
 8001948:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 800194c:	01400204 	movi	r5,8
 8001950:	0009883a 	mov	r4,zero
 8001954:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001958:	0140a404 	movi	r5,656
 800195c:	0009883a 	mov	r4,zero
 8001960:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001964:	01401044 	movi	r5,65
 8001968:	0009883a 	mov	r4,zero
 800196c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001970:	014004c4 	movi	r5,19
 8001974:	0009883a 	mov	r4,zero
 8001978:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 800197c:	01414e04 	movi	r5,1336
 8001980:	0009883a 	mov	r4,zero
 8001984:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 8001988:	01415d04 	movi	r5,1396
 800198c:	0009883a 	mov	r4,zero
 8001990:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001994:	01400204 	movi	r5,8
 8001998:	0009883a 	mov	r4,zero
 800199c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 80019a0:	0140a404 	movi	r5,656
 80019a4:	0009883a 	mov	r4,zero
 80019a8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 80019ac:	01400044 	movi	r5,1
 80019b0:	0009883a 	mov	r4,zero
 80019b4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 80019b8:	014004c4 	movi	r5,19
 80019bc:	0009883a 	mov	r4,zero
 80019c0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 80019c4:	01415104 	movi	r5,1348
 80019c8:	0009883a 	mov	r4,zero
 80019cc:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 80019d0:	01415f04 	movi	r5,1404
 80019d4:	0009883a 	mov	r4,zero
 80019d8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 80019dc:	01400084 	movi	r5,2
 80019e0:	0009883a 	mov	r4,zero
 80019e4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80019e8:	0140a404 	movi	r5,656
 80019ec:	0009883a 	mov	r4,zero
 80019f0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 80019f4:	01401044 	movi	r5,65
 80019f8:	0009883a 	mov	r4,zero
 80019fc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001a00:	014004c4 	movi	r5,19
 8001a04:	0009883a 	mov	r4,zero
 8001a08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001a0c:	01415404 	movi	r5,1360
 8001a10:	0009883a 	mov	r4,zero
 8001a14:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 8001a18:	000b883a 	mov	r5,zero
 8001a1c:	0009883a 	mov	r4,zero
 8001a20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 8001a24:	000b883a 	mov	r5,zero
 8001a28:	0009883a 	mov	r4,zero
 8001a2c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 8001a30:	01408404 	movi	r5,528
 8001a34:	0009883a 	mov	r4,zero
 8001a38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 8001a3c:	01401044 	movi	r5,65
 8001a40:	0009883a 	mov	r4,zero
 8001a44:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001a48:	014004c4 	movi	r5,19
 8001a4c:	0009883a 	mov	r4,zero
 8001a50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 8001a54:	000b883a 	mov	r5,zero
 8001a58:	0009883a 	mov	r4,zero
 8001a5c:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001a60:	01414004 	movi	r5,1280
 8001a64:	01006c04 	movi	r4,432
 8001a68:	800111c0 	call	800111c <UsbWrite>
}
 8001a6c:	0001883a 	nop
 8001a70:	e037883a 	mov	sp,fp
 8001a74:	dfc00117 	ldw	ra,4(sp)
 8001a78:	df000017 	ldw	fp,0(sp)
 8001a7c:	dec00204 	addi	sp,sp,8
 8001a80:	f800283a 	ret

08001a84 <UsbSetConfig>:

void UsbSetConfig()
{
 8001a84:	defffe04 	addi	sp,sp,-8
 8001a88:	dfc00115 	stw	ra,4(sp)
 8001a8c:	df000015 	stw	fp,0(sp)
 8001a90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001a94:	01414004 	movi	r5,1280
 8001a98:	01000084 	movi	r4,2
 8001a9c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001aa0:	01414304 	movi	r5,1292
 8001aa4:	0009883a 	mov	r4,zero
 8001aa8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001aac:	01400204 	movi	r5,8
 8001ab0:	0009883a 	mov	r4,zero
 8001ab4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001ab8:	0140b404 	movi	r5,720
 8001abc:	0009883a 	mov	r4,zero
 8001ac0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001ac4:	01400044 	movi	r5,1
 8001ac8:	0009883a 	mov	r4,zero
 8001acc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001ad0:	014004c4 	movi	r5,19
 8001ad4:	0009883a 	mov	r4,zero
 8001ad8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001adc:	01414504 	movi	r5,1300
 8001ae0:	0009883a 	mov	r4,zero
 8001ae4:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 8001ae8:	01424004 	movi	r5,2304
 8001aec:	0009883a 	mov	r4,zero
 8001af0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 8001af4:	01400044 	movi	r5,1
 8001af8:	0009883a 	mov	r4,zero
 8001afc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b00:	000b883a 	mov	r5,zero
 8001b04:	0009883a 	mov	r4,zero
 8001b08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b0c:	000b883a 	mov	r5,zero
 8001b10:	0009883a 	mov	r4,zero
 8001b14:	80002f40 	call	80002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001b18:	000b883a 	mov	r5,zero
 8001b1c:	0009883a 	mov	r4,zero
 8001b20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001b24:	000b883a 	mov	r5,zero
 8001b28:	0009883a 	mov	r4,zero
 8001b2c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001b30:	0140a404 	movi	r5,656
 8001b34:	0009883a 	mov	r4,zero
 8001b38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001b3c:	01401044 	movi	r5,65
 8001b40:	0009883a 	mov	r4,zero
 8001b44:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001b48:	014004c4 	movi	r5,19
 8001b4c:	0009883a 	mov	r4,zero
 8001b50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b54:	000b883a 	mov	r5,zero
 8001b58:	0009883a 	mov	r4,zero
 8001b5c:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001b60:	01414004 	movi	r5,1280
 8001b64:	01006c04 	movi	r4,432
 8001b68:	800111c0 	call	800111c <UsbWrite>

}
 8001b6c:	0001883a 	nop
 8001b70:	e037883a 	mov	sp,fp
 8001b74:	dfc00117 	ldw	ra,4(sp)
 8001b78:	df000017 	ldw	fp,0(sp)
 8001b7c:	dec00204 	addi	sp,sp,8
 8001b80:	f800283a 	ret

08001b84 <UsbClassRequest>:

void UsbClassRequest()
{
 8001b84:	defffe04 	addi	sp,sp,-8
 8001b88:	dfc00115 	stw	ra,4(sp)
 8001b8c:	df000015 	stw	fp,0(sp)
 8001b90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001b94:	01414004 	movi	r5,1280
 8001b98:	01000084 	movi	r4,2
 8001b9c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001ba0:	01414304 	movi	r5,1292
 8001ba4:	0009883a 	mov	r4,zero
 8001ba8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001bac:	01400204 	movi	r5,8
 8001bb0:	0009883a 	mov	r4,zero
 8001bb4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001bb8:	0140b404 	movi	r5,720
 8001bbc:	0009883a 	mov	r4,zero
 8001bc0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001bc4:	01400044 	movi	r5,1
 8001bc8:	0009883a 	mov	r4,zero
 8001bcc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001bd0:	014004c4 	movi	r5,19
 8001bd4:	0009883a 	mov	r4,zero
 8001bd8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001bdc:	01414504 	movi	r5,1300
 8001be0:	0009883a 	mov	r4,zero
 8001be4:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 8001be8:	01428844 	movi	r5,2593
 8001bec:	0009883a 	mov	r4,zero
 8001bf0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 8001bf4:	000b883a 	mov	r5,zero
 8001bf8:	0009883a 	mov	r4,zero
 8001bfc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001c00:	000b883a 	mov	r5,zero
 8001c04:	0009883a 	mov	r4,zero
 8001c08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001c0c:	000b883a 	mov	r5,zero
 8001c10:	0009883a 	mov	r4,zero
 8001c14:	80002f40 	call	80002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001c18:	000b883a 	mov	r5,zero
 8001c1c:	0009883a 	mov	r4,zero
 8001c20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 8001c24:	000b883a 	mov	r5,zero
 8001c28:	0009883a 	mov	r4,zero
 8001c2c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001c30:	0140a404 	movi	r5,656
 8001c34:	0009883a 	mov	r4,zero
 8001c38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001c3c:	01401044 	movi	r5,65
 8001c40:	0009883a 	mov	r4,zero
 8001c44:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001c48:	014004c4 	movi	r5,19
 8001c4c:	0009883a 	mov	r4,zero
 8001c50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001c54:	000b883a 	mov	r5,zero
 8001c58:	0009883a 	mov	r4,zero
 8001c5c:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001c60:	01414004 	movi	r5,1280
 8001c64:	01006c04 	movi	r4,432
 8001c68:	800111c0 	call	800111c <UsbWrite>
}
 8001c6c:	0001883a 	nop
 8001c70:	e037883a 	mov	sp,fp
 8001c74:	dfc00117 	ldw	ra,4(sp)
 8001c78:	df000017 	ldw	fp,0(sp)
 8001c7c:	dec00204 	addi	sp,sp,8
 8001c80:	f800283a 	ret

08001c84 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001c84:	defffe04 	addi	sp,sp,-8
 8001c88:	dfc00115 	stw	ra,4(sp)
 8001c8c:	df000015 	stw	fp,0(sp)
 8001c90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001c94:	01414004 	movi	r5,1280
 8001c98:	01000084 	movi	r4,2
 8001c9c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001ca0:	01414304 	movi	r5,1292
 8001ca4:	0009883a 	mov	r4,zero
 8001ca8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001cac:	01400204 	movi	r5,8
 8001cb0:	0009883a 	mov	r4,zero
 8001cb4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001cb8:	0140b404 	movi	r5,720
 8001cbc:	0009883a 	mov	r4,zero
 8001cc0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001cc4:	01400044 	movi	r5,1
 8001cc8:	0009883a 	mov	r4,zero
 8001ccc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001cd0:	014004c4 	movi	r5,19
 8001cd4:	0009883a 	mov	r4,zero
 8001cd8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001cdc:	01414504 	movi	r5,1300
 8001ce0:	0009883a 	mov	r4,zero
 8001ce4:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001ce8:	0141a044 	movi	r5,1665
 8001cec:	0009883a 	mov	r4,zero
 8001cf0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 8001cf4:	01484004 	movi	r5,8448
 8001cf8:	0009883a 	mov	r4,zero
 8001cfc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001d00:	000b883a 	mov	r5,zero
 8001d04:	0009883a 	mov	r4,zero
 8001d08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001d0c:	01401ec4 	movi	r5,123
 8001d10:	0009883a 	mov	r4,zero
 8001d14:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001d18:	01415104 	movi	r5,1348
 8001d1c:	0009883a 	mov	r4,zero
 8001d20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001d24:	01400204 	movi	r5,8
 8001d28:	0009883a 	mov	r4,zero
 8001d2c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001d30:	0140a404 	movi	r5,656
 8001d34:	0009883a 	mov	r4,zero
 8001d38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001d3c:	01401044 	movi	r5,65
 8001d40:	0009883a 	mov	r4,zero
 8001d44:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001d48:	014004c4 	movi	r5,19
 8001d4c:	0009883a 	mov	r4,zero
 8001d50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001d54:	01414804 	movi	r5,1312
 8001d58:	0009883a 	mov	r4,zero
 8001d5c:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001d60:	000b883a 	mov	r5,zero
 8001d64:	0009883a 	mov	r4,zero
 8001d68:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001d6c:	000b883a 	mov	r5,zero
 8001d70:	0009883a 	mov	r4,zero
 8001d74:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001d78:	01408404 	movi	r5,528
 8001d7c:	0009883a 	mov	r4,zero
 8001d80:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001d84:	01401044 	movi	r5,65
 8001d88:	0009883a 	mov	r4,zero
 8001d8c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001d90:	014004c4 	movi	r5,19
 8001d94:	0009883a 	mov	r4,zero
 8001d98:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001d9c:	000b883a 	mov	r5,zero
 8001da0:	0009883a 	mov	r4,zero
 8001da4:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001da8:	01414004 	movi	r5,1280
 8001dac:	01006c04 	movi	r4,432
 8001db0:	800111c0 	call	800111c <UsbWrite>

}
 8001db4:	0001883a 	nop
 8001db8:	e037883a 	mov	sp,fp
 8001dbc:	dfc00117 	ldw	ra,4(sp)
 8001dc0:	df000017 	ldw	fp,0(sp)
 8001dc4:	dec00204 	addi	sp,sp,8
 8001dc8:	f800283a 	ret

08001dcc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001dcc:	defffe04 	addi	sp,sp,-8
 8001dd0:	dfc00115 	stw	ra,4(sp)
 8001dd4:	df000015 	stw	fp,0(sp)
 8001dd8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001ddc:	01414004 	movi	r5,1280
 8001de0:	01000084 	movi	r4,2
 8001de4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001de8:	01414304 	movi	r5,1292
 8001dec:	0009883a 	mov	r4,zero
 8001df0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001df4:	01400204 	movi	r5,8
 8001df8:	0009883a 	mov	r4,zero
 8001dfc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001e00:	0140b404 	movi	r5,720
 8001e04:	0009883a 	mov	r4,zero
 8001e08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001e0c:	01400044 	movi	r5,1
 8001e10:	0009883a 	mov	r4,zero
 8001e14:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001e18:	014004c4 	movi	r5,19
 8001e1c:	0009883a 	mov	r4,zero
 8001e20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001e24:	01414504 	movi	r5,1300
 8001e28:	0009883a 	mov	r4,zero
 8001e2c:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001e30:	0141a044 	movi	r5,1665
 8001e34:	0009883a 	mov	r4,zero
 8001e38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 8001e3c:	01488004 	movi	r5,8704
 8001e40:	0009883a 	mov	r4,zero
 8001e44:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001e48:	000b883a 	mov	r5,zero
 8001e4c:	0009883a 	mov	r4,zero
 8001e50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001e54:	01401ec4 	movi	r5,123
 8001e58:	0009883a 	mov	r4,zero
 8001e5c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 8001e60:	01416004 	movi	r5,1408
 8001e64:	0009883a 	mov	r4,zero
 8001e68:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001e6c:	01400204 	movi	r5,8
 8001e70:	0009883a 	mov	r4,zero
 8001e74:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001e78:	0140a404 	movi	r5,656
 8001e7c:	0009883a 	mov	r4,zero
 8001e80:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001e84:	01401044 	movi	r5,65
 8001e88:	0009883a 	mov	r4,zero
 8001e8c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001e90:	014004c4 	movi	r5,19
 8001e94:	0009883a 	mov	r4,zero
 8001e98:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001e9c:	01414804 	movi	r5,1312
 8001ea0:	0009883a 	mov	r4,zero
 8001ea4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 8001ea8:	01416204 	movi	r5,1416
 8001eac:	0009883a 	mov	r4,zero
 8001eb0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001eb4:	01400204 	movi	r5,8
 8001eb8:	0009883a 	mov	r4,zero
 8001ebc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001ec0:	0140a404 	movi	r5,656
 8001ec4:	0009883a 	mov	r4,zero
 8001ec8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001ecc:	01400044 	movi	r5,1
 8001ed0:	0009883a 	mov	r4,zero
 8001ed4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001ed8:	014004c4 	movi	r5,19
 8001edc:	0009883a 	mov	r4,zero
 8001ee0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001ee4:	01414b04 	movi	r5,1324
 8001ee8:	0009883a 	mov	r4,zero
 8001eec:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 8001ef0:	01416404 	movi	r5,1424
 8001ef4:	0009883a 	mov	r4,zero
 8001ef8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001efc:	01400204 	movi	r5,8
 8001f00:	0009883a 	mov	r4,zero
 8001f04:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001f08:	0140a404 	movi	r5,656
 8001f0c:	0009883a 	mov	r4,zero
 8001f10:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001f14:	01401044 	movi	r5,65
 8001f18:	0009883a 	mov	r4,zero
 8001f1c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001f20:	014004c4 	movi	r5,19
 8001f24:	0009883a 	mov	r4,zero
 8001f28:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001f2c:	01414e04 	movi	r5,1336
 8001f30:	0009883a 	mov	r4,zero
 8001f34:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 8001f38:	01416604 	movi	r5,1432
 8001f3c:	0009883a 	mov	r4,zero
 8001f40:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001f44:	01400204 	movi	r5,8
 8001f48:	0009883a 	mov	r4,zero
 8001f4c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001f50:	0140a404 	movi	r5,656
 8001f54:	0009883a 	mov	r4,zero
 8001f58:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001f5c:	01400044 	movi	r5,1
 8001f60:	0009883a 	mov	r4,zero
 8001f64:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001f68:	014004c4 	movi	r5,19
 8001f6c:	0009883a 	mov	r4,zero
 8001f70:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001f74:	01415104 	movi	r5,1348
 8001f78:	0009883a 	mov	r4,zero
 8001f7c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 8001f80:	01416804 	movi	r5,1440
 8001f84:	0009883a 	mov	r4,zero
 8001f88:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001f8c:	01400204 	movi	r5,8
 8001f90:	0009883a 	mov	r4,zero
 8001f94:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001f98:	0140a404 	movi	r5,656
 8001f9c:	0009883a 	mov	r4,zero
 8001fa0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001fa4:	01401044 	movi	r5,65
 8001fa8:	0009883a 	mov	r4,zero
 8001fac:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001fb0:	014004c4 	movi	r5,19
 8001fb4:	0009883a 	mov	r4,zero
 8001fb8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001fbc:	01415404 	movi	r5,1360
 8001fc0:	0009883a 	mov	r4,zero
 8001fc4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 8001fc8:	01416a04 	movi	r5,1448
 8001fcc:	0009883a 	mov	r4,zero
 8001fd0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001fd4:	01400204 	movi	r5,8
 8001fd8:	0009883a 	mov	r4,zero
 8001fdc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001fe0:	0140a404 	movi	r5,656
 8001fe4:	0009883a 	mov	r4,zero
 8001fe8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001fec:	01400044 	movi	r5,1
 8001ff0:	0009883a 	mov	r4,zero
 8001ff4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001ff8:	014004c4 	movi	r5,19
 8001ffc:	0009883a 	mov	r4,zero
 8002000:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 8002004:	01415704 	movi	r5,1372
 8002008:	0009883a 	mov	r4,zero
 800200c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 8002010:	01416c04 	movi	r5,1456
 8002014:	0009883a 	mov	r4,zero
 8002018:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 800201c:	01400204 	movi	r5,8
 8002020:	0009883a 	mov	r4,zero
 8002024:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 8002028:	0140a404 	movi	r5,656
 800202c:	0009883a 	mov	r4,zero
 8002030:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 8002034:	01401044 	movi	r5,65
 8002038:	0009883a 	mov	r4,zero
 800203c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8002040:	014004c4 	movi	r5,19
 8002044:	0009883a 	mov	r4,zero
 8002048:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 800204c:	01415a04 	movi	r5,1384
 8002050:	0009883a 	mov	r4,zero
 8002054:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 8002058:	01416e04 	movi	r5,1464
 800205c:	0009883a 	mov	r4,zero
 8002060:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 8002064:	014000c4 	movi	r5,3
 8002068:	0009883a 	mov	r4,zero
 800206c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8002070:	0140a404 	movi	r5,656
 8002074:	0009883a 	mov	r4,zero
 8002078:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 800207c:	01400044 	movi	r5,1
 8002080:	0009883a 	mov	r4,zero
 8002084:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 8002088:	014004c4 	movi	r5,19
 800208c:	0009883a 	mov	r4,zero
 8002090:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 8002094:	01415d04 	movi	r5,1396
 8002098:	0009883a 	mov	r4,zero
 800209c:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 80020a0:	000b883a 	mov	r5,zero
 80020a4:	0009883a 	mov	r4,zero
 80020a8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 80020ac:	000b883a 	mov	r5,zero
 80020b0:	0009883a 	mov	r4,zero
 80020b4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 80020b8:	01408404 	movi	r5,528
 80020bc:	0009883a 	mov	r4,zero
 80020c0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80020c4:	01401044 	movi	r5,65
 80020c8:	0009883a 	mov	r4,zero
 80020cc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80020d0:	014004c4 	movi	r5,19
 80020d4:	0009883a 	mov	r4,zero
 80020d8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 80020dc:	000b883a 	mov	r5,zero
 80020e0:	0009883a 	mov	r4,zero
 80020e4:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80020e8:	01414004 	movi	r5,1280
 80020ec:	01006c04 	movi	r4,432
 80020f0:	800111c0 	call	800111c <UsbWrite>

}
 80020f4:	0001883a 	nop
 80020f8:	e037883a 	mov	sp,fp
 80020fc:	dfc00117 	ldw	ra,4(sp)
 8002100:	df000017 	ldw	fp,0(sp)
 8002104:	dec00204 	addi	sp,sp,8
 8002108:	f800283a 	ret

0800210c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 800210c:	defffd04 	addi	sp,sp,-12
 8002110:	dfc00215 	stw	ra,8(sp)
 8002114:	df000115 	stw	fp,4(sp)
 8002118:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 800211c:	01005104 	movi	r4,324
 8002120:	80011740 	call	8001174 <UsbRead>
 8002124:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002128:	000b883a 	mov	r5,zero
 800212c:	01005104 	movi	r4,324
 8002130:	800111c0 	call	800111c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8002134:	00000d06 	br	800216c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8002138:	e0bfff0b 	ldhu	r2,-4(fp)
 800213c:	10000526 	beq	r2,zero,8002154 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 8002140:	e0bfff0b 	ldhu	r2,-4(fp)
 8002144:	100b883a 	mov	r5,r2
 8002148:	01020074 	movhi	r4,2049
 800214c:	21084d04 	addi	r4,r4,8500
 8002150:	80022c00 	call	80022c0 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8002154:	01005104 	movi	r4,324
 8002158:	80011740 	call	8001174 <UsbRead>
 800215c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002160:	000b883a 	mov	r5,zero
 8002164:	01005104 	movi	r4,324
 8002168:	800111c0 	call	800111c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 800216c:	e0bfff0b 	ldhu	r2,-4(fp)
 8002170:	10840018 	cmpnei	r2,r2,4096
 8002174:	103ff01e 	bne	r2,zero,8002138 <__alt_data_end+0xfc002138>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 8002178:	e0bfff0b 	ldhu	r2,-4(fp)
}
 800217c:	e037883a 	mov	sp,fp
 8002180:	dfc00117 	ldw	ra,4(sp)
 8002184:	df000017 	ldw	fp,0(sp)
 8002188:	dec00204 	addi	sp,sp,8
 800218c:	f800283a 	ret

08002190 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 8002190:	defffd04 	addi	sp,sp,-12
 8002194:	dfc00215 	stw	ra,8(sp)
 8002198:	df000115 	stw	fp,4(sp)
 800219c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 80021a0:	010000c4 	movi	r4,3
 80021a4:	80003640 	call	8000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 80021a8:	01005104 	movi	r4,324
 80021ac:	80011740 	call	8001174 <UsbRead>
 80021b0:	10bfffcc 	andi	r2,r2,65535
 80021b4:	10840018 	cmpnei	r2,r2,4096
 80021b8:	1000091e 	bne	r2,zero,80021e0 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80021bc:	000b883a 	mov	r5,zero
 80021c0:	01005104 	movi	r4,324
 80021c4:	800111c0 	call	800111c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80021c8:	0001883a 	nop
 80021cc:	010000c4 	movi	r4,3
 80021d0:	80003640 	call	8000364 <IO_read>
 80021d4:	10bfffcc 	andi	r2,r2,65535
 80021d8:	1080040c 	andi	r2,r2,16
 80021dc:	103ffb26 	beq	r2,zero,80021cc <__alt_data_end+0xfc0021cc>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 80021e0:	01414204 	movi	r5,1288
 80021e4:	01000084 	movi	r4,2
 80021e8:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80021ec:	0009883a 	mov	r4,zero
 80021f0:	80003640 	call	8000364 <IO_read>
 80021f4:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 80021f8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80021fc:	e037883a 	mov	sp,fp
 8002200:	dfc00117 	ldw	ra,4(sp)
 8002204:	df000017 	ldw	fp,0(sp)
 8002208:	dec00204 	addi	sp,sp,8
 800220c:	f800283a 	ret

08002210 <UsbPrintMem>:


void UsbPrintMem()
{
 8002210:	defffc04 	addi	sp,sp,-16
 8002214:	dfc00315 	stw	ra,12(sp)
 8002218:	df000215 	stw	fp,8(sp)
 800221c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 8002220:	01414004 	movi	r5,1280
 8002224:	01000084 	movi	r4,2
 8002228:	80002f40 	call	80002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
 800222c:	e03ffe15 	stw	zero,-8(fp)
 8002230:	00000e06 	br	800226c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 8002234:	0009883a 	mov	r4,zero
 8002238:	80003640 	call	8000364 <IO_read>
 800223c:	10bfffcc 	andi	r2,r2,65535
 8002240:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 8002244:	e0bffe17 	ldw	r2,-8(fp)
 8002248:	10814004 	addi	r2,r2,1280
 800224c:	e1bfff17 	ldw	r6,-4(fp)
 8002250:	100b883a 	mov	r5,r2
 8002254:	01020074 	movhi	r4,2049
 8002258:	21085504 	addi	r4,r4,8532
 800225c:	80022c00 	call	80022c0 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 8002260:	e0bffe17 	ldw	r2,-8(fp)
 8002264:	10800084 	addi	r2,r2,2
 8002268:	e0bffe15 	stw	r2,-8(fp)
 800226c:	e0bffe17 	ldw	r2,-8(fp)
 8002270:	10803250 	cmplti	r2,r2,201
 8002274:	103fef1e 	bne	r2,zero,8002234 <__alt_data_end+0xfc002234>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 8002278:	0001883a 	nop
 800227c:	e037883a 	mov	sp,fp
 8002280:	dfc00117 	ldw	ra,4(sp)
 8002284:	df000017 	ldw	fp,0(sp)
 8002288:	dec00204 	addi	sp,sp,8
 800228c:	f800283a 	ret

08002290 <_printf_r>:
 8002290:	defffd04 	addi	sp,sp,-12
 8002294:	2805883a 	mov	r2,r5
 8002298:	dfc00015 	stw	ra,0(sp)
 800229c:	d9800115 	stw	r6,4(sp)
 80022a0:	d9c00215 	stw	r7,8(sp)
 80022a4:	21400217 	ldw	r5,8(r4)
 80022a8:	d9c00104 	addi	r7,sp,4
 80022ac:	100d883a 	mov	r6,r2
 80022b0:	80024680 	call	8002468 <___vfprintf_internal_r>
 80022b4:	dfc00017 	ldw	ra,0(sp)
 80022b8:	dec00304 	addi	sp,sp,12
 80022bc:	f800283a 	ret

080022c0 <printf>:
 80022c0:	defffc04 	addi	sp,sp,-16
 80022c4:	dfc00015 	stw	ra,0(sp)
 80022c8:	d9400115 	stw	r5,4(sp)
 80022cc:	d9800215 	stw	r6,8(sp)
 80022d0:	d9c00315 	stw	r7,12(sp)
 80022d4:	00820074 	movhi	r2,2049
 80022d8:	108fc604 	addi	r2,r2,16152
 80022dc:	10800017 	ldw	r2,0(r2)
 80022e0:	200b883a 	mov	r5,r4
 80022e4:	d9800104 	addi	r6,sp,4
 80022e8:	11000217 	ldw	r4,8(r2)
 80022ec:	80047440 	call	8004744 <__vfprintf_internal>
 80022f0:	dfc00017 	ldw	ra,0(sp)
 80022f4:	dec00404 	addi	sp,sp,16
 80022f8:	f800283a 	ret

080022fc <_puts_r>:
 80022fc:	defff604 	addi	sp,sp,-40
 8002300:	dc000715 	stw	r16,28(sp)
 8002304:	2021883a 	mov	r16,r4
 8002308:	2809883a 	mov	r4,r5
 800230c:	dc400815 	stw	r17,32(sp)
 8002310:	dfc00915 	stw	ra,36(sp)
 8002314:	2823883a 	mov	r17,r5
 8002318:	80023d00 	call	80023d0 <strlen>
 800231c:	10c00044 	addi	r3,r2,1
 8002320:	d8800115 	stw	r2,4(sp)
 8002324:	00820074 	movhi	r2,2049
 8002328:	10885a04 	addi	r2,r2,8552
 800232c:	d8800215 	stw	r2,8(sp)
 8002330:	00800044 	movi	r2,1
 8002334:	d8800315 	stw	r2,12(sp)
 8002338:	00800084 	movi	r2,2
 800233c:	dc400015 	stw	r17,0(sp)
 8002340:	d8c00615 	stw	r3,24(sp)
 8002344:	dec00415 	stw	sp,16(sp)
 8002348:	d8800515 	stw	r2,20(sp)
 800234c:	80000226 	beq	r16,zero,8002358 <_puts_r+0x5c>
 8002350:	80800e17 	ldw	r2,56(r16)
 8002354:	10001426 	beq	r2,zero,80023a8 <_puts_r+0xac>
 8002358:	81400217 	ldw	r5,8(r16)
 800235c:	2880030b 	ldhu	r2,12(r5)
 8002360:	10c8000c 	andi	r3,r2,8192
 8002364:	1800061e 	bne	r3,zero,8002380 <_puts_r+0x84>
 8002368:	29001917 	ldw	r4,100(r5)
 800236c:	00f7ffc4 	movi	r3,-8193
 8002370:	10880014 	ori	r2,r2,8192
 8002374:	20c6703a 	and	r3,r4,r3
 8002378:	2880030d 	sth	r2,12(r5)
 800237c:	28c01915 	stw	r3,100(r5)
 8002380:	d9800404 	addi	r6,sp,16
 8002384:	8009883a 	mov	r4,r16
 8002388:	8006cac0 	call	8006cac <__sfvwrite_r>
 800238c:	1000091e 	bne	r2,zero,80023b4 <_puts_r+0xb8>
 8002390:	00800284 	movi	r2,10
 8002394:	dfc00917 	ldw	ra,36(sp)
 8002398:	dc400817 	ldw	r17,32(sp)
 800239c:	dc000717 	ldw	r16,28(sp)
 80023a0:	dec00a04 	addi	sp,sp,40
 80023a4:	f800283a 	ret
 80023a8:	8009883a 	mov	r4,r16
 80023ac:	80068280 	call	8006828 <__sinit>
 80023b0:	003fe906 	br	8002358 <__alt_data_end+0xfc002358>
 80023b4:	00bfffc4 	movi	r2,-1
 80023b8:	003ff606 	br	8002394 <__alt_data_end+0xfc002394>

080023bc <puts>:
 80023bc:	00820074 	movhi	r2,2049
 80023c0:	108fc604 	addi	r2,r2,16152
 80023c4:	200b883a 	mov	r5,r4
 80023c8:	11000017 	ldw	r4,0(r2)
 80023cc:	80022fc1 	jmpi	80022fc <_puts_r>

080023d0 <strlen>:
 80023d0:	208000cc 	andi	r2,r4,3
 80023d4:	10002026 	beq	r2,zero,8002458 <strlen+0x88>
 80023d8:	20800007 	ldb	r2,0(r4)
 80023dc:	10002026 	beq	r2,zero,8002460 <strlen+0x90>
 80023e0:	2005883a 	mov	r2,r4
 80023e4:	00000206 	br	80023f0 <strlen+0x20>
 80023e8:	10c00007 	ldb	r3,0(r2)
 80023ec:	18001826 	beq	r3,zero,8002450 <strlen+0x80>
 80023f0:	10800044 	addi	r2,r2,1
 80023f4:	10c000cc 	andi	r3,r2,3
 80023f8:	183ffb1e 	bne	r3,zero,80023e8 <__alt_data_end+0xfc0023e8>
 80023fc:	10c00017 	ldw	r3,0(r2)
 8002400:	01ffbff4 	movhi	r7,65279
 8002404:	39ffbfc4 	addi	r7,r7,-257
 8002408:	00ca303a 	nor	r5,zero,r3
 800240c:	01a02074 	movhi	r6,32897
 8002410:	19c7883a 	add	r3,r3,r7
 8002414:	31a02004 	addi	r6,r6,-32640
 8002418:	1946703a 	and	r3,r3,r5
 800241c:	1986703a 	and	r3,r3,r6
 8002420:	1800091e 	bne	r3,zero,8002448 <strlen+0x78>
 8002424:	10800104 	addi	r2,r2,4
 8002428:	10c00017 	ldw	r3,0(r2)
 800242c:	19cb883a 	add	r5,r3,r7
 8002430:	00c6303a 	nor	r3,zero,r3
 8002434:	28c6703a 	and	r3,r5,r3
 8002438:	1986703a 	and	r3,r3,r6
 800243c:	183ff926 	beq	r3,zero,8002424 <__alt_data_end+0xfc002424>
 8002440:	00000106 	br	8002448 <strlen+0x78>
 8002444:	10800044 	addi	r2,r2,1
 8002448:	10c00007 	ldb	r3,0(r2)
 800244c:	183ffd1e 	bne	r3,zero,8002444 <__alt_data_end+0xfc002444>
 8002450:	1105c83a 	sub	r2,r2,r4
 8002454:	f800283a 	ret
 8002458:	2005883a 	mov	r2,r4
 800245c:	003fe706 	br	80023fc <__alt_data_end+0xfc0023fc>
 8002460:	0005883a 	mov	r2,zero
 8002464:	f800283a 	ret

08002468 <___vfprintf_internal_r>:
 8002468:	deffb804 	addi	sp,sp,-288
 800246c:	dfc04715 	stw	ra,284(sp)
 8002470:	ddc04515 	stw	r23,276(sp)
 8002474:	dd404315 	stw	r21,268(sp)
 8002478:	d9002d15 	stw	r4,180(sp)
 800247c:	282f883a 	mov	r23,r5
 8002480:	302b883a 	mov	r21,r6
 8002484:	d9c02e15 	stw	r7,184(sp)
 8002488:	df004615 	stw	fp,280(sp)
 800248c:	dd804415 	stw	r22,272(sp)
 8002490:	dd004215 	stw	r20,264(sp)
 8002494:	dcc04115 	stw	r19,260(sp)
 8002498:	dc804015 	stw	r18,256(sp)
 800249c:	dc403f15 	stw	r17,252(sp)
 80024a0:	dc003e15 	stw	r16,248(sp)
 80024a4:	80073a80 	call	80073a8 <_localeconv_r>
 80024a8:	10800017 	ldw	r2,0(r2)
 80024ac:	1009883a 	mov	r4,r2
 80024b0:	d8803415 	stw	r2,208(sp)
 80024b4:	80023d00 	call	80023d0 <strlen>
 80024b8:	d8803715 	stw	r2,220(sp)
 80024bc:	d8802d17 	ldw	r2,180(sp)
 80024c0:	10000226 	beq	r2,zero,80024cc <___vfprintf_internal_r+0x64>
 80024c4:	10800e17 	ldw	r2,56(r2)
 80024c8:	1000fb26 	beq	r2,zero,80028b8 <___vfprintf_internal_r+0x450>
 80024cc:	b880030b 	ldhu	r2,12(r23)
 80024d0:	10c8000c 	andi	r3,r2,8192
 80024d4:	1800061e 	bne	r3,zero,80024f0 <___vfprintf_internal_r+0x88>
 80024d8:	b9001917 	ldw	r4,100(r23)
 80024dc:	00f7ffc4 	movi	r3,-8193
 80024e0:	10880014 	ori	r2,r2,8192
 80024e4:	20c6703a 	and	r3,r4,r3
 80024e8:	b880030d 	sth	r2,12(r23)
 80024ec:	b8c01915 	stw	r3,100(r23)
 80024f0:	10c0020c 	andi	r3,r2,8
 80024f4:	1800c326 	beq	r3,zero,8002804 <___vfprintf_internal_r+0x39c>
 80024f8:	b8c00417 	ldw	r3,16(r23)
 80024fc:	1800c126 	beq	r3,zero,8002804 <___vfprintf_internal_r+0x39c>
 8002500:	1080068c 	andi	r2,r2,26
 8002504:	00c00284 	movi	r3,10
 8002508:	10c0c626 	beq	r2,r3,8002824 <___vfprintf_internal_r+0x3bc>
 800250c:	d8c00404 	addi	r3,sp,16
 8002510:	05020074 	movhi	r20,2049
 8002514:	d9001e04 	addi	r4,sp,120
 8002518:	a5086b84 	addi	r20,r20,8622
 800251c:	d8c01e15 	stw	r3,120(sp)
 8002520:	d8002015 	stw	zero,128(sp)
 8002524:	d8001f15 	stw	zero,124(sp)
 8002528:	d8003315 	stw	zero,204(sp)
 800252c:	d8003615 	stw	zero,216(sp)
 8002530:	d8003815 	stw	zero,224(sp)
 8002534:	1811883a 	mov	r8,r3
 8002538:	d8003915 	stw	zero,228(sp)
 800253c:	d8003a15 	stw	zero,232(sp)
 8002540:	d8002f15 	stw	zero,188(sp)
 8002544:	d9002815 	stw	r4,160(sp)
 8002548:	a8800007 	ldb	r2,0(r21)
 800254c:	10028b26 	beq	r2,zero,8002f7c <___vfprintf_internal_r+0xb14>
 8002550:	00c00944 	movi	r3,37
 8002554:	a823883a 	mov	r17,r21
 8002558:	10c0021e 	bne	r2,r3,8002564 <___vfprintf_internal_r+0xfc>
 800255c:	00001406 	br	80025b0 <___vfprintf_internal_r+0x148>
 8002560:	10c00326 	beq	r2,r3,8002570 <___vfprintf_internal_r+0x108>
 8002564:	8c400044 	addi	r17,r17,1
 8002568:	88800007 	ldb	r2,0(r17)
 800256c:	103ffc1e 	bne	r2,zero,8002560 <__alt_data_end+0xfc002560>
 8002570:	8d61c83a 	sub	r16,r17,r21
 8002574:	80000e26 	beq	r16,zero,80025b0 <___vfprintf_internal_r+0x148>
 8002578:	d8c02017 	ldw	r3,128(sp)
 800257c:	d8801f17 	ldw	r2,124(sp)
 8002580:	45400015 	stw	r21,0(r8)
 8002584:	1c07883a 	add	r3,r3,r16
 8002588:	10800044 	addi	r2,r2,1
 800258c:	d8c02015 	stw	r3,128(sp)
 8002590:	44000115 	stw	r16,4(r8)
 8002594:	d8801f15 	stw	r2,124(sp)
 8002598:	00c001c4 	movi	r3,7
 800259c:	1880a916 	blt	r3,r2,8002844 <___vfprintf_internal_r+0x3dc>
 80025a0:	42000204 	addi	r8,r8,8
 80025a4:	d9402f17 	ldw	r5,188(sp)
 80025a8:	2c0b883a 	add	r5,r5,r16
 80025ac:	d9402f15 	stw	r5,188(sp)
 80025b0:	88800007 	ldb	r2,0(r17)
 80025b4:	1000aa26 	beq	r2,zero,8002860 <___vfprintf_internal_r+0x3f8>
 80025b8:	8d400044 	addi	r21,r17,1
 80025bc:	8c400047 	ldb	r17,1(r17)
 80025c0:	0021883a 	mov	r16,zero
 80025c4:	00bfffc4 	movi	r2,-1
 80025c8:	0025883a 	mov	r18,zero
 80025cc:	dc002905 	stb	r16,164(sp)
 80025d0:	d8002785 	stb	zero,158(sp)
 80025d4:	d8002b05 	stb	zero,172(sp)
 80025d8:	d8802a15 	stw	r2,168(sp)
 80025dc:	d8003115 	stw	zero,196(sp)
 80025e0:	04c01604 	movi	r19,88
 80025e4:	05800244 	movi	r22,9
 80025e8:	9021883a 	mov	r16,r18
 80025ec:	4039883a 	mov	fp,r8
 80025f0:	ad400044 	addi	r21,r21,1
 80025f4:	88bff804 	addi	r2,r17,-32
 80025f8:	98833236 	bltu	r19,r2,80032c4 <___vfprintf_internal_r+0xe5c>
 80025fc:	100490ba 	slli	r2,r2,2
 8002600:	00c20034 	movhi	r3,2048
 8002604:	18c98504 	addi	r3,r3,9748
 8002608:	10c5883a 	add	r2,r2,r3
 800260c:	10800017 	ldw	r2,0(r2)
 8002610:	1000683a 	jmp	r2
 8002614:	080031bc 	xorhi	zero,at,198
 8002618:	080032c4 	addi	zero,at,203
 800261c:	080032c4 	addi	zero,at,203
 8002620:	080031dc 	xori	zero,at,199
 8002624:	080032c4 	addi	zero,at,203
 8002628:	080032c4 	addi	zero,at,203
 800262c:	080032c4 	addi	zero,at,203
 8002630:	080032c4 	addi	zero,at,203
 8002634:	080032c4 	addi	zero,at,203
 8002638:	080032c4 	addi	zero,at,203
 800263c:	080028c4 	addi	zero,at,163
 8002640:	080030cc 	andi	zero,at,195
 8002644:	080032c4 	addi	zero,at,203
 8002648:	08002788 	cmpgei	zero,at,158
 800264c:	080028e8 	cmpgeui	zero,at,163
 8002650:	080032c4 	addi	zero,at,203
 8002654:	08002938 	rdprs	zero,at,164
 8002658:	08002944 	addi	zero,at,165
 800265c:	08002944 	addi	zero,at,165
 8002660:	08002944 	addi	zero,at,165
 8002664:	08002944 	addi	zero,at,165
 8002668:	08002944 	addi	zero,at,165
 800266c:	08002944 	addi	zero,at,165
 8002670:	08002944 	addi	zero,at,165
 8002674:	08002944 	addi	zero,at,165
 8002678:	08002944 	addi	zero,at,165
 800267c:	080032c4 	addi	zero,at,203
 8002680:	080032c4 	addi	zero,at,203
 8002684:	080032c4 	addi	zero,at,203
 8002688:	080032c4 	addi	zero,at,203
 800268c:	080032c4 	addi	zero,at,203
 8002690:	080032c4 	addi	zero,at,203
 8002694:	080032c4 	addi	zero,at,203
 8002698:	080032c4 	addi	zero,at,203
 800269c:	080032c4 	addi	zero,at,203
 80026a0:	080032c4 	addi	zero,at,203
 80026a4:	08002980 	call	800298 <__alt_mem_onchip_memory2_0+0x800298>
 80026a8:	08002a48 	cmpgei	zero,at,169
 80026ac:	080032c4 	addi	zero,at,203
 80026b0:	08002a48 	cmpgei	zero,at,169
 80026b4:	080032c4 	addi	zero,at,203
 80026b8:	080032c4 	addi	zero,at,203
 80026bc:	080032c4 	addi	zero,at,203
 80026c0:	080032c4 	addi	zero,at,203
 80026c4:	08002af4 	orhi	zero,at,171
 80026c8:	080032c4 	addi	zero,at,203
 80026cc:	080032c4 	addi	zero,at,203
 80026d0:	08002b00 	call	8002b0 <__alt_mem_onchip_memory2_0+0x8002b0>
 80026d4:	080032c4 	addi	zero,at,203
 80026d8:	080032c4 	addi	zero,at,203
 80026dc:	080032c4 	addi	zero,at,203
 80026e0:	080032c4 	addi	zero,at,203
 80026e4:	080032c4 	addi	zero,at,203
 80026e8:	08002f84 	addi	zero,at,190
 80026ec:	080032c4 	addi	zero,at,203
 80026f0:	080032c4 	addi	zero,at,203
 80026f4:	08002ff0 	cmpltui	zero,at,191
 80026f8:	080032c4 	addi	zero,at,203
 80026fc:	080032c4 	addi	zero,at,203
 8002700:	080032c4 	addi	zero,at,203
 8002704:	080032c4 	addi	zero,at,203
 8002708:	080032c4 	addi	zero,at,203
 800270c:	080032c4 	addi	zero,at,203
 8002710:	080032c4 	addi	zero,at,203
 8002714:	080032c4 	addi	zero,at,203
 8002718:	080032c4 	addi	zero,at,203
 800271c:	080032c4 	addi	zero,at,203
 8002720:	08003268 	cmpgeui	zero,at,201
 8002724:	080031e8 	cmpgeui	zero,at,199
 8002728:	08002a48 	cmpgei	zero,at,169
 800272c:	08002a48 	cmpgei	zero,at,169
 8002730:	08002a48 	cmpgei	zero,at,169
 8002734:	08003208 	cmpgei	zero,at,200
 8002738:	080031e8 	cmpgeui	zero,at,199
 800273c:	080032c4 	addi	zero,at,203
 8002740:	080032c4 	addi	zero,at,203
 8002744:	08003214 	ori	zero,at,200
 8002748:	080032c4 	addi	zero,at,203
 800274c:	08003228 	cmpgeui	zero,at,200
 8002750:	080030ac 	andhi	zero,at,194
 8002754:	08002794 	ori	zero,at,158
 8002758:	080030e4 	muli	zero,at,195
 800275c:	080032c4 	addi	zero,at,203
 8002760:	080030f0 	cmpltui	zero,at,195
 8002764:	080032c4 	addi	zero,at,203
 8002768:	08003154 	ori	zero,at,197
 800276c:	080032c4 	addi	zero,at,203
 8002770:	080032c4 	addi	zero,at,203
 8002774:	08003174 	orhi	zero,at,197
 8002778:	d8c03117 	ldw	r3,196(sp)
 800277c:	d8802e15 	stw	r2,184(sp)
 8002780:	00c7c83a 	sub	r3,zero,r3
 8002784:	d8c03115 	stw	r3,196(sp)
 8002788:	84000114 	ori	r16,r16,4
 800278c:	ac400007 	ldb	r17,0(r21)
 8002790:	003f9706 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8002794:	00800c04 	movi	r2,48
 8002798:	d8802705 	stb	r2,156(sp)
 800279c:	00801e04 	movi	r2,120
 80027a0:	d8802745 	stb	r2,157(sp)
 80027a4:	d9002a17 	ldw	r4,168(sp)
 80027a8:	d8802e17 	ldw	r2,184(sp)
 80027ac:	d8002785 	stb	zero,158(sp)
 80027b0:	e011883a 	mov	r8,fp
 80027b4:	10c00104 	addi	r3,r2,4
 80027b8:	14c00017 	ldw	r19,0(r2)
 80027bc:	002d883a 	mov	r22,zero
 80027c0:	80800094 	ori	r2,r16,2
 80027c4:	2002ca16 	blt	r4,zero,80032f0 <___vfprintf_internal_r+0xe88>
 80027c8:	00bfdfc4 	movi	r2,-129
 80027cc:	80a4703a 	and	r18,r16,r2
 80027d0:	d8c02e15 	stw	r3,184(sp)
 80027d4:	94800094 	ori	r18,r18,2
 80027d8:	9802b41e 	bne	r19,zero,80032ac <___vfprintf_internal_r+0xe44>
 80027dc:	01420074 	movhi	r5,2049
 80027e0:	29486404 	addi	r5,r5,8592
 80027e4:	d9403915 	stw	r5,228(sp)
 80027e8:	04401e04 	movi	r17,120
 80027ec:	d8802a17 	ldw	r2,168(sp)
 80027f0:	0039883a 	mov	fp,zero
 80027f4:	1001fa26 	beq	r2,zero,8002fe0 <___vfprintf_internal_r+0xb78>
 80027f8:	0027883a 	mov	r19,zero
 80027fc:	002d883a 	mov	r22,zero
 8002800:	00021906 	br	8003068 <___vfprintf_internal_r+0xc00>
 8002804:	d9002d17 	ldw	r4,180(sp)
 8002808:	b80b883a 	mov	r5,r23
 800280c:	800481c0 	call	800481c <__swsetup_r>
 8002810:	1005dc1e 	bne	r2,zero,8003f84 <___vfprintf_internal_r+0x1b1c>
 8002814:	b880030b 	ldhu	r2,12(r23)
 8002818:	00c00284 	movi	r3,10
 800281c:	1080068c 	andi	r2,r2,26
 8002820:	10ff3a1e 	bne	r2,r3,800250c <__alt_data_end+0xfc00250c>
 8002824:	b880038f 	ldh	r2,14(r23)
 8002828:	103f3816 	blt	r2,zero,800250c <__alt_data_end+0xfc00250c>
 800282c:	d9c02e17 	ldw	r7,184(sp)
 8002830:	d9002d17 	ldw	r4,180(sp)
 8002834:	a80d883a 	mov	r6,r21
 8002838:	b80b883a 	mov	r5,r23
 800283c:	80047600 	call	8004760 <__sbprintf>
 8002840:	00001106 	br	8002888 <___vfprintf_internal_r+0x420>
 8002844:	d9002d17 	ldw	r4,180(sp)
 8002848:	d9801e04 	addi	r6,sp,120
 800284c:	b80b883a 	mov	r5,r23
 8002850:	8009c480 	call	8009c48 <__sprint_r>
 8002854:	1000081e 	bne	r2,zero,8002878 <___vfprintf_internal_r+0x410>
 8002858:	da000404 	addi	r8,sp,16
 800285c:	003f5106 	br	80025a4 <__alt_data_end+0xfc0025a4>
 8002860:	d8802017 	ldw	r2,128(sp)
 8002864:	10000426 	beq	r2,zero,8002878 <___vfprintf_internal_r+0x410>
 8002868:	d9002d17 	ldw	r4,180(sp)
 800286c:	d9801e04 	addi	r6,sp,120
 8002870:	b80b883a 	mov	r5,r23
 8002874:	8009c480 	call	8009c48 <__sprint_r>
 8002878:	b880030b 	ldhu	r2,12(r23)
 800287c:	1080100c 	andi	r2,r2,64
 8002880:	1005c01e 	bne	r2,zero,8003f84 <___vfprintf_internal_r+0x1b1c>
 8002884:	d8802f17 	ldw	r2,188(sp)
 8002888:	dfc04717 	ldw	ra,284(sp)
 800288c:	df004617 	ldw	fp,280(sp)
 8002890:	ddc04517 	ldw	r23,276(sp)
 8002894:	dd804417 	ldw	r22,272(sp)
 8002898:	dd404317 	ldw	r21,268(sp)
 800289c:	dd004217 	ldw	r20,264(sp)
 80028a0:	dcc04117 	ldw	r19,260(sp)
 80028a4:	dc804017 	ldw	r18,256(sp)
 80028a8:	dc403f17 	ldw	r17,252(sp)
 80028ac:	dc003e17 	ldw	r16,248(sp)
 80028b0:	dec04804 	addi	sp,sp,288
 80028b4:	f800283a 	ret
 80028b8:	d9002d17 	ldw	r4,180(sp)
 80028bc:	80068280 	call	8006828 <__sinit>
 80028c0:	003f0206 	br	80024cc <__alt_data_end+0xfc0024cc>
 80028c4:	d9002e17 	ldw	r4,184(sp)
 80028c8:	d9402e17 	ldw	r5,184(sp)
 80028cc:	21000017 	ldw	r4,0(r4)
 80028d0:	28800104 	addi	r2,r5,4
 80028d4:	d9003115 	stw	r4,196(sp)
 80028d8:	203fa716 	blt	r4,zero,8002778 <__alt_data_end+0xfc002778>
 80028dc:	d8802e15 	stw	r2,184(sp)
 80028e0:	ac400007 	ldb	r17,0(r21)
 80028e4:	003f4206 	br	80025f0 <__alt_data_end+0xfc0025f0>
 80028e8:	ac400007 	ldb	r17,0(r21)
 80028ec:	01000a84 	movi	r4,42
 80028f0:	a8c00044 	addi	r3,r21,1
 80028f4:	89075826 	beq	r17,r4,8004658 <___vfprintf_internal_r+0x21f0>
 80028f8:	8cbff404 	addi	r18,r17,-48
 80028fc:	b486ae36 	bltu	r22,r18,80043b8 <___vfprintf_internal_r+0x1f50>
 8002900:	0009883a 	mov	r4,zero
 8002904:	1823883a 	mov	r17,r3
 8002908:	01400284 	movi	r5,10
 800290c:	800c9040 	call	800c904 <__mulsi3>
 8002910:	88c00007 	ldb	r3,0(r17)
 8002914:	1489883a 	add	r4,r2,r18
 8002918:	8d400044 	addi	r21,r17,1
 800291c:	1cbff404 	addi	r18,r3,-48
 8002920:	a823883a 	mov	r17,r21
 8002924:	b4bff82e 	bgeu	r22,r18,8002908 <__alt_data_end+0xfc002908>
 8002928:	1823883a 	mov	r17,r3
 800292c:	2005f616 	blt	r4,zero,8004108 <___vfprintf_internal_r+0x1ca0>
 8002930:	d9002a15 	stw	r4,168(sp)
 8002934:	003f2f06 	br	80025f4 <__alt_data_end+0xfc0025f4>
 8002938:	84002014 	ori	r16,r16,128
 800293c:	ac400007 	ldb	r17,0(r21)
 8002940:	003f2b06 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8002944:	8cbff404 	addi	r18,r17,-48
 8002948:	d8003115 	stw	zero,196(sp)
 800294c:	0009883a 	mov	r4,zero
 8002950:	a823883a 	mov	r17,r21
 8002954:	01400284 	movi	r5,10
 8002958:	800c9040 	call	800c904 <__mulsi3>
 800295c:	88c00007 	ldb	r3,0(r17)
 8002960:	9089883a 	add	r4,r18,r2
 8002964:	ad400044 	addi	r21,r21,1
 8002968:	1cbff404 	addi	r18,r3,-48
 800296c:	a823883a 	mov	r17,r21
 8002970:	b4bff82e 	bgeu	r22,r18,8002954 <__alt_data_end+0xfc002954>
 8002974:	1823883a 	mov	r17,r3
 8002978:	d9003115 	stw	r4,196(sp)
 800297c:	003f1d06 	br	80025f4 <__alt_data_end+0xfc0025f4>
 8002980:	8025883a 	mov	r18,r16
 8002984:	dc002903 	ldbu	r16,164(sp)
 8002988:	e011883a 	mov	r8,fp
 800298c:	84003fcc 	andi	r16,r16,255
 8002990:	8007531e 	bne	r16,zero,80046e0 <___vfprintf_internal_r+0x2278>
 8002994:	94800414 	ori	r18,r18,16
 8002998:	9080080c 	andi	r2,r18,32
 800299c:	1003a326 	beq	r2,zero,800382c <___vfprintf_internal_r+0x13c4>
 80029a0:	d9002e17 	ldw	r4,184(sp)
 80029a4:	20800117 	ldw	r2,4(r4)
 80029a8:	24c00017 	ldw	r19,0(r4)
 80029ac:	21000204 	addi	r4,r4,8
 80029b0:	d9002e15 	stw	r4,184(sp)
 80029b4:	102d883a 	mov	r22,r2
 80029b8:	10047316 	blt	r2,zero,8003b88 <___vfprintf_internal_r+0x1720>
 80029bc:	d9002a17 	ldw	r4,168(sp)
 80029c0:	df002783 	ldbu	fp,158(sp)
 80029c4:	2003e416 	blt	r4,zero,8003958 <___vfprintf_internal_r+0x14f0>
 80029c8:	00ffdfc4 	movi	r3,-129
 80029cc:	9d84b03a 	or	r2,r19,r22
 80029d0:	90e4703a 	and	r18,r18,r3
 80029d4:	10018026 	beq	r2,zero,8002fd8 <___vfprintf_internal_r+0xb70>
 80029d8:	b003ab26 	beq	r22,zero,8003888 <___vfprintf_internal_r+0x1420>
 80029dc:	dc402915 	stw	r17,164(sp)
 80029e0:	dc001e04 	addi	r16,sp,120
 80029e4:	b023883a 	mov	r17,r22
 80029e8:	402d883a 	mov	r22,r8
 80029ec:	9809883a 	mov	r4,r19
 80029f0:	880b883a 	mov	r5,r17
 80029f4:	01800284 	movi	r6,10
 80029f8:	000f883a 	mov	r7,zero
 80029fc:	800c18c0 	call	800c18c <__umoddi3>
 8002a00:	10800c04 	addi	r2,r2,48
 8002a04:	843fffc4 	addi	r16,r16,-1
 8002a08:	9809883a 	mov	r4,r19
 8002a0c:	880b883a 	mov	r5,r17
 8002a10:	80800005 	stb	r2,0(r16)
 8002a14:	01800284 	movi	r6,10
 8002a18:	000f883a 	mov	r7,zero
 8002a1c:	800bb900 	call	800bb90 <__udivdi3>
 8002a20:	1027883a 	mov	r19,r2
 8002a24:	10c4b03a 	or	r2,r2,r3
 8002a28:	1823883a 	mov	r17,r3
 8002a2c:	103fef1e 	bne	r2,zero,80029ec <__alt_data_end+0xfc0029ec>
 8002a30:	d8c02817 	ldw	r3,160(sp)
 8002a34:	dc402917 	ldw	r17,164(sp)
 8002a38:	b011883a 	mov	r8,r22
 8002a3c:	1c07c83a 	sub	r3,r3,r16
 8002a40:	d8c02b15 	stw	r3,172(sp)
 8002a44:	00005f06 	br	8002bc4 <___vfprintf_internal_r+0x75c>
 8002a48:	8025883a 	mov	r18,r16
 8002a4c:	dc002903 	ldbu	r16,164(sp)
 8002a50:	e011883a 	mov	r8,fp
 8002a54:	84003fcc 	andi	r16,r16,255
 8002a58:	80071e1e 	bne	r16,zero,80046d4 <___vfprintf_internal_r+0x226c>
 8002a5c:	9080020c 	andi	r2,r18,8
 8002a60:	1004af26 	beq	r2,zero,8003d20 <___vfprintf_internal_r+0x18b8>
 8002a64:	d9002e17 	ldw	r4,184(sp)
 8002a68:	d9402e17 	ldw	r5,184(sp)
 8002a6c:	d8802e17 	ldw	r2,184(sp)
 8002a70:	21000017 	ldw	r4,0(r4)
 8002a74:	29400117 	ldw	r5,4(r5)
 8002a78:	10800204 	addi	r2,r2,8
 8002a7c:	d9003615 	stw	r4,216(sp)
 8002a80:	d9403815 	stw	r5,224(sp)
 8002a84:	d8802e15 	stw	r2,184(sp)
 8002a88:	d9003617 	ldw	r4,216(sp)
 8002a8c:	d9403817 	ldw	r5,224(sp)
 8002a90:	da003d15 	stw	r8,244(sp)
 8002a94:	04000044 	movi	r16,1
 8002a98:	800986c0 	call	800986c <__fpclassifyd>
 8002a9c:	da003d17 	ldw	r8,244(sp)
 8002aa0:	1404441e 	bne	r2,r16,8003bb4 <___vfprintf_internal_r+0x174c>
 8002aa4:	d9003617 	ldw	r4,216(sp)
 8002aa8:	d9403817 	ldw	r5,224(sp)
 8002aac:	000d883a 	mov	r6,zero
 8002ab0:	000f883a 	mov	r7,zero
 8002ab4:	800dd0c0 	call	800dd0c <__ledf2>
 8002ab8:	da003d17 	ldw	r8,244(sp)
 8002abc:	1005e316 	blt	r2,zero,800424c <___vfprintf_internal_r+0x1de4>
 8002ac0:	df002783 	ldbu	fp,158(sp)
 8002ac4:	008011c4 	movi	r2,71
 8002ac8:	1445580e 	bge	r2,r17,800402c <___vfprintf_internal_r+0x1bc4>
 8002acc:	04020074 	movhi	r16,2049
 8002ad0:	84085c04 	addi	r16,r16,8560
 8002ad4:	00c000c4 	movi	r3,3
 8002ad8:	00bfdfc4 	movi	r2,-129
 8002adc:	d8c02915 	stw	r3,164(sp)
 8002ae0:	90a4703a 	and	r18,r18,r2
 8002ae4:	d8c02b15 	stw	r3,172(sp)
 8002ae8:	d8002a15 	stw	zero,168(sp)
 8002aec:	d8003215 	stw	zero,200(sp)
 8002af0:	00003a06 	br	8002bdc <___vfprintf_internal_r+0x774>
 8002af4:	84000214 	ori	r16,r16,8
 8002af8:	ac400007 	ldb	r17,0(r21)
 8002afc:	003ebc06 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8002b00:	8025883a 	mov	r18,r16
 8002b04:	dc002903 	ldbu	r16,164(sp)
 8002b08:	e011883a 	mov	r8,fp
 8002b0c:	84003fcc 	andi	r16,r16,255
 8002b10:	8007001e 	bne	r16,zero,8004714 <___vfprintf_internal_r+0x22ac>
 8002b14:	94800414 	ori	r18,r18,16
 8002b18:	9080080c 	andi	r2,r18,32
 8002b1c:	1002fa26 	beq	r2,zero,8003708 <___vfprintf_internal_r+0x12a0>
 8002b20:	d9002e17 	ldw	r4,184(sp)
 8002b24:	d9402a17 	ldw	r5,168(sp)
 8002b28:	d8002785 	stb	zero,158(sp)
 8002b2c:	20800204 	addi	r2,r4,8
 8002b30:	24c00017 	ldw	r19,0(r4)
 8002b34:	25800117 	ldw	r22,4(r4)
 8002b38:	2804b116 	blt	r5,zero,8003e00 <___vfprintf_internal_r+0x1998>
 8002b3c:	013fdfc4 	movi	r4,-129
 8002b40:	9d86b03a 	or	r3,r19,r22
 8002b44:	d8802e15 	stw	r2,184(sp)
 8002b48:	9124703a 	and	r18,r18,r4
 8002b4c:	1802fb1e 	bne	r3,zero,800373c <___vfprintf_internal_r+0x12d4>
 8002b50:	d8c02a17 	ldw	r3,168(sp)
 8002b54:	0039883a 	mov	fp,zero
 8002b58:	1805e526 	beq	r3,zero,80042f0 <___vfprintf_internal_r+0x1e88>
 8002b5c:	0027883a 	mov	r19,zero
 8002b60:	002d883a 	mov	r22,zero
 8002b64:	dc001e04 	addi	r16,sp,120
 8002b68:	9806d0fa 	srli	r3,r19,3
 8002b6c:	b008977a 	slli	r4,r22,29
 8002b70:	b02cd0fa 	srli	r22,r22,3
 8002b74:	9cc001cc 	andi	r19,r19,7
 8002b78:	98800c04 	addi	r2,r19,48
 8002b7c:	843fffc4 	addi	r16,r16,-1
 8002b80:	20e6b03a 	or	r19,r4,r3
 8002b84:	80800005 	stb	r2,0(r16)
 8002b88:	9d86b03a 	or	r3,r19,r22
 8002b8c:	183ff61e 	bne	r3,zero,8002b68 <__alt_data_end+0xfc002b68>
 8002b90:	90c0004c 	andi	r3,r18,1
 8002b94:	18014126 	beq	r3,zero,800309c <___vfprintf_internal_r+0xc34>
 8002b98:	10803fcc 	andi	r2,r2,255
 8002b9c:	1080201c 	xori	r2,r2,128
 8002ba0:	10bfe004 	addi	r2,r2,-128
 8002ba4:	00c00c04 	movi	r3,48
 8002ba8:	10c13c26 	beq	r2,r3,800309c <___vfprintf_internal_r+0xc34>
 8002bac:	80ffffc5 	stb	r3,-1(r16)
 8002bb0:	d8c02817 	ldw	r3,160(sp)
 8002bb4:	80bfffc4 	addi	r2,r16,-1
 8002bb8:	1021883a 	mov	r16,r2
 8002bbc:	1887c83a 	sub	r3,r3,r2
 8002bc0:	d8c02b15 	stw	r3,172(sp)
 8002bc4:	d8802b17 	ldw	r2,172(sp)
 8002bc8:	d9002a17 	ldw	r4,168(sp)
 8002bcc:	1100010e 	bge	r2,r4,8002bd4 <___vfprintf_internal_r+0x76c>
 8002bd0:	2005883a 	mov	r2,r4
 8002bd4:	d8802915 	stw	r2,164(sp)
 8002bd8:	d8003215 	stw	zero,200(sp)
 8002bdc:	e7003fcc 	andi	fp,fp,255
 8002be0:	e700201c 	xori	fp,fp,128
 8002be4:	e73fe004 	addi	fp,fp,-128
 8002be8:	e0000326 	beq	fp,zero,8002bf8 <___vfprintf_internal_r+0x790>
 8002bec:	d8c02917 	ldw	r3,164(sp)
 8002bf0:	18c00044 	addi	r3,r3,1
 8002bf4:	d8c02915 	stw	r3,164(sp)
 8002bf8:	90c0008c 	andi	r3,r18,2
 8002bfc:	d8c02c15 	stw	r3,176(sp)
 8002c00:	18000326 	beq	r3,zero,8002c10 <___vfprintf_internal_r+0x7a8>
 8002c04:	d8c02917 	ldw	r3,164(sp)
 8002c08:	18c00084 	addi	r3,r3,2
 8002c0c:	d8c02915 	stw	r3,164(sp)
 8002c10:	90c0210c 	andi	r3,r18,132
 8002c14:	d8c03015 	stw	r3,192(sp)
 8002c18:	1801c51e 	bne	r3,zero,8003330 <___vfprintf_internal_r+0xec8>
 8002c1c:	d9003117 	ldw	r4,196(sp)
 8002c20:	d8c02917 	ldw	r3,164(sp)
 8002c24:	20e7c83a 	sub	r19,r4,r3
 8002c28:	04c1c10e 	bge	zero,r19,8003330 <___vfprintf_internal_r+0xec8>
 8002c2c:	02400404 	movi	r9,16
 8002c30:	d8c02017 	ldw	r3,128(sp)
 8002c34:	d8801f17 	ldw	r2,124(sp)
 8002c38:	4cc52f0e 	bge	r9,r19,80040f8 <___vfprintf_internal_r+0x1c90>
 8002c3c:	01420074 	movhi	r5,2049
 8002c40:	29486f84 	addi	r5,r5,8638
 8002c44:	dc403b15 	stw	r17,236(sp)
 8002c48:	d9403515 	stw	r5,212(sp)
 8002c4c:	9823883a 	mov	r17,r19
 8002c50:	482d883a 	mov	r22,r9
 8002c54:	9027883a 	mov	r19,r18
 8002c58:	070001c4 	movi	fp,7
 8002c5c:	8025883a 	mov	r18,r16
 8002c60:	dc002d17 	ldw	r16,180(sp)
 8002c64:	00000306 	br	8002c74 <___vfprintf_internal_r+0x80c>
 8002c68:	8c7ffc04 	addi	r17,r17,-16
 8002c6c:	42000204 	addi	r8,r8,8
 8002c70:	b440130e 	bge	r22,r17,8002cc0 <___vfprintf_internal_r+0x858>
 8002c74:	01020074 	movhi	r4,2049
 8002c78:	18c00404 	addi	r3,r3,16
 8002c7c:	10800044 	addi	r2,r2,1
 8002c80:	21086f84 	addi	r4,r4,8638
 8002c84:	41000015 	stw	r4,0(r8)
 8002c88:	45800115 	stw	r22,4(r8)
 8002c8c:	d8c02015 	stw	r3,128(sp)
 8002c90:	d8801f15 	stw	r2,124(sp)
 8002c94:	e0bff40e 	bge	fp,r2,8002c68 <__alt_data_end+0xfc002c68>
 8002c98:	d9801e04 	addi	r6,sp,120
 8002c9c:	b80b883a 	mov	r5,r23
 8002ca0:	8009883a 	mov	r4,r16
 8002ca4:	8009c480 	call	8009c48 <__sprint_r>
 8002ca8:	103ef31e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8002cac:	8c7ffc04 	addi	r17,r17,-16
 8002cb0:	d8c02017 	ldw	r3,128(sp)
 8002cb4:	d8801f17 	ldw	r2,124(sp)
 8002cb8:	da000404 	addi	r8,sp,16
 8002cbc:	b47fed16 	blt	r22,r17,8002c74 <__alt_data_end+0xfc002c74>
 8002cc0:	9021883a 	mov	r16,r18
 8002cc4:	9825883a 	mov	r18,r19
 8002cc8:	8827883a 	mov	r19,r17
 8002ccc:	dc403b17 	ldw	r17,236(sp)
 8002cd0:	d9403517 	ldw	r5,212(sp)
 8002cd4:	98c7883a 	add	r3,r19,r3
 8002cd8:	10800044 	addi	r2,r2,1
 8002cdc:	41400015 	stw	r5,0(r8)
 8002ce0:	44c00115 	stw	r19,4(r8)
 8002ce4:	d8c02015 	stw	r3,128(sp)
 8002ce8:	d8801f15 	stw	r2,124(sp)
 8002cec:	010001c4 	movi	r4,7
 8002cf0:	2082c516 	blt	r4,r2,8003808 <___vfprintf_internal_r+0x13a0>
 8002cf4:	df002787 	ldb	fp,158(sp)
 8002cf8:	42000204 	addi	r8,r8,8
 8002cfc:	e0000c26 	beq	fp,zero,8002d30 <___vfprintf_internal_r+0x8c8>
 8002d00:	d8801f17 	ldw	r2,124(sp)
 8002d04:	d9002784 	addi	r4,sp,158
 8002d08:	18c00044 	addi	r3,r3,1
 8002d0c:	10800044 	addi	r2,r2,1
 8002d10:	41000015 	stw	r4,0(r8)
 8002d14:	01000044 	movi	r4,1
 8002d18:	41000115 	stw	r4,4(r8)
 8002d1c:	d8c02015 	stw	r3,128(sp)
 8002d20:	d8801f15 	stw	r2,124(sp)
 8002d24:	010001c4 	movi	r4,7
 8002d28:	20825e16 	blt	r4,r2,80036a4 <___vfprintf_internal_r+0x123c>
 8002d2c:	42000204 	addi	r8,r8,8
 8002d30:	d8802c17 	ldw	r2,176(sp)
 8002d34:	10000c26 	beq	r2,zero,8002d68 <___vfprintf_internal_r+0x900>
 8002d38:	d8801f17 	ldw	r2,124(sp)
 8002d3c:	d9002704 	addi	r4,sp,156
 8002d40:	18c00084 	addi	r3,r3,2
 8002d44:	10800044 	addi	r2,r2,1
 8002d48:	41000015 	stw	r4,0(r8)
 8002d4c:	01000084 	movi	r4,2
 8002d50:	41000115 	stw	r4,4(r8)
 8002d54:	d8c02015 	stw	r3,128(sp)
 8002d58:	d8801f15 	stw	r2,124(sp)
 8002d5c:	010001c4 	movi	r4,7
 8002d60:	20825816 	blt	r4,r2,80036c4 <___vfprintf_internal_r+0x125c>
 8002d64:	42000204 	addi	r8,r8,8
 8002d68:	d9003017 	ldw	r4,192(sp)
 8002d6c:	00802004 	movi	r2,128
 8002d70:	2081bb26 	beq	r4,r2,8003460 <___vfprintf_internal_r+0xff8>
 8002d74:	d9402a17 	ldw	r5,168(sp)
 8002d78:	d8802b17 	ldw	r2,172(sp)
 8002d7c:	28adc83a 	sub	r22,r5,r2
 8002d80:	0580310e 	bge	zero,r22,8002e48 <___vfprintf_internal_r+0x9e0>
 8002d84:	07000404 	movi	fp,16
 8002d88:	d8801f17 	ldw	r2,124(sp)
 8002d8c:	e584360e 	bge	fp,r22,8003e68 <___vfprintf_internal_r+0x1a00>
 8002d90:	01420074 	movhi	r5,2049
 8002d94:	29486b84 	addi	r5,r5,8622
 8002d98:	dc402a15 	stw	r17,168(sp)
 8002d9c:	d9402c15 	stw	r5,176(sp)
 8002da0:	b023883a 	mov	r17,r22
 8002da4:	04c001c4 	movi	r19,7
 8002da8:	a82d883a 	mov	r22,r21
 8002dac:	902b883a 	mov	r21,r18
 8002db0:	8025883a 	mov	r18,r16
 8002db4:	dc002d17 	ldw	r16,180(sp)
 8002db8:	00000306 	br	8002dc8 <___vfprintf_internal_r+0x960>
 8002dbc:	8c7ffc04 	addi	r17,r17,-16
 8002dc0:	42000204 	addi	r8,r8,8
 8002dc4:	e440110e 	bge	fp,r17,8002e0c <___vfprintf_internal_r+0x9a4>
 8002dc8:	18c00404 	addi	r3,r3,16
 8002dcc:	10800044 	addi	r2,r2,1
 8002dd0:	45000015 	stw	r20,0(r8)
 8002dd4:	47000115 	stw	fp,4(r8)
 8002dd8:	d8c02015 	stw	r3,128(sp)
 8002ddc:	d8801f15 	stw	r2,124(sp)
 8002de0:	98bff60e 	bge	r19,r2,8002dbc <__alt_data_end+0xfc002dbc>
 8002de4:	d9801e04 	addi	r6,sp,120
 8002de8:	b80b883a 	mov	r5,r23
 8002dec:	8009883a 	mov	r4,r16
 8002df0:	8009c480 	call	8009c48 <__sprint_r>
 8002df4:	103ea01e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8002df8:	8c7ffc04 	addi	r17,r17,-16
 8002dfc:	d8c02017 	ldw	r3,128(sp)
 8002e00:	d8801f17 	ldw	r2,124(sp)
 8002e04:	da000404 	addi	r8,sp,16
 8002e08:	e47fef16 	blt	fp,r17,8002dc8 <__alt_data_end+0xfc002dc8>
 8002e0c:	9021883a 	mov	r16,r18
 8002e10:	a825883a 	mov	r18,r21
 8002e14:	b02b883a 	mov	r21,r22
 8002e18:	882d883a 	mov	r22,r17
 8002e1c:	dc402a17 	ldw	r17,168(sp)
 8002e20:	d9002c17 	ldw	r4,176(sp)
 8002e24:	1d87883a 	add	r3,r3,r22
 8002e28:	10800044 	addi	r2,r2,1
 8002e2c:	41000015 	stw	r4,0(r8)
 8002e30:	45800115 	stw	r22,4(r8)
 8002e34:	d8c02015 	stw	r3,128(sp)
 8002e38:	d8801f15 	stw	r2,124(sp)
 8002e3c:	010001c4 	movi	r4,7
 8002e40:	20821016 	blt	r4,r2,8003684 <___vfprintf_internal_r+0x121c>
 8002e44:	42000204 	addi	r8,r8,8
 8002e48:	9080400c 	andi	r2,r18,256
 8002e4c:	10013a1e 	bne	r2,zero,8003338 <___vfprintf_internal_r+0xed0>
 8002e50:	d9402b17 	ldw	r5,172(sp)
 8002e54:	d8801f17 	ldw	r2,124(sp)
 8002e58:	44000015 	stw	r16,0(r8)
 8002e5c:	1947883a 	add	r3,r3,r5
 8002e60:	10800044 	addi	r2,r2,1
 8002e64:	41400115 	stw	r5,4(r8)
 8002e68:	d8c02015 	stw	r3,128(sp)
 8002e6c:	d8801f15 	stw	r2,124(sp)
 8002e70:	010001c4 	movi	r4,7
 8002e74:	2081f516 	blt	r4,r2,800364c <___vfprintf_internal_r+0x11e4>
 8002e78:	42000204 	addi	r8,r8,8
 8002e7c:	9480010c 	andi	r18,r18,4
 8002e80:	90003226 	beq	r18,zero,8002f4c <___vfprintf_internal_r+0xae4>
 8002e84:	d9403117 	ldw	r5,196(sp)
 8002e88:	d8802917 	ldw	r2,164(sp)
 8002e8c:	28a1c83a 	sub	r16,r5,r2
 8002e90:	04002e0e 	bge	zero,r16,8002f4c <___vfprintf_internal_r+0xae4>
 8002e94:	04400404 	movi	r17,16
 8002e98:	d8801f17 	ldw	r2,124(sp)
 8002e9c:	8c04c40e 	bge	r17,r16,80041b0 <___vfprintf_internal_r+0x1d48>
 8002ea0:	01420074 	movhi	r5,2049
 8002ea4:	29486f84 	addi	r5,r5,8638
 8002ea8:	d9403515 	stw	r5,212(sp)
 8002eac:	048001c4 	movi	r18,7
 8002eb0:	dcc02d17 	ldw	r19,180(sp)
 8002eb4:	00000306 	br	8002ec4 <___vfprintf_internal_r+0xa5c>
 8002eb8:	843ffc04 	addi	r16,r16,-16
 8002ebc:	42000204 	addi	r8,r8,8
 8002ec0:	8c00130e 	bge	r17,r16,8002f10 <___vfprintf_internal_r+0xaa8>
 8002ec4:	01020074 	movhi	r4,2049
 8002ec8:	18c00404 	addi	r3,r3,16
 8002ecc:	10800044 	addi	r2,r2,1
 8002ed0:	21086f84 	addi	r4,r4,8638
 8002ed4:	41000015 	stw	r4,0(r8)
 8002ed8:	44400115 	stw	r17,4(r8)
 8002edc:	d8c02015 	stw	r3,128(sp)
 8002ee0:	d8801f15 	stw	r2,124(sp)
 8002ee4:	90bff40e 	bge	r18,r2,8002eb8 <__alt_data_end+0xfc002eb8>
 8002ee8:	d9801e04 	addi	r6,sp,120
 8002eec:	b80b883a 	mov	r5,r23
 8002ef0:	9809883a 	mov	r4,r19
 8002ef4:	8009c480 	call	8009c48 <__sprint_r>
 8002ef8:	103e5f1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8002efc:	843ffc04 	addi	r16,r16,-16
 8002f00:	d8c02017 	ldw	r3,128(sp)
 8002f04:	d8801f17 	ldw	r2,124(sp)
 8002f08:	da000404 	addi	r8,sp,16
 8002f0c:	8c3fed16 	blt	r17,r16,8002ec4 <__alt_data_end+0xfc002ec4>
 8002f10:	d9403517 	ldw	r5,212(sp)
 8002f14:	1c07883a 	add	r3,r3,r16
 8002f18:	10800044 	addi	r2,r2,1
 8002f1c:	41400015 	stw	r5,0(r8)
 8002f20:	44000115 	stw	r16,4(r8)
 8002f24:	d8c02015 	stw	r3,128(sp)
 8002f28:	d8801f15 	stw	r2,124(sp)
 8002f2c:	010001c4 	movi	r4,7
 8002f30:	2080060e 	bge	r4,r2,8002f4c <___vfprintf_internal_r+0xae4>
 8002f34:	d9002d17 	ldw	r4,180(sp)
 8002f38:	d9801e04 	addi	r6,sp,120
 8002f3c:	b80b883a 	mov	r5,r23
 8002f40:	8009c480 	call	8009c48 <__sprint_r>
 8002f44:	103e4c1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8002f48:	d8c02017 	ldw	r3,128(sp)
 8002f4c:	d8803117 	ldw	r2,196(sp)
 8002f50:	d9002917 	ldw	r4,164(sp)
 8002f54:	1100010e 	bge	r2,r4,8002f5c <___vfprintf_internal_r+0xaf4>
 8002f58:	2005883a 	mov	r2,r4
 8002f5c:	d9402f17 	ldw	r5,188(sp)
 8002f60:	288b883a 	add	r5,r5,r2
 8002f64:	d9402f15 	stw	r5,188(sp)
 8002f68:	1801c01e 	bne	r3,zero,800366c <___vfprintf_internal_r+0x1204>
 8002f6c:	a8800007 	ldb	r2,0(r21)
 8002f70:	d8001f15 	stw	zero,124(sp)
 8002f74:	da000404 	addi	r8,sp,16
 8002f78:	103d751e 	bne	r2,zero,8002550 <__alt_data_end+0xfc002550>
 8002f7c:	a823883a 	mov	r17,r21
 8002f80:	003d8b06 	br	80025b0 <__alt_data_end+0xfc0025b0>
 8002f84:	8025883a 	mov	r18,r16
 8002f88:	dc002903 	ldbu	r16,164(sp)
 8002f8c:	e011883a 	mov	r8,fp
 8002f90:	84003fcc 	andi	r16,r16,255
 8002f94:	8005e51e 	bne	r16,zero,800472c <___vfprintf_internal_r+0x22c4>
 8002f98:	94800414 	ori	r18,r18,16
 8002f9c:	9080080c 	andi	r2,r18,32
 8002fa0:	10022b26 	beq	r2,zero,8003850 <___vfprintf_internal_r+0x13e8>
 8002fa4:	d9002e17 	ldw	r4,184(sp)
 8002fa8:	d9402a17 	ldw	r5,168(sp)
 8002fac:	d8002785 	stb	zero,158(sp)
 8002fb0:	20c00204 	addi	r3,r4,8
 8002fb4:	24c00017 	ldw	r19,0(r4)
 8002fb8:	25800117 	ldw	r22,4(r4)
 8002fbc:	28042e16 	blt	r5,zero,8004078 <___vfprintf_internal_r+0x1c10>
 8002fc0:	013fdfc4 	movi	r4,-129
 8002fc4:	9d84b03a 	or	r2,r19,r22
 8002fc8:	d8c02e15 	stw	r3,184(sp)
 8002fcc:	9124703a 	and	r18,r18,r4
 8002fd0:	0039883a 	mov	fp,zero
 8002fd4:	103e801e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8002fd8:	d9002a17 	ldw	r4,168(sp)
 8002fdc:	2002e01e 	bne	r4,zero,8003b60 <___vfprintf_internal_r+0x16f8>
 8002fe0:	d8002a15 	stw	zero,168(sp)
 8002fe4:	d8002b15 	stw	zero,172(sp)
 8002fe8:	dc001e04 	addi	r16,sp,120
 8002fec:	003ef506 	br	8002bc4 <__alt_data_end+0xfc002bc4>
 8002ff0:	8025883a 	mov	r18,r16
 8002ff4:	dc002903 	ldbu	r16,164(sp)
 8002ff8:	e011883a 	mov	r8,fp
 8002ffc:	84003fcc 	andi	r16,r16,255
 8003000:	8005ba1e 	bne	r16,zero,80046ec <___vfprintf_internal_r+0x2284>
 8003004:	01020074 	movhi	r4,2049
 8003008:	21085f04 	addi	r4,r4,8572
 800300c:	d9003915 	stw	r4,228(sp)
 8003010:	9080080c 	andi	r2,r18,32
 8003014:	10006126 	beq	r2,zero,800319c <___vfprintf_internal_r+0xd34>
 8003018:	d9402e17 	ldw	r5,184(sp)
 800301c:	2cc00017 	ldw	r19,0(r5)
 8003020:	2d800117 	ldw	r22,4(r5)
 8003024:	29400204 	addi	r5,r5,8
 8003028:	d9402e15 	stw	r5,184(sp)
 800302c:	9080004c 	andi	r2,r18,1
 8003030:	1001ac26 	beq	r2,zero,80036e4 <___vfprintf_internal_r+0x127c>
 8003034:	9d84b03a 	or	r2,r19,r22
 8003038:	10038526 	beq	r2,zero,8003e50 <___vfprintf_internal_r+0x19e8>
 800303c:	d8c02a17 	ldw	r3,168(sp)
 8003040:	00800c04 	movi	r2,48
 8003044:	d8802705 	stb	r2,156(sp)
 8003048:	dc402745 	stb	r17,157(sp)
 800304c:	d8002785 	stb	zero,158(sp)
 8003050:	90800094 	ori	r2,r18,2
 8003054:	18047916 	blt	r3,zero,800423c <___vfprintf_internal_r+0x1dd4>
 8003058:	00bfdfc4 	movi	r2,-129
 800305c:	90a4703a 	and	r18,r18,r2
 8003060:	94800094 	ori	r18,r18,2
 8003064:	0039883a 	mov	fp,zero
 8003068:	d9003917 	ldw	r4,228(sp)
 800306c:	dc001e04 	addi	r16,sp,120
 8003070:	988003cc 	andi	r2,r19,15
 8003074:	b006973a 	slli	r3,r22,28
 8003078:	2085883a 	add	r2,r4,r2
 800307c:	9826d13a 	srli	r19,r19,4
 8003080:	10800003 	ldbu	r2,0(r2)
 8003084:	b02cd13a 	srli	r22,r22,4
 8003088:	843fffc4 	addi	r16,r16,-1
 800308c:	1ce6b03a 	or	r19,r3,r19
 8003090:	80800005 	stb	r2,0(r16)
 8003094:	9d84b03a 	or	r2,r19,r22
 8003098:	103ff51e 	bne	r2,zero,8003070 <__alt_data_end+0xfc003070>
 800309c:	d8c02817 	ldw	r3,160(sp)
 80030a0:	1c07c83a 	sub	r3,r3,r16
 80030a4:	d8c02b15 	stw	r3,172(sp)
 80030a8:	003ec606 	br	8002bc4 <__alt_data_end+0xfc002bc4>
 80030ac:	8025883a 	mov	r18,r16
 80030b0:	dc002903 	ldbu	r16,164(sp)
 80030b4:	e011883a 	mov	r8,fp
 80030b8:	84003fcc 	andi	r16,r16,255
 80030bc:	803e9626 	beq	r16,zero,8002b18 <__alt_data_end+0xfc002b18>
 80030c0:	d8c02b03 	ldbu	r3,172(sp)
 80030c4:	d8c02785 	stb	r3,158(sp)
 80030c8:	003e9306 	br	8002b18 <__alt_data_end+0xfc002b18>
 80030cc:	00c00044 	movi	r3,1
 80030d0:	d8c02905 	stb	r3,164(sp)
 80030d4:	00c00ac4 	movi	r3,43
 80030d8:	d8c02b05 	stb	r3,172(sp)
 80030dc:	ac400007 	ldb	r17,0(r21)
 80030e0:	003d4306 	br	80025f0 <__alt_data_end+0xfc0025f0>
 80030e4:	84000814 	ori	r16,r16,32
 80030e8:	ac400007 	ldb	r17,0(r21)
 80030ec:	003d4006 	br	80025f0 <__alt_data_end+0xfc0025f0>
 80030f0:	d8802e17 	ldw	r2,184(sp)
 80030f4:	8025883a 	mov	r18,r16
 80030f8:	d8002785 	stb	zero,158(sp)
 80030fc:	14000017 	ldw	r16,0(r2)
 8003100:	e011883a 	mov	r8,fp
 8003104:	14c00104 	addi	r19,r2,4
 8003108:	80042d26 	beq	r16,zero,80041c0 <___vfprintf_internal_r+0x1d58>
 800310c:	d8c02a17 	ldw	r3,168(sp)
 8003110:	1803e416 	blt	r3,zero,80040a4 <___vfprintf_internal_r+0x1c3c>
 8003114:	180d883a 	mov	r6,r3
 8003118:	000b883a 	mov	r5,zero
 800311c:	8009883a 	mov	r4,r16
 8003120:	df003d15 	stw	fp,244(sp)
 8003124:	8007da00 	call	8007da0 <memchr>
 8003128:	da003d17 	ldw	r8,244(sp)
 800312c:	10046826 	beq	r2,zero,80042d0 <___vfprintf_internal_r+0x1e68>
 8003130:	1405c83a 	sub	r2,r2,r16
 8003134:	d8802b15 	stw	r2,172(sp)
 8003138:	1003e016 	blt	r2,zero,80040bc <___vfprintf_internal_r+0x1c54>
 800313c:	df002783 	ldbu	fp,158(sp)
 8003140:	d8802915 	stw	r2,164(sp)
 8003144:	dcc02e15 	stw	r19,184(sp)
 8003148:	d8002a15 	stw	zero,168(sp)
 800314c:	d8003215 	stw	zero,200(sp)
 8003150:	003ea206 	br	8002bdc <__alt_data_end+0xfc002bdc>
 8003154:	8025883a 	mov	r18,r16
 8003158:	dc002903 	ldbu	r16,164(sp)
 800315c:	e011883a 	mov	r8,fp
 8003160:	84003fcc 	andi	r16,r16,255
 8003164:	803f8d26 	beq	r16,zero,8002f9c <__alt_data_end+0xfc002f9c>
 8003168:	d8c02b03 	ldbu	r3,172(sp)
 800316c:	d8c02785 	stb	r3,158(sp)
 8003170:	003f8a06 	br	8002f9c <__alt_data_end+0xfc002f9c>
 8003174:	8025883a 	mov	r18,r16
 8003178:	dc002903 	ldbu	r16,164(sp)
 800317c:	e011883a 	mov	r8,fp
 8003180:	84003fcc 	andi	r16,r16,255
 8003184:	8005661e 	bne	r16,zero,8004720 <___vfprintf_internal_r+0x22b8>
 8003188:	01020074 	movhi	r4,2049
 800318c:	21086404 	addi	r4,r4,8592
 8003190:	d9003915 	stw	r4,228(sp)
 8003194:	9080080c 	andi	r2,r18,32
 8003198:	103f9f1e 	bne	r2,zero,8003018 <__alt_data_end+0xfc003018>
 800319c:	9080040c 	andi	r2,r18,16
 80031a0:	1002eb26 	beq	r2,zero,8003d50 <___vfprintf_internal_r+0x18e8>
 80031a4:	d8802e17 	ldw	r2,184(sp)
 80031a8:	002d883a 	mov	r22,zero
 80031ac:	14c00017 	ldw	r19,0(r2)
 80031b0:	10800104 	addi	r2,r2,4
 80031b4:	d8802e15 	stw	r2,184(sp)
 80031b8:	003f9c06 	br	800302c <__alt_data_end+0xfc00302c>
 80031bc:	d8802b07 	ldb	r2,172(sp)
 80031c0:	1002e11e 	bne	r2,zero,8003d48 <___vfprintf_internal_r+0x18e0>
 80031c4:	00c00044 	movi	r3,1
 80031c8:	d8c02905 	stb	r3,164(sp)
 80031cc:	00c00804 	movi	r3,32
 80031d0:	d8c02b05 	stb	r3,172(sp)
 80031d4:	ac400007 	ldb	r17,0(r21)
 80031d8:	003d0506 	br	80025f0 <__alt_data_end+0xfc0025f0>
 80031dc:	84000054 	ori	r16,r16,1
 80031e0:	ac400007 	ldb	r17,0(r21)
 80031e4:	003d0206 	br	80025f0 <__alt_data_end+0xfc0025f0>
 80031e8:	8025883a 	mov	r18,r16
 80031ec:	dc002903 	ldbu	r16,164(sp)
 80031f0:	e011883a 	mov	r8,fp
 80031f4:	84003fcc 	andi	r16,r16,255
 80031f8:	803de726 	beq	r16,zero,8002998 <__alt_data_end+0xfc002998>
 80031fc:	d8c02b03 	ldbu	r3,172(sp)
 8003200:	d8c02785 	stb	r3,158(sp)
 8003204:	003de406 	br	8002998 <__alt_data_end+0xfc002998>
 8003208:	84001014 	ori	r16,r16,64
 800320c:	ac400007 	ldb	r17,0(r21)
 8003210:	003cf706 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8003214:	ac400007 	ldb	r17,0(r21)
 8003218:	00801b04 	movi	r2,108
 800321c:	88838f26 	beq	r17,r2,800405c <___vfprintf_internal_r+0x1bf4>
 8003220:	84000414 	ori	r16,r16,16
 8003224:	003cf206 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8003228:	8025883a 	mov	r18,r16
 800322c:	dc002903 	ldbu	r16,164(sp)
 8003230:	e011883a 	mov	r8,fp
 8003234:	84003fcc 	andi	r16,r16,255
 8003238:	80053f1e 	bne	r16,zero,8004738 <___vfprintf_internal_r+0x22d0>
 800323c:	9080080c 	andi	r2,r18,32
 8003240:	1002d226 	beq	r2,zero,8003d8c <___vfprintf_internal_r+0x1924>
 8003244:	d9002e17 	ldw	r4,184(sp)
 8003248:	d9402f17 	ldw	r5,188(sp)
 800324c:	20800017 	ldw	r2,0(r4)
 8003250:	2807d7fa 	srai	r3,r5,31
 8003254:	21000104 	addi	r4,r4,4
 8003258:	d9002e15 	stw	r4,184(sp)
 800325c:	11400015 	stw	r5,0(r2)
 8003260:	10c00115 	stw	r3,4(r2)
 8003264:	003cb806 	br	8002548 <__alt_data_end+0xfc002548>
 8003268:	d8c02e17 	ldw	r3,184(sp)
 800326c:	d9002e17 	ldw	r4,184(sp)
 8003270:	8025883a 	mov	r18,r16
 8003274:	18800017 	ldw	r2,0(r3)
 8003278:	21000104 	addi	r4,r4,4
 800327c:	00c00044 	movi	r3,1
 8003280:	e011883a 	mov	r8,fp
 8003284:	d8c02915 	stw	r3,164(sp)
 8003288:	d8002785 	stb	zero,158(sp)
 800328c:	d8801405 	stb	r2,80(sp)
 8003290:	d9002e15 	stw	r4,184(sp)
 8003294:	d8c02b15 	stw	r3,172(sp)
 8003298:	d8002a15 	stw	zero,168(sp)
 800329c:	d8003215 	stw	zero,200(sp)
 80032a0:	dc001404 	addi	r16,sp,80
 80032a4:	0039883a 	mov	fp,zero
 80032a8:	003e5306 	br	8002bf8 <__alt_data_end+0xfc002bf8>
 80032ac:	01020074 	movhi	r4,2049
 80032b0:	21086404 	addi	r4,r4,8592
 80032b4:	0039883a 	mov	fp,zero
 80032b8:	d9003915 	stw	r4,228(sp)
 80032bc:	04401e04 	movi	r17,120
 80032c0:	003f6906 	br	8003068 <__alt_data_end+0xfc003068>
 80032c4:	8025883a 	mov	r18,r16
 80032c8:	dc002903 	ldbu	r16,164(sp)
 80032cc:	e011883a 	mov	r8,fp
 80032d0:	84003fcc 	andi	r16,r16,255
 80032d4:	8005081e 	bne	r16,zero,80046f8 <___vfprintf_internal_r+0x2290>
 80032d8:	883d6126 	beq	r17,zero,8002860 <__alt_data_end+0xfc002860>
 80032dc:	00c00044 	movi	r3,1
 80032e0:	d8c02915 	stw	r3,164(sp)
 80032e4:	dc401405 	stb	r17,80(sp)
 80032e8:	d8002785 	stb	zero,158(sp)
 80032ec:	003fe906 	br	8003294 <__alt_data_end+0xfc003294>
 80032f0:	01420074 	movhi	r5,2049
 80032f4:	29486404 	addi	r5,r5,8592
 80032f8:	d9403915 	stw	r5,228(sp)
 80032fc:	d8c02e15 	stw	r3,184(sp)
 8003300:	1025883a 	mov	r18,r2
 8003304:	04401e04 	movi	r17,120
 8003308:	9d84b03a 	or	r2,r19,r22
 800330c:	1000fc1e 	bne	r2,zero,8003700 <___vfprintf_internal_r+0x1298>
 8003310:	0039883a 	mov	fp,zero
 8003314:	00800084 	movi	r2,2
 8003318:	10803fcc 	andi	r2,r2,255
 800331c:	00c00044 	movi	r3,1
 8003320:	10c20f26 	beq	r2,r3,8003b60 <___vfprintf_internal_r+0x16f8>
 8003324:	00c00084 	movi	r3,2
 8003328:	10fd3326 	beq	r2,r3,80027f8 <__alt_data_end+0xfc0027f8>
 800332c:	003e0b06 	br	8002b5c <__alt_data_end+0xfc002b5c>
 8003330:	d8c02017 	ldw	r3,128(sp)
 8003334:	003e7106 	br	8002cfc <__alt_data_end+0xfc002cfc>
 8003338:	00801944 	movi	r2,101
 800333c:	14407e0e 	bge	r2,r17,8003538 <___vfprintf_internal_r+0x10d0>
 8003340:	d9003617 	ldw	r4,216(sp)
 8003344:	d9403817 	ldw	r5,224(sp)
 8003348:	000d883a 	mov	r6,zero
 800334c:	000f883a 	mov	r7,zero
 8003350:	d8c03c15 	stw	r3,240(sp)
 8003354:	da003d15 	stw	r8,244(sp)
 8003358:	800dba80 	call	800dba8 <__eqdf2>
 800335c:	d8c03c17 	ldw	r3,240(sp)
 8003360:	da003d17 	ldw	r8,244(sp)
 8003364:	1000f71e 	bne	r2,zero,8003744 <___vfprintf_internal_r+0x12dc>
 8003368:	d8801f17 	ldw	r2,124(sp)
 800336c:	01020074 	movhi	r4,2049
 8003370:	21086b04 	addi	r4,r4,8620
 8003374:	18c00044 	addi	r3,r3,1
 8003378:	10800044 	addi	r2,r2,1
 800337c:	41000015 	stw	r4,0(r8)
 8003380:	01000044 	movi	r4,1
 8003384:	41000115 	stw	r4,4(r8)
 8003388:	d8c02015 	stw	r3,128(sp)
 800338c:	d8801f15 	stw	r2,124(sp)
 8003390:	010001c4 	movi	r4,7
 8003394:	2082b816 	blt	r4,r2,8003e78 <___vfprintf_internal_r+0x1a10>
 8003398:	42000204 	addi	r8,r8,8
 800339c:	d8802617 	ldw	r2,152(sp)
 80033a0:	d9403317 	ldw	r5,204(sp)
 80033a4:	11400216 	blt	r2,r5,80033b0 <___vfprintf_internal_r+0xf48>
 80033a8:	9080004c 	andi	r2,r18,1
 80033ac:	103eb326 	beq	r2,zero,8002e7c <__alt_data_end+0xfc002e7c>
 80033b0:	d8803717 	ldw	r2,220(sp)
 80033b4:	d9003417 	ldw	r4,208(sp)
 80033b8:	d9403717 	ldw	r5,220(sp)
 80033bc:	1887883a 	add	r3,r3,r2
 80033c0:	d8801f17 	ldw	r2,124(sp)
 80033c4:	41000015 	stw	r4,0(r8)
 80033c8:	41400115 	stw	r5,4(r8)
 80033cc:	10800044 	addi	r2,r2,1
 80033d0:	d8c02015 	stw	r3,128(sp)
 80033d4:	d8801f15 	stw	r2,124(sp)
 80033d8:	010001c4 	movi	r4,7
 80033dc:	20832916 	blt	r4,r2,8004084 <___vfprintf_internal_r+0x1c1c>
 80033e0:	42000204 	addi	r8,r8,8
 80033e4:	d8803317 	ldw	r2,204(sp)
 80033e8:	143fffc4 	addi	r16,r2,-1
 80033ec:	043ea30e 	bge	zero,r16,8002e7c <__alt_data_end+0xfc002e7c>
 80033f0:	04400404 	movi	r17,16
 80033f4:	d8801f17 	ldw	r2,124(sp)
 80033f8:	8c00880e 	bge	r17,r16,800361c <___vfprintf_internal_r+0x11b4>
 80033fc:	01420074 	movhi	r5,2049
 8003400:	29486b84 	addi	r5,r5,8622
 8003404:	d9402c15 	stw	r5,176(sp)
 8003408:	058001c4 	movi	r22,7
 800340c:	dcc02d17 	ldw	r19,180(sp)
 8003410:	00000306 	br	8003420 <___vfprintf_internal_r+0xfb8>
 8003414:	42000204 	addi	r8,r8,8
 8003418:	843ffc04 	addi	r16,r16,-16
 800341c:	8c00820e 	bge	r17,r16,8003628 <___vfprintf_internal_r+0x11c0>
 8003420:	18c00404 	addi	r3,r3,16
 8003424:	10800044 	addi	r2,r2,1
 8003428:	45000015 	stw	r20,0(r8)
 800342c:	44400115 	stw	r17,4(r8)
 8003430:	d8c02015 	stw	r3,128(sp)
 8003434:	d8801f15 	stw	r2,124(sp)
 8003438:	b0bff60e 	bge	r22,r2,8003414 <__alt_data_end+0xfc003414>
 800343c:	d9801e04 	addi	r6,sp,120
 8003440:	b80b883a 	mov	r5,r23
 8003444:	9809883a 	mov	r4,r19
 8003448:	8009c480 	call	8009c48 <__sprint_r>
 800344c:	103d0a1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003450:	d8c02017 	ldw	r3,128(sp)
 8003454:	d8801f17 	ldw	r2,124(sp)
 8003458:	da000404 	addi	r8,sp,16
 800345c:	003fee06 	br	8003418 <__alt_data_end+0xfc003418>
 8003460:	d9403117 	ldw	r5,196(sp)
 8003464:	d8802917 	ldw	r2,164(sp)
 8003468:	28adc83a 	sub	r22,r5,r2
 800346c:	05be410e 	bge	zero,r22,8002d74 <__alt_data_end+0xfc002d74>
 8003470:	07000404 	movi	fp,16
 8003474:	d8801f17 	ldw	r2,124(sp)
 8003478:	e5838f0e 	bge	fp,r22,80042b8 <___vfprintf_internal_r+0x1e50>
 800347c:	01420074 	movhi	r5,2049
 8003480:	29486b84 	addi	r5,r5,8622
 8003484:	dc403015 	stw	r17,192(sp)
 8003488:	d9402c15 	stw	r5,176(sp)
 800348c:	b023883a 	mov	r17,r22
 8003490:	04c001c4 	movi	r19,7
 8003494:	a82d883a 	mov	r22,r21
 8003498:	902b883a 	mov	r21,r18
 800349c:	8025883a 	mov	r18,r16
 80034a0:	dc002d17 	ldw	r16,180(sp)
 80034a4:	00000306 	br	80034b4 <___vfprintf_internal_r+0x104c>
 80034a8:	8c7ffc04 	addi	r17,r17,-16
 80034ac:	42000204 	addi	r8,r8,8
 80034b0:	e440110e 	bge	fp,r17,80034f8 <___vfprintf_internal_r+0x1090>
 80034b4:	18c00404 	addi	r3,r3,16
 80034b8:	10800044 	addi	r2,r2,1
 80034bc:	45000015 	stw	r20,0(r8)
 80034c0:	47000115 	stw	fp,4(r8)
 80034c4:	d8c02015 	stw	r3,128(sp)
 80034c8:	d8801f15 	stw	r2,124(sp)
 80034cc:	98bff60e 	bge	r19,r2,80034a8 <__alt_data_end+0xfc0034a8>
 80034d0:	d9801e04 	addi	r6,sp,120
 80034d4:	b80b883a 	mov	r5,r23
 80034d8:	8009883a 	mov	r4,r16
 80034dc:	8009c480 	call	8009c48 <__sprint_r>
 80034e0:	103ce51e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 80034e4:	8c7ffc04 	addi	r17,r17,-16
 80034e8:	d8c02017 	ldw	r3,128(sp)
 80034ec:	d8801f17 	ldw	r2,124(sp)
 80034f0:	da000404 	addi	r8,sp,16
 80034f4:	e47fef16 	blt	fp,r17,80034b4 <__alt_data_end+0xfc0034b4>
 80034f8:	9021883a 	mov	r16,r18
 80034fc:	a825883a 	mov	r18,r21
 8003500:	b02b883a 	mov	r21,r22
 8003504:	882d883a 	mov	r22,r17
 8003508:	dc403017 	ldw	r17,192(sp)
 800350c:	d9002c17 	ldw	r4,176(sp)
 8003510:	1d87883a 	add	r3,r3,r22
 8003514:	10800044 	addi	r2,r2,1
 8003518:	41000015 	stw	r4,0(r8)
 800351c:	45800115 	stw	r22,4(r8)
 8003520:	d8c02015 	stw	r3,128(sp)
 8003524:	d8801f15 	stw	r2,124(sp)
 8003528:	010001c4 	movi	r4,7
 800352c:	20818e16 	blt	r4,r2,8003b68 <___vfprintf_internal_r+0x1700>
 8003530:	42000204 	addi	r8,r8,8
 8003534:	003e0f06 	br	8002d74 <__alt_data_end+0xfc002d74>
 8003538:	d9403317 	ldw	r5,204(sp)
 800353c:	00800044 	movi	r2,1
 8003540:	18c00044 	addi	r3,r3,1
 8003544:	1141530e 	bge	r2,r5,8003a94 <___vfprintf_internal_r+0x162c>
 8003548:	dc401f17 	ldw	r17,124(sp)
 800354c:	00800044 	movi	r2,1
 8003550:	40800115 	stw	r2,4(r8)
 8003554:	8c400044 	addi	r17,r17,1
 8003558:	44000015 	stw	r16,0(r8)
 800355c:	d8c02015 	stw	r3,128(sp)
 8003560:	dc401f15 	stw	r17,124(sp)
 8003564:	008001c4 	movi	r2,7
 8003568:	14416b16 	blt	r2,r17,8003b18 <___vfprintf_internal_r+0x16b0>
 800356c:	42000204 	addi	r8,r8,8
 8003570:	d8803717 	ldw	r2,220(sp)
 8003574:	d9003417 	ldw	r4,208(sp)
 8003578:	8c400044 	addi	r17,r17,1
 800357c:	10c7883a 	add	r3,r2,r3
 8003580:	40800115 	stw	r2,4(r8)
 8003584:	41000015 	stw	r4,0(r8)
 8003588:	d8c02015 	stw	r3,128(sp)
 800358c:	dc401f15 	stw	r17,124(sp)
 8003590:	008001c4 	movi	r2,7
 8003594:	14416916 	blt	r2,r17,8003b3c <___vfprintf_internal_r+0x16d4>
 8003598:	45800204 	addi	r22,r8,8
 800359c:	d9003617 	ldw	r4,216(sp)
 80035a0:	d9403817 	ldw	r5,224(sp)
 80035a4:	000d883a 	mov	r6,zero
 80035a8:	000f883a 	mov	r7,zero
 80035ac:	d8c03c15 	stw	r3,240(sp)
 80035b0:	800dba80 	call	800dba8 <__eqdf2>
 80035b4:	d8c03c17 	ldw	r3,240(sp)
 80035b8:	1000bc26 	beq	r2,zero,80038ac <___vfprintf_internal_r+0x1444>
 80035bc:	d9403317 	ldw	r5,204(sp)
 80035c0:	84000044 	addi	r16,r16,1
 80035c4:	8c400044 	addi	r17,r17,1
 80035c8:	28bfffc4 	addi	r2,r5,-1
 80035cc:	1887883a 	add	r3,r3,r2
 80035d0:	b0800115 	stw	r2,4(r22)
 80035d4:	b4000015 	stw	r16,0(r22)
 80035d8:	d8c02015 	stw	r3,128(sp)
 80035dc:	dc401f15 	stw	r17,124(sp)
 80035e0:	008001c4 	movi	r2,7
 80035e4:	14414316 	blt	r2,r17,8003af4 <___vfprintf_internal_r+0x168c>
 80035e8:	b5800204 	addi	r22,r22,8
 80035ec:	d9003a17 	ldw	r4,232(sp)
 80035f0:	df0022c4 	addi	fp,sp,139
 80035f4:	8c400044 	addi	r17,r17,1
 80035f8:	20c7883a 	add	r3,r4,r3
 80035fc:	b7000015 	stw	fp,0(r22)
 8003600:	b1000115 	stw	r4,4(r22)
 8003604:	d8c02015 	stw	r3,128(sp)
 8003608:	dc401f15 	stw	r17,124(sp)
 800360c:	008001c4 	movi	r2,7
 8003610:	14400e16 	blt	r2,r17,800364c <___vfprintf_internal_r+0x11e4>
 8003614:	b2000204 	addi	r8,r22,8
 8003618:	003e1806 	br	8002e7c <__alt_data_end+0xfc002e7c>
 800361c:	01020074 	movhi	r4,2049
 8003620:	21086b84 	addi	r4,r4,8622
 8003624:	d9002c15 	stw	r4,176(sp)
 8003628:	d9002c17 	ldw	r4,176(sp)
 800362c:	1c07883a 	add	r3,r3,r16
 8003630:	44000115 	stw	r16,4(r8)
 8003634:	41000015 	stw	r4,0(r8)
 8003638:	10800044 	addi	r2,r2,1
 800363c:	d8c02015 	stw	r3,128(sp)
 8003640:	d8801f15 	stw	r2,124(sp)
 8003644:	010001c4 	movi	r4,7
 8003648:	20be0b0e 	bge	r4,r2,8002e78 <__alt_data_end+0xfc002e78>
 800364c:	d9002d17 	ldw	r4,180(sp)
 8003650:	d9801e04 	addi	r6,sp,120
 8003654:	b80b883a 	mov	r5,r23
 8003658:	8009c480 	call	8009c48 <__sprint_r>
 800365c:	103c861e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003660:	d8c02017 	ldw	r3,128(sp)
 8003664:	da000404 	addi	r8,sp,16
 8003668:	003e0406 	br	8002e7c <__alt_data_end+0xfc002e7c>
 800366c:	d9002d17 	ldw	r4,180(sp)
 8003670:	d9801e04 	addi	r6,sp,120
 8003674:	b80b883a 	mov	r5,r23
 8003678:	8009c480 	call	8009c48 <__sprint_r>
 800367c:	103e3b26 	beq	r2,zero,8002f6c <__alt_data_end+0xfc002f6c>
 8003680:	003c7d06 	br	8002878 <__alt_data_end+0xfc002878>
 8003684:	d9002d17 	ldw	r4,180(sp)
 8003688:	d9801e04 	addi	r6,sp,120
 800368c:	b80b883a 	mov	r5,r23
 8003690:	8009c480 	call	8009c48 <__sprint_r>
 8003694:	103c781e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003698:	d8c02017 	ldw	r3,128(sp)
 800369c:	da000404 	addi	r8,sp,16
 80036a0:	003de906 	br	8002e48 <__alt_data_end+0xfc002e48>
 80036a4:	d9002d17 	ldw	r4,180(sp)
 80036a8:	d9801e04 	addi	r6,sp,120
 80036ac:	b80b883a 	mov	r5,r23
 80036b0:	8009c480 	call	8009c48 <__sprint_r>
 80036b4:	103c701e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 80036b8:	d8c02017 	ldw	r3,128(sp)
 80036bc:	da000404 	addi	r8,sp,16
 80036c0:	003d9b06 	br	8002d30 <__alt_data_end+0xfc002d30>
 80036c4:	d9002d17 	ldw	r4,180(sp)
 80036c8:	d9801e04 	addi	r6,sp,120
 80036cc:	b80b883a 	mov	r5,r23
 80036d0:	8009c480 	call	8009c48 <__sprint_r>
 80036d4:	103c681e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 80036d8:	d8c02017 	ldw	r3,128(sp)
 80036dc:	da000404 	addi	r8,sp,16
 80036e0:	003da106 	br	8002d68 <__alt_data_end+0xfc002d68>
 80036e4:	d9402a17 	ldw	r5,168(sp)
 80036e8:	d8002785 	stb	zero,158(sp)
 80036ec:	283f0616 	blt	r5,zero,8003308 <__alt_data_end+0xfc003308>
 80036f0:	00ffdfc4 	movi	r3,-129
 80036f4:	9d84b03a 	or	r2,r19,r22
 80036f8:	90e4703a 	and	r18,r18,r3
 80036fc:	103c3b26 	beq	r2,zero,80027ec <__alt_data_end+0xfc0027ec>
 8003700:	0039883a 	mov	fp,zero
 8003704:	003e5806 	br	8003068 <__alt_data_end+0xfc003068>
 8003708:	9080040c 	andi	r2,r18,16
 800370c:	1001b326 	beq	r2,zero,8003ddc <___vfprintf_internal_r+0x1974>
 8003710:	d8c02e17 	ldw	r3,184(sp)
 8003714:	d9002a17 	ldw	r4,168(sp)
 8003718:	d8002785 	stb	zero,158(sp)
 800371c:	18800104 	addi	r2,r3,4
 8003720:	1cc00017 	ldw	r19,0(r3)
 8003724:	002d883a 	mov	r22,zero
 8003728:	2001b516 	blt	r4,zero,8003e00 <___vfprintf_internal_r+0x1998>
 800372c:	00ffdfc4 	movi	r3,-129
 8003730:	d8802e15 	stw	r2,184(sp)
 8003734:	90e4703a 	and	r18,r18,r3
 8003738:	983d0526 	beq	r19,zero,8002b50 <__alt_data_end+0xfc002b50>
 800373c:	0039883a 	mov	fp,zero
 8003740:	003d0806 	br	8002b64 <__alt_data_end+0xfc002b64>
 8003744:	dc402617 	ldw	r17,152(sp)
 8003748:	0441d30e 	bge	zero,r17,8003e98 <___vfprintf_internal_r+0x1a30>
 800374c:	dc403217 	ldw	r17,200(sp)
 8003750:	d8803317 	ldw	r2,204(sp)
 8003754:	1440010e 	bge	r2,r17,800375c <___vfprintf_internal_r+0x12f4>
 8003758:	1023883a 	mov	r17,r2
 800375c:	04400a0e 	bge	zero,r17,8003788 <___vfprintf_internal_r+0x1320>
 8003760:	d8801f17 	ldw	r2,124(sp)
 8003764:	1c47883a 	add	r3,r3,r17
 8003768:	44000015 	stw	r16,0(r8)
 800376c:	10800044 	addi	r2,r2,1
 8003770:	44400115 	stw	r17,4(r8)
 8003774:	d8c02015 	stw	r3,128(sp)
 8003778:	d8801f15 	stw	r2,124(sp)
 800377c:	010001c4 	movi	r4,7
 8003780:	20826516 	blt	r4,r2,8004118 <___vfprintf_internal_r+0x1cb0>
 8003784:	42000204 	addi	r8,r8,8
 8003788:	88026116 	blt	r17,zero,8004110 <___vfprintf_internal_r+0x1ca8>
 800378c:	d9003217 	ldw	r4,200(sp)
 8003790:	2463c83a 	sub	r17,r4,r17
 8003794:	04407b0e 	bge	zero,r17,8003984 <___vfprintf_internal_r+0x151c>
 8003798:	05800404 	movi	r22,16
 800379c:	d8801f17 	ldw	r2,124(sp)
 80037a0:	b4419d0e 	bge	r22,r17,8003e18 <___vfprintf_internal_r+0x19b0>
 80037a4:	01020074 	movhi	r4,2049
 80037a8:	21086b84 	addi	r4,r4,8622
 80037ac:	d9002c15 	stw	r4,176(sp)
 80037b0:	070001c4 	movi	fp,7
 80037b4:	dcc02d17 	ldw	r19,180(sp)
 80037b8:	00000306 	br	80037c8 <___vfprintf_internal_r+0x1360>
 80037bc:	42000204 	addi	r8,r8,8
 80037c0:	8c7ffc04 	addi	r17,r17,-16
 80037c4:	b441970e 	bge	r22,r17,8003e24 <___vfprintf_internal_r+0x19bc>
 80037c8:	18c00404 	addi	r3,r3,16
 80037cc:	10800044 	addi	r2,r2,1
 80037d0:	45000015 	stw	r20,0(r8)
 80037d4:	45800115 	stw	r22,4(r8)
 80037d8:	d8c02015 	stw	r3,128(sp)
 80037dc:	d8801f15 	stw	r2,124(sp)
 80037e0:	e0bff60e 	bge	fp,r2,80037bc <__alt_data_end+0xfc0037bc>
 80037e4:	d9801e04 	addi	r6,sp,120
 80037e8:	b80b883a 	mov	r5,r23
 80037ec:	9809883a 	mov	r4,r19
 80037f0:	8009c480 	call	8009c48 <__sprint_r>
 80037f4:	103c201e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 80037f8:	d8c02017 	ldw	r3,128(sp)
 80037fc:	d8801f17 	ldw	r2,124(sp)
 8003800:	da000404 	addi	r8,sp,16
 8003804:	003fee06 	br	80037c0 <__alt_data_end+0xfc0037c0>
 8003808:	d9002d17 	ldw	r4,180(sp)
 800380c:	d9801e04 	addi	r6,sp,120
 8003810:	b80b883a 	mov	r5,r23
 8003814:	8009c480 	call	8009c48 <__sprint_r>
 8003818:	103c171e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 800381c:	d8c02017 	ldw	r3,128(sp)
 8003820:	df002787 	ldb	fp,158(sp)
 8003824:	da000404 	addi	r8,sp,16
 8003828:	003d3406 	br	8002cfc <__alt_data_end+0xfc002cfc>
 800382c:	9080040c 	andi	r2,r18,16
 8003830:	10016126 	beq	r2,zero,8003db8 <___vfprintf_internal_r+0x1950>
 8003834:	d9402e17 	ldw	r5,184(sp)
 8003838:	2cc00017 	ldw	r19,0(r5)
 800383c:	29400104 	addi	r5,r5,4
 8003840:	d9402e15 	stw	r5,184(sp)
 8003844:	982dd7fa 	srai	r22,r19,31
 8003848:	b005883a 	mov	r2,r22
 800384c:	003c5a06 	br	80029b8 <__alt_data_end+0xfc0029b8>
 8003850:	9080040c 	andi	r2,r18,16
 8003854:	10003526 	beq	r2,zero,800392c <___vfprintf_internal_r+0x14c4>
 8003858:	d8c02e17 	ldw	r3,184(sp)
 800385c:	d9002a17 	ldw	r4,168(sp)
 8003860:	d8002785 	stb	zero,158(sp)
 8003864:	18800104 	addi	r2,r3,4
 8003868:	1cc00017 	ldw	r19,0(r3)
 800386c:	002d883a 	mov	r22,zero
 8003870:	20003716 	blt	r4,zero,8003950 <___vfprintf_internal_r+0x14e8>
 8003874:	00ffdfc4 	movi	r3,-129
 8003878:	d8802e15 	stw	r2,184(sp)
 800387c:	90e4703a 	and	r18,r18,r3
 8003880:	0039883a 	mov	fp,zero
 8003884:	983dd426 	beq	r19,zero,8002fd8 <__alt_data_end+0xfc002fd8>
 8003888:	00800244 	movi	r2,9
 800388c:	14fc5336 	bltu	r2,r19,80029dc <__alt_data_end+0xfc0029dc>
 8003890:	d8c02817 	ldw	r3,160(sp)
 8003894:	dc001dc4 	addi	r16,sp,119
 8003898:	9cc00c04 	addi	r19,r19,48
 800389c:	1c07c83a 	sub	r3,r3,r16
 80038a0:	dcc01dc5 	stb	r19,119(sp)
 80038a4:	d8c02b15 	stw	r3,172(sp)
 80038a8:	003cc606 	br	8002bc4 <__alt_data_end+0xfc002bc4>
 80038ac:	d8803317 	ldw	r2,204(sp)
 80038b0:	143fffc4 	addi	r16,r2,-1
 80038b4:	043f4d0e 	bge	zero,r16,80035ec <__alt_data_end+0xfc0035ec>
 80038b8:	07000404 	movi	fp,16
 80038bc:	e400810e 	bge	fp,r16,8003ac4 <___vfprintf_internal_r+0x165c>
 80038c0:	01420074 	movhi	r5,2049
 80038c4:	29486b84 	addi	r5,r5,8622
 80038c8:	d9402c15 	stw	r5,176(sp)
 80038cc:	01c001c4 	movi	r7,7
 80038d0:	dcc02d17 	ldw	r19,180(sp)
 80038d4:	00000306 	br	80038e4 <___vfprintf_internal_r+0x147c>
 80038d8:	b5800204 	addi	r22,r22,8
 80038dc:	843ffc04 	addi	r16,r16,-16
 80038e0:	e4007b0e 	bge	fp,r16,8003ad0 <___vfprintf_internal_r+0x1668>
 80038e4:	18c00404 	addi	r3,r3,16
 80038e8:	8c400044 	addi	r17,r17,1
 80038ec:	b5000015 	stw	r20,0(r22)
 80038f0:	b7000115 	stw	fp,4(r22)
 80038f4:	d8c02015 	stw	r3,128(sp)
 80038f8:	dc401f15 	stw	r17,124(sp)
 80038fc:	3c7ff60e 	bge	r7,r17,80038d8 <__alt_data_end+0xfc0038d8>
 8003900:	d9801e04 	addi	r6,sp,120
 8003904:	b80b883a 	mov	r5,r23
 8003908:	9809883a 	mov	r4,r19
 800390c:	d9c03c15 	stw	r7,240(sp)
 8003910:	8009c480 	call	8009c48 <__sprint_r>
 8003914:	d9c03c17 	ldw	r7,240(sp)
 8003918:	103bd71e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 800391c:	d8c02017 	ldw	r3,128(sp)
 8003920:	dc401f17 	ldw	r17,124(sp)
 8003924:	dd800404 	addi	r22,sp,16
 8003928:	003fec06 	br	80038dc <__alt_data_end+0xfc0038dc>
 800392c:	9080100c 	andi	r2,r18,64
 8003930:	d8002785 	stb	zero,158(sp)
 8003934:	10010e26 	beq	r2,zero,8003d70 <___vfprintf_internal_r+0x1908>
 8003938:	d9402e17 	ldw	r5,184(sp)
 800393c:	d8c02a17 	ldw	r3,168(sp)
 8003940:	002d883a 	mov	r22,zero
 8003944:	28800104 	addi	r2,r5,4
 8003948:	2cc0000b 	ldhu	r19,0(r5)
 800394c:	183fc90e 	bge	r3,zero,8003874 <__alt_data_end+0xfc003874>
 8003950:	d8802e15 	stw	r2,184(sp)
 8003954:	0039883a 	mov	fp,zero
 8003958:	9d84b03a 	or	r2,r19,r22
 800395c:	103c1e1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003960:	00800044 	movi	r2,1
 8003964:	003e6c06 	br	8003318 <__alt_data_end+0xfc003318>
 8003968:	d9002d17 	ldw	r4,180(sp)
 800396c:	d9801e04 	addi	r6,sp,120
 8003970:	b80b883a 	mov	r5,r23
 8003974:	8009c480 	call	8009c48 <__sprint_r>
 8003978:	103bbf1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 800397c:	d8c02017 	ldw	r3,128(sp)
 8003980:	da000404 	addi	r8,sp,16
 8003984:	d9003217 	ldw	r4,200(sp)
 8003988:	d8802617 	ldw	r2,152(sp)
 800398c:	d9403317 	ldw	r5,204(sp)
 8003990:	8123883a 	add	r17,r16,r4
 8003994:	11400216 	blt	r2,r5,80039a0 <___vfprintf_internal_r+0x1538>
 8003998:	9100004c 	andi	r4,r18,1
 800399c:	20000d26 	beq	r4,zero,80039d4 <___vfprintf_internal_r+0x156c>
 80039a0:	d9003717 	ldw	r4,220(sp)
 80039a4:	d9403417 	ldw	r5,208(sp)
 80039a8:	1907883a 	add	r3,r3,r4
 80039ac:	d9001f17 	ldw	r4,124(sp)
 80039b0:	41400015 	stw	r5,0(r8)
 80039b4:	d9403717 	ldw	r5,220(sp)
 80039b8:	21000044 	addi	r4,r4,1
 80039bc:	d8c02015 	stw	r3,128(sp)
 80039c0:	41400115 	stw	r5,4(r8)
 80039c4:	d9001f15 	stw	r4,124(sp)
 80039c8:	014001c4 	movi	r5,7
 80039cc:	2901e816 	blt	r5,r4,8004170 <___vfprintf_internal_r+0x1d08>
 80039d0:	42000204 	addi	r8,r8,8
 80039d4:	d9003317 	ldw	r4,204(sp)
 80039d8:	8121883a 	add	r16,r16,r4
 80039dc:	2085c83a 	sub	r2,r4,r2
 80039e0:	8461c83a 	sub	r16,r16,r17
 80039e4:	1400010e 	bge	r2,r16,80039ec <___vfprintf_internal_r+0x1584>
 80039e8:	1021883a 	mov	r16,r2
 80039ec:	04000a0e 	bge	zero,r16,8003a18 <___vfprintf_internal_r+0x15b0>
 80039f0:	d9001f17 	ldw	r4,124(sp)
 80039f4:	1c07883a 	add	r3,r3,r16
 80039f8:	44400015 	stw	r17,0(r8)
 80039fc:	21000044 	addi	r4,r4,1
 8003a00:	44000115 	stw	r16,4(r8)
 8003a04:	d8c02015 	stw	r3,128(sp)
 8003a08:	d9001f15 	stw	r4,124(sp)
 8003a0c:	014001c4 	movi	r5,7
 8003a10:	2901fb16 	blt	r5,r4,8004200 <___vfprintf_internal_r+0x1d98>
 8003a14:	42000204 	addi	r8,r8,8
 8003a18:	8001f716 	blt	r16,zero,80041f8 <___vfprintf_internal_r+0x1d90>
 8003a1c:	1421c83a 	sub	r16,r2,r16
 8003a20:	043d160e 	bge	zero,r16,8002e7c <__alt_data_end+0xfc002e7c>
 8003a24:	04400404 	movi	r17,16
 8003a28:	d8801f17 	ldw	r2,124(sp)
 8003a2c:	8c3efb0e 	bge	r17,r16,800361c <__alt_data_end+0xfc00361c>
 8003a30:	01420074 	movhi	r5,2049
 8003a34:	29486b84 	addi	r5,r5,8622
 8003a38:	d9402c15 	stw	r5,176(sp)
 8003a3c:	058001c4 	movi	r22,7
 8003a40:	dcc02d17 	ldw	r19,180(sp)
 8003a44:	00000306 	br	8003a54 <___vfprintf_internal_r+0x15ec>
 8003a48:	42000204 	addi	r8,r8,8
 8003a4c:	843ffc04 	addi	r16,r16,-16
 8003a50:	8c3ef50e 	bge	r17,r16,8003628 <__alt_data_end+0xfc003628>
 8003a54:	18c00404 	addi	r3,r3,16
 8003a58:	10800044 	addi	r2,r2,1
 8003a5c:	45000015 	stw	r20,0(r8)
 8003a60:	44400115 	stw	r17,4(r8)
 8003a64:	d8c02015 	stw	r3,128(sp)
 8003a68:	d8801f15 	stw	r2,124(sp)
 8003a6c:	b0bff60e 	bge	r22,r2,8003a48 <__alt_data_end+0xfc003a48>
 8003a70:	d9801e04 	addi	r6,sp,120
 8003a74:	b80b883a 	mov	r5,r23
 8003a78:	9809883a 	mov	r4,r19
 8003a7c:	8009c480 	call	8009c48 <__sprint_r>
 8003a80:	103b7d1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003a84:	d8c02017 	ldw	r3,128(sp)
 8003a88:	d8801f17 	ldw	r2,124(sp)
 8003a8c:	da000404 	addi	r8,sp,16
 8003a90:	003fee06 	br	8003a4c <__alt_data_end+0xfc003a4c>
 8003a94:	9088703a 	and	r4,r18,r2
 8003a98:	203eab1e 	bne	r4,zero,8003548 <__alt_data_end+0xfc003548>
 8003a9c:	dc401f17 	ldw	r17,124(sp)
 8003aa0:	40800115 	stw	r2,4(r8)
 8003aa4:	44000015 	stw	r16,0(r8)
 8003aa8:	8c400044 	addi	r17,r17,1
 8003aac:	d8c02015 	stw	r3,128(sp)
 8003ab0:	dc401f15 	stw	r17,124(sp)
 8003ab4:	008001c4 	movi	r2,7
 8003ab8:	14400e16 	blt	r2,r17,8003af4 <___vfprintf_internal_r+0x168c>
 8003abc:	45800204 	addi	r22,r8,8
 8003ac0:	003eca06 	br	80035ec <__alt_data_end+0xfc0035ec>
 8003ac4:	01020074 	movhi	r4,2049
 8003ac8:	21086b84 	addi	r4,r4,8622
 8003acc:	d9002c15 	stw	r4,176(sp)
 8003ad0:	d8802c17 	ldw	r2,176(sp)
 8003ad4:	1c07883a 	add	r3,r3,r16
 8003ad8:	8c400044 	addi	r17,r17,1
 8003adc:	b0800015 	stw	r2,0(r22)
 8003ae0:	b4000115 	stw	r16,4(r22)
 8003ae4:	d8c02015 	stw	r3,128(sp)
 8003ae8:	dc401f15 	stw	r17,124(sp)
 8003aec:	008001c4 	movi	r2,7
 8003af0:	147ebd0e 	bge	r2,r17,80035e8 <__alt_data_end+0xfc0035e8>
 8003af4:	d9002d17 	ldw	r4,180(sp)
 8003af8:	d9801e04 	addi	r6,sp,120
 8003afc:	b80b883a 	mov	r5,r23
 8003b00:	8009c480 	call	8009c48 <__sprint_r>
 8003b04:	103b5c1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003b08:	d8c02017 	ldw	r3,128(sp)
 8003b0c:	dc401f17 	ldw	r17,124(sp)
 8003b10:	dd800404 	addi	r22,sp,16
 8003b14:	003eb506 	br	80035ec <__alt_data_end+0xfc0035ec>
 8003b18:	d9002d17 	ldw	r4,180(sp)
 8003b1c:	d9801e04 	addi	r6,sp,120
 8003b20:	b80b883a 	mov	r5,r23
 8003b24:	8009c480 	call	8009c48 <__sprint_r>
 8003b28:	103b531e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003b2c:	d8c02017 	ldw	r3,128(sp)
 8003b30:	dc401f17 	ldw	r17,124(sp)
 8003b34:	da000404 	addi	r8,sp,16
 8003b38:	003e8d06 	br	8003570 <__alt_data_end+0xfc003570>
 8003b3c:	d9002d17 	ldw	r4,180(sp)
 8003b40:	d9801e04 	addi	r6,sp,120
 8003b44:	b80b883a 	mov	r5,r23
 8003b48:	8009c480 	call	8009c48 <__sprint_r>
 8003b4c:	103b4a1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003b50:	d8c02017 	ldw	r3,128(sp)
 8003b54:	dc401f17 	ldw	r17,124(sp)
 8003b58:	dd800404 	addi	r22,sp,16
 8003b5c:	003e8f06 	br	800359c <__alt_data_end+0xfc00359c>
 8003b60:	0027883a 	mov	r19,zero
 8003b64:	003f4a06 	br	8003890 <__alt_data_end+0xfc003890>
 8003b68:	d9002d17 	ldw	r4,180(sp)
 8003b6c:	d9801e04 	addi	r6,sp,120
 8003b70:	b80b883a 	mov	r5,r23
 8003b74:	8009c480 	call	8009c48 <__sprint_r>
 8003b78:	103b3f1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003b7c:	d8c02017 	ldw	r3,128(sp)
 8003b80:	da000404 	addi	r8,sp,16
 8003b84:	003c7b06 	br	8002d74 <__alt_data_end+0xfc002d74>
 8003b88:	d9402a17 	ldw	r5,168(sp)
 8003b8c:	04e7c83a 	sub	r19,zero,r19
 8003b90:	07000b44 	movi	fp,45
 8003b94:	9804c03a 	cmpne	r2,r19,zero
 8003b98:	05adc83a 	sub	r22,zero,r22
 8003b9c:	df002785 	stb	fp,158(sp)
 8003ba0:	b0adc83a 	sub	r22,r22,r2
 8003ba4:	28017b16 	blt	r5,zero,8004194 <___vfprintf_internal_r+0x1d2c>
 8003ba8:	00bfdfc4 	movi	r2,-129
 8003bac:	90a4703a 	and	r18,r18,r2
 8003bb0:	003b8906 	br	80029d8 <__alt_data_end+0xfc0029d8>
 8003bb4:	d9003617 	ldw	r4,216(sp)
 8003bb8:	d9403817 	ldw	r5,224(sp)
 8003bbc:	da003d15 	stw	r8,244(sp)
 8003bc0:	800986c0 	call	800986c <__fpclassifyd>
 8003bc4:	da003d17 	ldw	r8,244(sp)
 8003bc8:	1000f026 	beq	r2,zero,8003f8c <___vfprintf_internal_r+0x1b24>
 8003bcc:	d9002a17 	ldw	r4,168(sp)
 8003bd0:	05bff7c4 	movi	r22,-33
 8003bd4:	00bfffc4 	movi	r2,-1
 8003bd8:	8dac703a 	and	r22,r17,r22
 8003bdc:	20820026 	beq	r4,r2,80043e0 <___vfprintf_internal_r+0x1f78>
 8003be0:	008011c4 	movi	r2,71
 8003be4:	b081f726 	beq	r22,r2,80043c4 <___vfprintf_internal_r+0x1f5c>
 8003be8:	d9003817 	ldw	r4,224(sp)
 8003bec:	90c04014 	ori	r3,r18,256
 8003bf0:	d8c02c15 	stw	r3,176(sp)
 8003bf4:	20021516 	blt	r4,zero,800444c <___vfprintf_internal_r+0x1fe4>
 8003bf8:	dcc03817 	ldw	r19,224(sp)
 8003bfc:	d8002905 	stb	zero,164(sp)
 8003c00:	00801984 	movi	r2,102
 8003c04:	8881f926 	beq	r17,r2,80043ec <___vfprintf_internal_r+0x1f84>
 8003c08:	00801184 	movi	r2,70
 8003c0c:	88821c26 	beq	r17,r2,8004480 <___vfprintf_internal_r+0x2018>
 8003c10:	00801144 	movi	r2,69
 8003c14:	b081ef26 	beq	r22,r2,80043d4 <___vfprintf_internal_r+0x1f6c>
 8003c18:	d8c02a17 	ldw	r3,168(sp)
 8003c1c:	d8802104 	addi	r2,sp,132
 8003c20:	d8800315 	stw	r2,12(sp)
 8003c24:	d9403617 	ldw	r5,216(sp)
 8003c28:	d8802504 	addi	r2,sp,148
 8003c2c:	d9002d17 	ldw	r4,180(sp)
 8003c30:	d8800215 	stw	r2,8(sp)
 8003c34:	d8802604 	addi	r2,sp,152
 8003c38:	d8c00015 	stw	r3,0(sp)
 8003c3c:	d8800115 	stw	r2,4(sp)
 8003c40:	01c00084 	movi	r7,2
 8003c44:	980d883a 	mov	r6,r19
 8003c48:	d8c03c15 	stw	r3,240(sp)
 8003c4c:	da003d15 	stw	r8,244(sp)
 8003c50:	8004b980 	call	8004b98 <_dtoa_r>
 8003c54:	1021883a 	mov	r16,r2
 8003c58:	008019c4 	movi	r2,103
 8003c5c:	d8c03c17 	ldw	r3,240(sp)
 8003c60:	da003d17 	ldw	r8,244(sp)
 8003c64:	88817126 	beq	r17,r2,800422c <___vfprintf_internal_r+0x1dc4>
 8003c68:	008011c4 	movi	r2,71
 8003c6c:	88829126 	beq	r17,r2,80046b4 <___vfprintf_internal_r+0x224c>
 8003c70:	80f9883a 	add	fp,r16,r3
 8003c74:	d9003617 	ldw	r4,216(sp)
 8003c78:	000d883a 	mov	r6,zero
 8003c7c:	000f883a 	mov	r7,zero
 8003c80:	980b883a 	mov	r5,r19
 8003c84:	da003d15 	stw	r8,244(sp)
 8003c88:	800dba80 	call	800dba8 <__eqdf2>
 8003c8c:	da003d17 	ldw	r8,244(sp)
 8003c90:	10018d26 	beq	r2,zero,80042c8 <___vfprintf_internal_r+0x1e60>
 8003c94:	d8802117 	ldw	r2,132(sp)
 8003c98:	1700062e 	bgeu	r2,fp,8003cb4 <___vfprintf_internal_r+0x184c>
 8003c9c:	01000c04 	movi	r4,48
 8003ca0:	10c00044 	addi	r3,r2,1
 8003ca4:	d8c02115 	stw	r3,132(sp)
 8003ca8:	11000005 	stb	r4,0(r2)
 8003cac:	d8802117 	ldw	r2,132(sp)
 8003cb0:	173ffb36 	bltu	r2,fp,8003ca0 <__alt_data_end+0xfc003ca0>
 8003cb4:	1405c83a 	sub	r2,r2,r16
 8003cb8:	d8803315 	stw	r2,204(sp)
 8003cbc:	008011c4 	movi	r2,71
 8003cc0:	b0817626 	beq	r22,r2,800429c <___vfprintf_internal_r+0x1e34>
 8003cc4:	00801944 	movi	r2,101
 8003cc8:	1442800e 	bge	r2,r17,80046cc <___vfprintf_internal_r+0x2264>
 8003ccc:	d8c02617 	ldw	r3,152(sp)
 8003cd0:	00801984 	movi	r2,102
 8003cd4:	d8c03215 	stw	r3,200(sp)
 8003cd8:	8881fe26 	beq	r17,r2,80044d4 <___vfprintf_internal_r+0x206c>
 8003cdc:	d8c03217 	ldw	r3,200(sp)
 8003ce0:	d9003317 	ldw	r4,204(sp)
 8003ce4:	1901dd16 	blt	r3,r4,800445c <___vfprintf_internal_r+0x1ff4>
 8003ce8:	9480004c 	andi	r18,r18,1
 8003cec:	90022b1e 	bne	r18,zero,800459c <___vfprintf_internal_r+0x2134>
 8003cf0:	1805883a 	mov	r2,r3
 8003cf4:	18028316 	blt	r3,zero,8004704 <___vfprintf_internal_r+0x229c>
 8003cf8:	d8c03217 	ldw	r3,200(sp)
 8003cfc:	044019c4 	movi	r17,103
 8003d00:	d8c02b15 	stw	r3,172(sp)
 8003d04:	df002907 	ldb	fp,164(sp)
 8003d08:	e001531e 	bne	fp,zero,8004258 <___vfprintf_internal_r+0x1df0>
 8003d0c:	df002783 	ldbu	fp,158(sp)
 8003d10:	d8802915 	stw	r2,164(sp)
 8003d14:	dc802c17 	ldw	r18,176(sp)
 8003d18:	d8002a15 	stw	zero,168(sp)
 8003d1c:	003baf06 	br	8002bdc <__alt_data_end+0xfc002bdc>
 8003d20:	d8c02e17 	ldw	r3,184(sp)
 8003d24:	d9002e17 	ldw	r4,184(sp)
 8003d28:	d9402e17 	ldw	r5,184(sp)
 8003d2c:	18c00017 	ldw	r3,0(r3)
 8003d30:	21000117 	ldw	r4,4(r4)
 8003d34:	29400204 	addi	r5,r5,8
 8003d38:	d8c03615 	stw	r3,216(sp)
 8003d3c:	d9003815 	stw	r4,224(sp)
 8003d40:	d9402e15 	stw	r5,184(sp)
 8003d44:	003b5006 	br	8002a88 <__alt_data_end+0xfc002a88>
 8003d48:	ac400007 	ldb	r17,0(r21)
 8003d4c:	003a2806 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8003d50:	9080100c 	andi	r2,r18,64
 8003d54:	1000a826 	beq	r2,zero,8003ff8 <___vfprintf_internal_r+0x1b90>
 8003d58:	d8c02e17 	ldw	r3,184(sp)
 8003d5c:	002d883a 	mov	r22,zero
 8003d60:	1cc0000b 	ldhu	r19,0(r3)
 8003d64:	18c00104 	addi	r3,r3,4
 8003d68:	d8c02e15 	stw	r3,184(sp)
 8003d6c:	003caf06 	br	800302c <__alt_data_end+0xfc00302c>
 8003d70:	d9002e17 	ldw	r4,184(sp)
 8003d74:	d9402a17 	ldw	r5,168(sp)
 8003d78:	002d883a 	mov	r22,zero
 8003d7c:	20800104 	addi	r2,r4,4
 8003d80:	24c00017 	ldw	r19,0(r4)
 8003d84:	283ebb0e 	bge	r5,zero,8003874 <__alt_data_end+0xfc003874>
 8003d88:	003ef106 	br	8003950 <__alt_data_end+0xfc003950>
 8003d8c:	9080040c 	andi	r2,r18,16
 8003d90:	1000921e 	bne	r2,zero,8003fdc <___vfprintf_internal_r+0x1b74>
 8003d94:	9480100c 	andi	r18,r18,64
 8003d98:	90013926 	beq	r18,zero,8004280 <___vfprintf_internal_r+0x1e18>
 8003d9c:	d9402e17 	ldw	r5,184(sp)
 8003da0:	d8c02f17 	ldw	r3,188(sp)
 8003da4:	28800017 	ldw	r2,0(r5)
 8003da8:	29400104 	addi	r5,r5,4
 8003dac:	d9402e15 	stw	r5,184(sp)
 8003db0:	10c0000d 	sth	r3,0(r2)
 8003db4:	0039e406 	br	8002548 <__alt_data_end+0xfc002548>
 8003db8:	9080100c 	andi	r2,r18,64
 8003dbc:	10008026 	beq	r2,zero,8003fc0 <___vfprintf_internal_r+0x1b58>
 8003dc0:	d8802e17 	ldw	r2,184(sp)
 8003dc4:	14c0000f 	ldh	r19,0(r2)
 8003dc8:	10800104 	addi	r2,r2,4
 8003dcc:	d8802e15 	stw	r2,184(sp)
 8003dd0:	982dd7fa 	srai	r22,r19,31
 8003dd4:	b005883a 	mov	r2,r22
 8003dd8:	003af706 	br	80029b8 <__alt_data_end+0xfc0029b8>
 8003ddc:	9080100c 	andi	r2,r18,64
 8003de0:	d8002785 	stb	zero,158(sp)
 8003de4:	10008a1e 	bne	r2,zero,8004010 <___vfprintf_internal_r+0x1ba8>
 8003de8:	d9002e17 	ldw	r4,184(sp)
 8003dec:	d9402a17 	ldw	r5,168(sp)
 8003df0:	002d883a 	mov	r22,zero
 8003df4:	20800104 	addi	r2,r4,4
 8003df8:	24c00017 	ldw	r19,0(r4)
 8003dfc:	283e4b0e 	bge	r5,zero,800372c <__alt_data_end+0xfc00372c>
 8003e00:	9d86b03a 	or	r3,r19,r22
 8003e04:	d8802e15 	stw	r2,184(sp)
 8003e08:	183e4c1e 	bne	r3,zero,800373c <__alt_data_end+0xfc00373c>
 8003e0c:	0039883a 	mov	fp,zero
 8003e10:	0005883a 	mov	r2,zero
 8003e14:	003d4006 	br	8003318 <__alt_data_end+0xfc003318>
 8003e18:	01420074 	movhi	r5,2049
 8003e1c:	29486b84 	addi	r5,r5,8622
 8003e20:	d9402c15 	stw	r5,176(sp)
 8003e24:	d9402c17 	ldw	r5,176(sp)
 8003e28:	1c47883a 	add	r3,r3,r17
 8003e2c:	10800044 	addi	r2,r2,1
 8003e30:	41400015 	stw	r5,0(r8)
 8003e34:	44400115 	stw	r17,4(r8)
 8003e38:	d8c02015 	stw	r3,128(sp)
 8003e3c:	d8801f15 	stw	r2,124(sp)
 8003e40:	010001c4 	movi	r4,7
 8003e44:	20bec816 	blt	r4,r2,8003968 <__alt_data_end+0xfc003968>
 8003e48:	42000204 	addi	r8,r8,8
 8003e4c:	003ecd06 	br	8003984 <__alt_data_end+0xfc003984>
 8003e50:	d9002a17 	ldw	r4,168(sp)
 8003e54:	d8002785 	stb	zero,158(sp)
 8003e58:	203d2d16 	blt	r4,zero,8003310 <__alt_data_end+0xfc003310>
 8003e5c:	00bfdfc4 	movi	r2,-129
 8003e60:	90a4703a 	and	r18,r18,r2
 8003e64:	003a6106 	br	80027ec <__alt_data_end+0xfc0027ec>
 8003e68:	01020074 	movhi	r4,2049
 8003e6c:	21086b84 	addi	r4,r4,8622
 8003e70:	d9002c15 	stw	r4,176(sp)
 8003e74:	003bea06 	br	8002e20 <__alt_data_end+0xfc002e20>
 8003e78:	d9002d17 	ldw	r4,180(sp)
 8003e7c:	d9801e04 	addi	r6,sp,120
 8003e80:	b80b883a 	mov	r5,r23
 8003e84:	8009c480 	call	8009c48 <__sprint_r>
 8003e88:	103a7b1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003e8c:	d8c02017 	ldw	r3,128(sp)
 8003e90:	da000404 	addi	r8,sp,16
 8003e94:	003d4106 	br	800339c <__alt_data_end+0xfc00339c>
 8003e98:	d8801f17 	ldw	r2,124(sp)
 8003e9c:	01420074 	movhi	r5,2049
 8003ea0:	01000044 	movi	r4,1
 8003ea4:	18c00044 	addi	r3,r3,1
 8003ea8:	10800044 	addi	r2,r2,1
 8003eac:	29486b04 	addi	r5,r5,8620
 8003eb0:	41000115 	stw	r4,4(r8)
 8003eb4:	41400015 	stw	r5,0(r8)
 8003eb8:	d8c02015 	stw	r3,128(sp)
 8003ebc:	d8801f15 	stw	r2,124(sp)
 8003ec0:	010001c4 	movi	r4,7
 8003ec4:	20805c16 	blt	r4,r2,8004038 <___vfprintf_internal_r+0x1bd0>
 8003ec8:	42000204 	addi	r8,r8,8
 8003ecc:	8800041e 	bne	r17,zero,8003ee0 <___vfprintf_internal_r+0x1a78>
 8003ed0:	d8803317 	ldw	r2,204(sp)
 8003ed4:	1000021e 	bne	r2,zero,8003ee0 <___vfprintf_internal_r+0x1a78>
 8003ed8:	9080004c 	andi	r2,r18,1
 8003edc:	103be726 	beq	r2,zero,8002e7c <__alt_data_end+0xfc002e7c>
 8003ee0:	d9003717 	ldw	r4,220(sp)
 8003ee4:	d8801f17 	ldw	r2,124(sp)
 8003ee8:	d9403417 	ldw	r5,208(sp)
 8003eec:	20c7883a 	add	r3,r4,r3
 8003ef0:	10800044 	addi	r2,r2,1
 8003ef4:	41000115 	stw	r4,4(r8)
 8003ef8:	41400015 	stw	r5,0(r8)
 8003efc:	d8c02015 	stw	r3,128(sp)
 8003f00:	d8801f15 	stw	r2,124(sp)
 8003f04:	010001c4 	movi	r4,7
 8003f08:	20812116 	blt	r4,r2,8004390 <___vfprintf_internal_r+0x1f28>
 8003f0c:	42000204 	addi	r8,r8,8
 8003f10:	0463c83a 	sub	r17,zero,r17
 8003f14:	0440730e 	bge	zero,r17,80040e4 <___vfprintf_internal_r+0x1c7c>
 8003f18:	05800404 	movi	r22,16
 8003f1c:	b440860e 	bge	r22,r17,8004138 <___vfprintf_internal_r+0x1cd0>
 8003f20:	01420074 	movhi	r5,2049
 8003f24:	29486b84 	addi	r5,r5,8622
 8003f28:	d9402c15 	stw	r5,176(sp)
 8003f2c:	070001c4 	movi	fp,7
 8003f30:	dcc02d17 	ldw	r19,180(sp)
 8003f34:	00000306 	br	8003f44 <___vfprintf_internal_r+0x1adc>
 8003f38:	42000204 	addi	r8,r8,8
 8003f3c:	8c7ffc04 	addi	r17,r17,-16
 8003f40:	b440800e 	bge	r22,r17,8004144 <___vfprintf_internal_r+0x1cdc>
 8003f44:	18c00404 	addi	r3,r3,16
 8003f48:	10800044 	addi	r2,r2,1
 8003f4c:	45000015 	stw	r20,0(r8)
 8003f50:	45800115 	stw	r22,4(r8)
 8003f54:	d8c02015 	stw	r3,128(sp)
 8003f58:	d8801f15 	stw	r2,124(sp)
 8003f5c:	e0bff60e 	bge	fp,r2,8003f38 <__alt_data_end+0xfc003f38>
 8003f60:	d9801e04 	addi	r6,sp,120
 8003f64:	b80b883a 	mov	r5,r23
 8003f68:	9809883a 	mov	r4,r19
 8003f6c:	8009c480 	call	8009c48 <__sprint_r>
 8003f70:	103a411e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8003f74:	d8c02017 	ldw	r3,128(sp)
 8003f78:	d8801f17 	ldw	r2,124(sp)
 8003f7c:	da000404 	addi	r8,sp,16
 8003f80:	003fee06 	br	8003f3c <__alt_data_end+0xfc003f3c>
 8003f84:	00bfffc4 	movi	r2,-1
 8003f88:	003a3f06 	br	8002888 <__alt_data_end+0xfc002888>
 8003f8c:	008011c4 	movi	r2,71
 8003f90:	1440b816 	blt	r2,r17,8004274 <___vfprintf_internal_r+0x1e0c>
 8003f94:	04020074 	movhi	r16,2049
 8003f98:	84085d04 	addi	r16,r16,8564
 8003f9c:	00c000c4 	movi	r3,3
 8003fa0:	00bfdfc4 	movi	r2,-129
 8003fa4:	d8c02915 	stw	r3,164(sp)
 8003fa8:	90a4703a 	and	r18,r18,r2
 8003fac:	df002783 	ldbu	fp,158(sp)
 8003fb0:	d8c02b15 	stw	r3,172(sp)
 8003fb4:	d8002a15 	stw	zero,168(sp)
 8003fb8:	d8003215 	stw	zero,200(sp)
 8003fbc:	003b0706 	br	8002bdc <__alt_data_end+0xfc002bdc>
 8003fc0:	d8c02e17 	ldw	r3,184(sp)
 8003fc4:	1cc00017 	ldw	r19,0(r3)
 8003fc8:	18c00104 	addi	r3,r3,4
 8003fcc:	d8c02e15 	stw	r3,184(sp)
 8003fd0:	982dd7fa 	srai	r22,r19,31
 8003fd4:	b005883a 	mov	r2,r22
 8003fd8:	003a7706 	br	80029b8 <__alt_data_end+0xfc0029b8>
 8003fdc:	d8c02e17 	ldw	r3,184(sp)
 8003fe0:	d9002f17 	ldw	r4,188(sp)
 8003fe4:	18800017 	ldw	r2,0(r3)
 8003fe8:	18c00104 	addi	r3,r3,4
 8003fec:	d8c02e15 	stw	r3,184(sp)
 8003ff0:	11000015 	stw	r4,0(r2)
 8003ff4:	00395406 	br	8002548 <__alt_data_end+0xfc002548>
 8003ff8:	d9002e17 	ldw	r4,184(sp)
 8003ffc:	002d883a 	mov	r22,zero
 8004000:	24c00017 	ldw	r19,0(r4)
 8004004:	21000104 	addi	r4,r4,4
 8004008:	d9002e15 	stw	r4,184(sp)
 800400c:	003c0706 	br	800302c <__alt_data_end+0xfc00302c>
 8004010:	d9402e17 	ldw	r5,184(sp)
 8004014:	d8c02a17 	ldw	r3,168(sp)
 8004018:	002d883a 	mov	r22,zero
 800401c:	28800104 	addi	r2,r5,4
 8004020:	2cc0000b 	ldhu	r19,0(r5)
 8004024:	183dc10e 	bge	r3,zero,800372c <__alt_data_end+0xfc00372c>
 8004028:	003f7506 	br	8003e00 <__alt_data_end+0xfc003e00>
 800402c:	04020074 	movhi	r16,2049
 8004030:	84085b04 	addi	r16,r16,8556
 8004034:	003aa706 	br	8002ad4 <__alt_data_end+0xfc002ad4>
 8004038:	d9002d17 	ldw	r4,180(sp)
 800403c:	d9801e04 	addi	r6,sp,120
 8004040:	b80b883a 	mov	r5,r23
 8004044:	8009c480 	call	8009c48 <__sprint_r>
 8004048:	103a0b1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 800404c:	dc402617 	ldw	r17,152(sp)
 8004050:	d8c02017 	ldw	r3,128(sp)
 8004054:	da000404 	addi	r8,sp,16
 8004058:	003f9c06 	br	8003ecc <__alt_data_end+0xfc003ecc>
 800405c:	ac400043 	ldbu	r17,1(r21)
 8004060:	84000814 	ori	r16,r16,32
 8004064:	ad400044 	addi	r21,r21,1
 8004068:	8c403fcc 	andi	r17,r17,255
 800406c:	8c40201c 	xori	r17,r17,128
 8004070:	8c7fe004 	addi	r17,r17,-128
 8004074:	00395e06 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8004078:	d8c02e15 	stw	r3,184(sp)
 800407c:	0039883a 	mov	fp,zero
 8004080:	003e3506 	br	8003958 <__alt_data_end+0xfc003958>
 8004084:	d9002d17 	ldw	r4,180(sp)
 8004088:	d9801e04 	addi	r6,sp,120
 800408c:	b80b883a 	mov	r5,r23
 8004090:	8009c480 	call	8009c48 <__sprint_r>
 8004094:	1039f81e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8004098:	d8c02017 	ldw	r3,128(sp)
 800409c:	da000404 	addi	r8,sp,16
 80040a0:	003cd006 	br	80033e4 <__alt_data_end+0xfc0033e4>
 80040a4:	8009883a 	mov	r4,r16
 80040a8:	df003d15 	stw	fp,244(sp)
 80040ac:	80023d00 	call	80023d0 <strlen>
 80040b0:	d8802b15 	stw	r2,172(sp)
 80040b4:	da003d17 	ldw	r8,244(sp)
 80040b8:	103c200e 	bge	r2,zero,800313c <__alt_data_end+0xfc00313c>
 80040bc:	0005883a 	mov	r2,zero
 80040c0:	003c1e06 	br	800313c <__alt_data_end+0xfc00313c>
 80040c4:	d9002d17 	ldw	r4,180(sp)
 80040c8:	d9801e04 	addi	r6,sp,120
 80040cc:	b80b883a 	mov	r5,r23
 80040d0:	8009c480 	call	8009c48 <__sprint_r>
 80040d4:	1039e81e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 80040d8:	d8c02017 	ldw	r3,128(sp)
 80040dc:	d8801f17 	ldw	r2,124(sp)
 80040e0:	da000404 	addi	r8,sp,16
 80040e4:	d9403317 	ldw	r5,204(sp)
 80040e8:	10800044 	addi	r2,r2,1
 80040ec:	44000015 	stw	r16,0(r8)
 80040f0:	28c7883a 	add	r3,r5,r3
 80040f4:	003b5b06 	br	8002e64 <__alt_data_end+0xfc002e64>
 80040f8:	01020074 	movhi	r4,2049
 80040fc:	21086f84 	addi	r4,r4,8638
 8004100:	d9003515 	stw	r4,212(sp)
 8004104:	003af206 	br	8002cd0 <__alt_data_end+0xfc002cd0>
 8004108:	013fffc4 	movi	r4,-1
 800410c:	003a0806 	br	8002930 <__alt_data_end+0xfc002930>
 8004110:	0023883a 	mov	r17,zero
 8004114:	003d9d06 	br	800378c <__alt_data_end+0xfc00378c>
 8004118:	d9002d17 	ldw	r4,180(sp)
 800411c:	d9801e04 	addi	r6,sp,120
 8004120:	b80b883a 	mov	r5,r23
 8004124:	8009c480 	call	8009c48 <__sprint_r>
 8004128:	1039d31e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 800412c:	d8c02017 	ldw	r3,128(sp)
 8004130:	da000404 	addi	r8,sp,16
 8004134:	003d9406 	br	8003788 <__alt_data_end+0xfc003788>
 8004138:	01020074 	movhi	r4,2049
 800413c:	21086b84 	addi	r4,r4,8622
 8004140:	d9002c15 	stw	r4,176(sp)
 8004144:	d9002c17 	ldw	r4,176(sp)
 8004148:	1c47883a 	add	r3,r3,r17
 800414c:	10800044 	addi	r2,r2,1
 8004150:	41000015 	stw	r4,0(r8)
 8004154:	44400115 	stw	r17,4(r8)
 8004158:	d8c02015 	stw	r3,128(sp)
 800415c:	d8801f15 	stw	r2,124(sp)
 8004160:	010001c4 	movi	r4,7
 8004164:	20bfd716 	blt	r4,r2,80040c4 <__alt_data_end+0xfc0040c4>
 8004168:	42000204 	addi	r8,r8,8
 800416c:	003fdd06 	br	80040e4 <__alt_data_end+0xfc0040e4>
 8004170:	d9002d17 	ldw	r4,180(sp)
 8004174:	d9801e04 	addi	r6,sp,120
 8004178:	b80b883a 	mov	r5,r23
 800417c:	8009c480 	call	8009c48 <__sprint_r>
 8004180:	1039bd1e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8004184:	d8802617 	ldw	r2,152(sp)
 8004188:	d8c02017 	ldw	r3,128(sp)
 800418c:	da000404 	addi	r8,sp,16
 8004190:	003e1006 	br	80039d4 <__alt_data_end+0xfc0039d4>
 8004194:	00800044 	movi	r2,1
 8004198:	10803fcc 	andi	r2,r2,255
 800419c:	00c00044 	movi	r3,1
 80041a0:	10fa0d26 	beq	r2,r3,80029d8 <__alt_data_end+0xfc0029d8>
 80041a4:	00c00084 	movi	r3,2
 80041a8:	10fbaf26 	beq	r2,r3,8003068 <__alt_data_end+0xfc003068>
 80041ac:	003a6d06 	br	8002b64 <__alt_data_end+0xfc002b64>
 80041b0:	01020074 	movhi	r4,2049
 80041b4:	21086f84 	addi	r4,r4,8638
 80041b8:	d9003515 	stw	r4,212(sp)
 80041bc:	003b5406 	br	8002f10 <__alt_data_end+0xfc002f10>
 80041c0:	d8802a17 	ldw	r2,168(sp)
 80041c4:	00c00184 	movi	r3,6
 80041c8:	1880012e 	bgeu	r3,r2,80041d0 <___vfprintf_internal_r+0x1d68>
 80041cc:	1805883a 	mov	r2,r3
 80041d0:	d8802b15 	stw	r2,172(sp)
 80041d4:	1000ef16 	blt	r2,zero,8004594 <___vfprintf_internal_r+0x212c>
 80041d8:	04020074 	movhi	r16,2049
 80041dc:	d8802915 	stw	r2,164(sp)
 80041e0:	dcc02e15 	stw	r19,184(sp)
 80041e4:	d8002a15 	stw	zero,168(sp)
 80041e8:	d8003215 	stw	zero,200(sp)
 80041ec:	84086904 	addi	r16,r16,8612
 80041f0:	0039883a 	mov	fp,zero
 80041f4:	003a8006 	br	8002bf8 <__alt_data_end+0xfc002bf8>
 80041f8:	0021883a 	mov	r16,zero
 80041fc:	003e0706 	br	8003a1c <__alt_data_end+0xfc003a1c>
 8004200:	d9002d17 	ldw	r4,180(sp)
 8004204:	d9801e04 	addi	r6,sp,120
 8004208:	b80b883a 	mov	r5,r23
 800420c:	8009c480 	call	8009c48 <__sprint_r>
 8004210:	1039991e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8004214:	d8802617 	ldw	r2,152(sp)
 8004218:	d9403317 	ldw	r5,204(sp)
 800421c:	d8c02017 	ldw	r3,128(sp)
 8004220:	da000404 	addi	r8,sp,16
 8004224:	2885c83a 	sub	r2,r5,r2
 8004228:	003dfb06 	br	8003a18 <__alt_data_end+0xfc003a18>
 800422c:	9080004c 	andi	r2,r18,1
 8004230:	103e8f1e 	bne	r2,zero,8003c70 <__alt_data_end+0xfc003c70>
 8004234:	d8802117 	ldw	r2,132(sp)
 8004238:	003e9e06 	br	8003cb4 <__alt_data_end+0xfc003cb4>
 800423c:	1025883a 	mov	r18,r2
 8004240:	0039883a 	mov	fp,zero
 8004244:	00800084 	movi	r2,2
 8004248:	003fd306 	br	8004198 <__alt_data_end+0xfc004198>
 800424c:	07000b44 	movi	fp,45
 8004250:	df002785 	stb	fp,158(sp)
 8004254:	003a1b06 	br	8002ac4 <__alt_data_end+0xfc002ac4>
 8004258:	00c00b44 	movi	r3,45
 800425c:	d8c02785 	stb	r3,158(sp)
 8004260:	d8802915 	stw	r2,164(sp)
 8004264:	dc802c17 	ldw	r18,176(sp)
 8004268:	d8002a15 	stw	zero,168(sp)
 800426c:	07000b44 	movi	fp,45
 8004270:	003a5e06 	br	8002bec <__alt_data_end+0xfc002bec>
 8004274:	04020074 	movhi	r16,2049
 8004278:	84085e04 	addi	r16,r16,8568
 800427c:	003f4706 	br	8003f9c <__alt_data_end+0xfc003f9c>
 8004280:	d9002e17 	ldw	r4,184(sp)
 8004284:	d9402f17 	ldw	r5,188(sp)
 8004288:	20800017 	ldw	r2,0(r4)
 800428c:	21000104 	addi	r4,r4,4
 8004290:	d9002e15 	stw	r4,184(sp)
 8004294:	11400015 	stw	r5,0(r2)
 8004298:	0038ab06 	br	8002548 <__alt_data_end+0xfc002548>
 800429c:	dd802617 	ldw	r22,152(sp)
 80042a0:	00bfff44 	movi	r2,-3
 80042a4:	b0801c16 	blt	r22,r2,8004318 <___vfprintf_internal_r+0x1eb0>
 80042a8:	d9402a17 	ldw	r5,168(sp)
 80042ac:	2d801a16 	blt	r5,r22,8004318 <___vfprintf_internal_r+0x1eb0>
 80042b0:	dd803215 	stw	r22,200(sp)
 80042b4:	003e8906 	br	8003cdc <__alt_data_end+0xfc003cdc>
 80042b8:	01020074 	movhi	r4,2049
 80042bc:	21086b84 	addi	r4,r4,8622
 80042c0:	d9002c15 	stw	r4,176(sp)
 80042c4:	003c9106 	br	800350c <__alt_data_end+0xfc00350c>
 80042c8:	e005883a 	mov	r2,fp
 80042cc:	003e7906 	br	8003cb4 <__alt_data_end+0xfc003cb4>
 80042d0:	d9002a17 	ldw	r4,168(sp)
 80042d4:	df002783 	ldbu	fp,158(sp)
 80042d8:	dcc02e15 	stw	r19,184(sp)
 80042dc:	d9002915 	stw	r4,164(sp)
 80042e0:	d9002b15 	stw	r4,172(sp)
 80042e4:	d8002a15 	stw	zero,168(sp)
 80042e8:	d8003215 	stw	zero,200(sp)
 80042ec:	003a3b06 	br	8002bdc <__alt_data_end+0xfc002bdc>
 80042f0:	9080004c 	andi	r2,r18,1
 80042f4:	0039883a 	mov	fp,zero
 80042f8:	10000426 	beq	r2,zero,800430c <___vfprintf_internal_r+0x1ea4>
 80042fc:	00800c04 	movi	r2,48
 8004300:	dc001dc4 	addi	r16,sp,119
 8004304:	d8801dc5 	stb	r2,119(sp)
 8004308:	003b6406 	br	800309c <__alt_data_end+0xfc00309c>
 800430c:	d8002b15 	stw	zero,172(sp)
 8004310:	dc001e04 	addi	r16,sp,120
 8004314:	003a2b06 	br	8002bc4 <__alt_data_end+0xfc002bc4>
 8004318:	8c7fff84 	addi	r17,r17,-2
 800431c:	b5bfffc4 	addi	r22,r22,-1
 8004320:	dd802615 	stw	r22,152(sp)
 8004324:	dc4022c5 	stb	r17,139(sp)
 8004328:	b000bf16 	blt	r22,zero,8004628 <___vfprintf_internal_r+0x21c0>
 800432c:	00800ac4 	movi	r2,43
 8004330:	d8802305 	stb	r2,140(sp)
 8004334:	00800244 	movi	r2,9
 8004338:	15807016 	blt	r2,r22,80044fc <___vfprintf_internal_r+0x2094>
 800433c:	00800c04 	movi	r2,48
 8004340:	b5800c04 	addi	r22,r22,48
 8004344:	d8802345 	stb	r2,141(sp)
 8004348:	dd802385 	stb	r22,142(sp)
 800434c:	d88023c4 	addi	r2,sp,143
 8004350:	df0022c4 	addi	fp,sp,139
 8004354:	d8c03317 	ldw	r3,204(sp)
 8004358:	1739c83a 	sub	fp,r2,fp
 800435c:	d9003317 	ldw	r4,204(sp)
 8004360:	e0c7883a 	add	r3,fp,r3
 8004364:	df003a15 	stw	fp,232(sp)
 8004368:	d8c02b15 	stw	r3,172(sp)
 800436c:	00800044 	movi	r2,1
 8004370:	1100b30e 	bge	r2,r4,8004640 <___vfprintf_internal_r+0x21d8>
 8004374:	d8c02b17 	ldw	r3,172(sp)
 8004378:	18c00044 	addi	r3,r3,1
 800437c:	d8c02b15 	stw	r3,172(sp)
 8004380:	1805883a 	mov	r2,r3
 8004384:	1800ac16 	blt	r3,zero,8004638 <___vfprintf_internal_r+0x21d0>
 8004388:	d8003215 	stw	zero,200(sp)
 800438c:	003e5d06 	br	8003d04 <__alt_data_end+0xfc003d04>
 8004390:	d9002d17 	ldw	r4,180(sp)
 8004394:	d9801e04 	addi	r6,sp,120
 8004398:	b80b883a 	mov	r5,r23
 800439c:	8009c480 	call	8009c48 <__sprint_r>
 80043a0:	1039351e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 80043a4:	dc402617 	ldw	r17,152(sp)
 80043a8:	d8c02017 	ldw	r3,128(sp)
 80043ac:	d8801f17 	ldw	r2,124(sp)
 80043b0:	da000404 	addi	r8,sp,16
 80043b4:	003ed606 	br	8003f10 <__alt_data_end+0xfc003f10>
 80043b8:	182b883a 	mov	r21,r3
 80043bc:	d8002a15 	stw	zero,168(sp)
 80043c0:	00388c06 	br	80025f4 <__alt_data_end+0xfc0025f4>
 80043c4:	d8802a17 	ldw	r2,168(sp)
 80043c8:	103e071e 	bne	r2,zero,8003be8 <__alt_data_end+0xfc003be8>
 80043cc:	dc002a15 	stw	r16,168(sp)
 80043d0:	003e0506 	br	8003be8 <__alt_data_end+0xfc003be8>
 80043d4:	d9002a17 	ldw	r4,168(sp)
 80043d8:	20c00044 	addi	r3,r4,1
 80043dc:	003e0f06 	br	8003c1c <__alt_data_end+0xfc003c1c>
 80043e0:	01400184 	movi	r5,6
 80043e4:	d9402a15 	stw	r5,168(sp)
 80043e8:	003dff06 	br	8003be8 <__alt_data_end+0xfc003be8>
 80043ec:	d8802104 	addi	r2,sp,132
 80043f0:	d8800315 	stw	r2,12(sp)
 80043f4:	d8802504 	addi	r2,sp,148
 80043f8:	d8800215 	stw	r2,8(sp)
 80043fc:	d8802604 	addi	r2,sp,152
 8004400:	d8800115 	stw	r2,4(sp)
 8004404:	d8802a17 	ldw	r2,168(sp)
 8004408:	d9403617 	ldw	r5,216(sp)
 800440c:	d9002d17 	ldw	r4,180(sp)
 8004410:	d8800015 	stw	r2,0(sp)
 8004414:	01c000c4 	movi	r7,3
 8004418:	980d883a 	mov	r6,r19
 800441c:	da003d15 	stw	r8,244(sp)
 8004420:	8004b980 	call	8004b98 <_dtoa_r>
 8004424:	d8c02a17 	ldw	r3,168(sp)
 8004428:	da003d17 	ldw	r8,244(sp)
 800442c:	1021883a 	mov	r16,r2
 8004430:	10f9883a 	add	fp,r2,r3
 8004434:	81000007 	ldb	r4,0(r16)
 8004438:	00800c04 	movi	r2,48
 800443c:	20805e26 	beq	r4,r2,80045b8 <___vfprintf_internal_r+0x2150>
 8004440:	d8c02617 	ldw	r3,152(sp)
 8004444:	e0f9883a 	add	fp,fp,r3
 8004448:	003e0a06 	br	8003c74 <__alt_data_end+0xfc003c74>
 800444c:	00c00b44 	movi	r3,45
 8004450:	24e0003c 	xorhi	r19,r4,32768
 8004454:	d8c02905 	stb	r3,164(sp)
 8004458:	003de906 	br	8003c00 <__alt_data_end+0xfc003c00>
 800445c:	d8c03217 	ldw	r3,200(sp)
 8004460:	00c07a0e 	bge	zero,r3,800464c <___vfprintf_internal_r+0x21e4>
 8004464:	00800044 	movi	r2,1
 8004468:	d9003317 	ldw	r4,204(sp)
 800446c:	1105883a 	add	r2,r2,r4
 8004470:	d8802b15 	stw	r2,172(sp)
 8004474:	10004e16 	blt	r2,zero,80045b0 <___vfprintf_internal_r+0x2148>
 8004478:	044019c4 	movi	r17,103
 800447c:	003e2106 	br	8003d04 <__alt_data_end+0xfc003d04>
 8004480:	d9002a17 	ldw	r4,168(sp)
 8004484:	d8802104 	addi	r2,sp,132
 8004488:	d8800315 	stw	r2,12(sp)
 800448c:	d9000015 	stw	r4,0(sp)
 8004490:	d8802504 	addi	r2,sp,148
 8004494:	d9403617 	ldw	r5,216(sp)
 8004498:	d9002d17 	ldw	r4,180(sp)
 800449c:	d8800215 	stw	r2,8(sp)
 80044a0:	d8802604 	addi	r2,sp,152
 80044a4:	d8800115 	stw	r2,4(sp)
 80044a8:	01c000c4 	movi	r7,3
 80044ac:	980d883a 	mov	r6,r19
 80044b0:	da003d15 	stw	r8,244(sp)
 80044b4:	8004b980 	call	8004b98 <_dtoa_r>
 80044b8:	d8c02a17 	ldw	r3,168(sp)
 80044bc:	da003d17 	ldw	r8,244(sp)
 80044c0:	1021883a 	mov	r16,r2
 80044c4:	00801184 	movi	r2,70
 80044c8:	80f9883a 	add	fp,r16,r3
 80044cc:	88bfd926 	beq	r17,r2,8004434 <__alt_data_end+0xfc004434>
 80044d0:	003de806 	br	8003c74 <__alt_data_end+0xfc003c74>
 80044d4:	d9002a17 	ldw	r4,168(sp)
 80044d8:	00c04d0e 	bge	zero,r3,8004610 <___vfprintf_internal_r+0x21a8>
 80044dc:	2000441e 	bne	r4,zero,80045f0 <___vfprintf_internal_r+0x2188>
 80044e0:	9480004c 	andi	r18,r18,1
 80044e4:	9000421e 	bne	r18,zero,80045f0 <___vfprintf_internal_r+0x2188>
 80044e8:	1805883a 	mov	r2,r3
 80044ec:	18006f16 	blt	r3,zero,80046ac <___vfprintf_internal_r+0x2244>
 80044f0:	d8c03217 	ldw	r3,200(sp)
 80044f4:	d8c02b15 	stw	r3,172(sp)
 80044f8:	003e0206 	br	8003d04 <__alt_data_end+0xfc003d04>
 80044fc:	df0022c4 	addi	fp,sp,139
 8004500:	dc002a15 	stw	r16,168(sp)
 8004504:	4027883a 	mov	r19,r8
 8004508:	e021883a 	mov	r16,fp
 800450c:	b009883a 	mov	r4,r22
 8004510:	01400284 	movi	r5,10
 8004514:	800c7d40 	call	800c7d4 <__modsi3>
 8004518:	10800c04 	addi	r2,r2,48
 800451c:	843fffc4 	addi	r16,r16,-1
 8004520:	b009883a 	mov	r4,r22
 8004524:	01400284 	movi	r5,10
 8004528:	80800005 	stb	r2,0(r16)
 800452c:	800c7500 	call	800c750 <__divsi3>
 8004530:	102d883a 	mov	r22,r2
 8004534:	00800244 	movi	r2,9
 8004538:	15bff416 	blt	r2,r22,800450c <__alt_data_end+0xfc00450c>
 800453c:	9811883a 	mov	r8,r19
 8004540:	b0800c04 	addi	r2,r22,48
 8004544:	8027883a 	mov	r19,r16
 8004548:	997fffc4 	addi	r5,r19,-1
 800454c:	98bfffc5 	stb	r2,-1(r19)
 8004550:	dc002a17 	ldw	r16,168(sp)
 8004554:	2f006d2e 	bgeu	r5,fp,800470c <___vfprintf_internal_r+0x22a4>
 8004558:	d9c02384 	addi	r7,sp,142
 800455c:	3ccfc83a 	sub	r7,r7,r19
 8004560:	d9002344 	addi	r4,sp,141
 8004564:	e1cf883a 	add	r7,fp,r7
 8004568:	00000106 	br	8004570 <___vfprintf_internal_r+0x2108>
 800456c:	28800003 	ldbu	r2,0(r5)
 8004570:	20800005 	stb	r2,0(r4)
 8004574:	21000044 	addi	r4,r4,1
 8004578:	29400044 	addi	r5,r5,1
 800457c:	393ffb1e 	bne	r7,r4,800456c <__alt_data_end+0xfc00456c>
 8004580:	d8802304 	addi	r2,sp,140
 8004584:	14c5c83a 	sub	r2,r2,r19
 8004588:	d8c02344 	addi	r3,sp,141
 800458c:	1885883a 	add	r2,r3,r2
 8004590:	003f7006 	br	8004354 <__alt_data_end+0xfc004354>
 8004594:	0005883a 	mov	r2,zero
 8004598:	003f0f06 	br	80041d8 <__alt_data_end+0xfc0041d8>
 800459c:	d8c03217 	ldw	r3,200(sp)
 80045a0:	18c00044 	addi	r3,r3,1
 80045a4:	d8c02b15 	stw	r3,172(sp)
 80045a8:	1805883a 	mov	r2,r3
 80045ac:	183fb20e 	bge	r3,zero,8004478 <__alt_data_end+0xfc004478>
 80045b0:	0005883a 	mov	r2,zero
 80045b4:	003fb006 	br	8004478 <__alt_data_end+0xfc004478>
 80045b8:	d9003617 	ldw	r4,216(sp)
 80045bc:	000d883a 	mov	r6,zero
 80045c0:	000f883a 	mov	r7,zero
 80045c4:	980b883a 	mov	r5,r19
 80045c8:	d8c03c15 	stw	r3,240(sp)
 80045cc:	da003d15 	stw	r8,244(sp)
 80045d0:	800dba80 	call	800dba8 <__eqdf2>
 80045d4:	d8c03c17 	ldw	r3,240(sp)
 80045d8:	da003d17 	ldw	r8,244(sp)
 80045dc:	103f9826 	beq	r2,zero,8004440 <__alt_data_end+0xfc004440>
 80045e0:	00800044 	movi	r2,1
 80045e4:	10c7c83a 	sub	r3,r2,r3
 80045e8:	d8c02615 	stw	r3,152(sp)
 80045ec:	003f9506 	br	8004444 <__alt_data_end+0xfc004444>
 80045f0:	d9002a17 	ldw	r4,168(sp)
 80045f4:	d8c03217 	ldw	r3,200(sp)
 80045f8:	20800044 	addi	r2,r4,1
 80045fc:	1885883a 	add	r2,r3,r2
 8004600:	d8802b15 	stw	r2,172(sp)
 8004604:	103dbf0e 	bge	r2,zero,8003d04 <__alt_data_end+0xfc003d04>
 8004608:	0005883a 	mov	r2,zero
 800460c:	003dbd06 	br	8003d04 <__alt_data_end+0xfc003d04>
 8004610:	2000201e 	bne	r4,zero,8004694 <___vfprintf_internal_r+0x222c>
 8004614:	9480004c 	andi	r18,r18,1
 8004618:	90001e1e 	bne	r18,zero,8004694 <___vfprintf_internal_r+0x222c>
 800461c:	00800044 	movi	r2,1
 8004620:	d8802b15 	stw	r2,172(sp)
 8004624:	003db706 	br	8003d04 <__alt_data_end+0xfc003d04>
 8004628:	00800b44 	movi	r2,45
 800462c:	05adc83a 	sub	r22,zero,r22
 8004630:	d8802305 	stb	r2,140(sp)
 8004634:	003f3f06 	br	8004334 <__alt_data_end+0xfc004334>
 8004638:	0005883a 	mov	r2,zero
 800463c:	003f5206 	br	8004388 <__alt_data_end+0xfc004388>
 8004640:	90a4703a 	and	r18,r18,r2
 8004644:	903f4e26 	beq	r18,zero,8004380 <__alt_data_end+0xfc004380>
 8004648:	003f4a06 	br	8004374 <__alt_data_end+0xfc004374>
 800464c:	00800084 	movi	r2,2
 8004650:	10c5c83a 	sub	r2,r2,r3
 8004654:	003f8406 	br	8004468 <__alt_data_end+0xfc004468>
 8004658:	d9402e17 	ldw	r5,184(sp)
 800465c:	d9002e17 	ldw	r4,184(sp)
 8004660:	ac400043 	ldbu	r17,1(r21)
 8004664:	29400017 	ldw	r5,0(r5)
 8004668:	20800104 	addi	r2,r4,4
 800466c:	d8802e15 	stw	r2,184(sp)
 8004670:	d9402a15 	stw	r5,168(sp)
 8004674:	182b883a 	mov	r21,r3
 8004678:	283e7b0e 	bge	r5,zero,8004068 <__alt_data_end+0xfc004068>
 800467c:	8c403fcc 	andi	r17,r17,255
 8004680:	017fffc4 	movi	r5,-1
 8004684:	8c40201c 	xori	r17,r17,128
 8004688:	d9402a15 	stw	r5,168(sp)
 800468c:	8c7fe004 	addi	r17,r17,-128
 8004690:	0037d706 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8004694:	d8c02a17 	ldw	r3,168(sp)
 8004698:	18c00084 	addi	r3,r3,2
 800469c:	d8c02b15 	stw	r3,172(sp)
 80046a0:	1805883a 	mov	r2,r3
 80046a4:	183d970e 	bge	r3,zero,8003d04 <__alt_data_end+0xfc003d04>
 80046a8:	003fd706 	br	8004608 <__alt_data_end+0xfc004608>
 80046ac:	0005883a 	mov	r2,zero
 80046b0:	003f8f06 	br	80044f0 <__alt_data_end+0xfc0044f0>
 80046b4:	9080004c 	andi	r2,r18,1
 80046b8:	103f821e 	bne	r2,zero,80044c4 <__alt_data_end+0xfc0044c4>
 80046bc:	d8802117 	ldw	r2,132(sp)
 80046c0:	1405c83a 	sub	r2,r2,r16
 80046c4:	d8803315 	stw	r2,204(sp)
 80046c8:	b47ef426 	beq	r22,r17,800429c <__alt_data_end+0xfc00429c>
 80046cc:	dd802617 	ldw	r22,152(sp)
 80046d0:	003f1206 	br	800431c <__alt_data_end+0xfc00431c>
 80046d4:	d8c02b03 	ldbu	r3,172(sp)
 80046d8:	d8c02785 	stb	r3,158(sp)
 80046dc:	0038df06 	br	8002a5c <__alt_data_end+0xfc002a5c>
 80046e0:	d8c02b03 	ldbu	r3,172(sp)
 80046e4:	d8c02785 	stb	r3,158(sp)
 80046e8:	0038aa06 	br	8002994 <__alt_data_end+0xfc002994>
 80046ec:	d8c02b03 	ldbu	r3,172(sp)
 80046f0:	d8c02785 	stb	r3,158(sp)
 80046f4:	003a4306 	br	8003004 <__alt_data_end+0xfc003004>
 80046f8:	d8c02b03 	ldbu	r3,172(sp)
 80046fc:	d8c02785 	stb	r3,158(sp)
 8004700:	003af506 	br	80032d8 <__alt_data_end+0xfc0032d8>
 8004704:	0005883a 	mov	r2,zero
 8004708:	003d7b06 	br	8003cf8 <__alt_data_end+0xfc003cf8>
 800470c:	d8802344 	addi	r2,sp,141
 8004710:	003f1006 	br	8004354 <__alt_data_end+0xfc004354>
 8004714:	d8c02b03 	ldbu	r3,172(sp)
 8004718:	d8c02785 	stb	r3,158(sp)
 800471c:	0038fd06 	br	8002b14 <__alt_data_end+0xfc002b14>
 8004720:	d8c02b03 	ldbu	r3,172(sp)
 8004724:	d8c02785 	stb	r3,158(sp)
 8004728:	003a9706 	br	8003188 <__alt_data_end+0xfc003188>
 800472c:	d8c02b03 	ldbu	r3,172(sp)
 8004730:	d8c02785 	stb	r3,158(sp)
 8004734:	003a1806 	br	8002f98 <__alt_data_end+0xfc002f98>
 8004738:	d8c02b03 	ldbu	r3,172(sp)
 800473c:	d8c02785 	stb	r3,158(sp)
 8004740:	003abe06 	br	800323c <__alt_data_end+0xfc00323c>

08004744 <__vfprintf_internal>:
 8004744:	00820074 	movhi	r2,2049
 8004748:	108fc604 	addi	r2,r2,16152
 800474c:	300f883a 	mov	r7,r6
 8004750:	280d883a 	mov	r6,r5
 8004754:	200b883a 	mov	r5,r4
 8004758:	11000017 	ldw	r4,0(r2)
 800475c:	80024681 	jmpi	8002468 <___vfprintf_internal_r>

08004760 <__sbprintf>:
 8004760:	2880030b 	ldhu	r2,12(r5)
 8004764:	2ac01917 	ldw	r11,100(r5)
 8004768:	2a80038b 	ldhu	r10,14(r5)
 800476c:	2a400717 	ldw	r9,28(r5)
 8004770:	2a000917 	ldw	r8,36(r5)
 8004774:	defee204 	addi	sp,sp,-1144
 8004778:	00c10004 	movi	r3,1024
 800477c:	dc011a15 	stw	r16,1128(sp)
 8004780:	10bfff4c 	andi	r2,r2,65533
 8004784:	2821883a 	mov	r16,r5
 8004788:	d8cb883a 	add	r5,sp,r3
 800478c:	dc811c15 	stw	r18,1136(sp)
 8004790:	dc411b15 	stw	r17,1132(sp)
 8004794:	dfc11d15 	stw	ra,1140(sp)
 8004798:	2025883a 	mov	r18,r4
 800479c:	d881030d 	sth	r2,1036(sp)
 80047a0:	dac11915 	stw	r11,1124(sp)
 80047a4:	da81038d 	sth	r10,1038(sp)
 80047a8:	da410715 	stw	r9,1052(sp)
 80047ac:	da010915 	stw	r8,1060(sp)
 80047b0:	dec10015 	stw	sp,1024(sp)
 80047b4:	dec10415 	stw	sp,1040(sp)
 80047b8:	d8c10215 	stw	r3,1032(sp)
 80047bc:	d8c10515 	stw	r3,1044(sp)
 80047c0:	d8010615 	stw	zero,1048(sp)
 80047c4:	80024680 	call	8002468 <___vfprintf_internal_r>
 80047c8:	1023883a 	mov	r17,r2
 80047cc:	10000416 	blt	r2,zero,80047e0 <__sbprintf+0x80>
 80047d0:	d9410004 	addi	r5,sp,1024
 80047d4:	9009883a 	mov	r4,r18
 80047d8:	800643c0 	call	800643c <_fflush_r>
 80047dc:	10000d1e 	bne	r2,zero,8004814 <__sbprintf+0xb4>
 80047e0:	d881030b 	ldhu	r2,1036(sp)
 80047e4:	1080100c 	andi	r2,r2,64
 80047e8:	10000326 	beq	r2,zero,80047f8 <__sbprintf+0x98>
 80047ec:	8080030b 	ldhu	r2,12(r16)
 80047f0:	10801014 	ori	r2,r2,64
 80047f4:	8080030d 	sth	r2,12(r16)
 80047f8:	8805883a 	mov	r2,r17
 80047fc:	dfc11d17 	ldw	ra,1140(sp)
 8004800:	dc811c17 	ldw	r18,1136(sp)
 8004804:	dc411b17 	ldw	r17,1132(sp)
 8004808:	dc011a17 	ldw	r16,1128(sp)
 800480c:	dec11e04 	addi	sp,sp,1144
 8004810:	f800283a 	ret
 8004814:	047fffc4 	movi	r17,-1
 8004818:	003ff106 	br	80047e0 <__alt_data_end+0xfc0047e0>

0800481c <__swsetup_r>:
 800481c:	00820074 	movhi	r2,2049
 8004820:	defffd04 	addi	sp,sp,-12
 8004824:	108fc604 	addi	r2,r2,16152
 8004828:	dc400115 	stw	r17,4(sp)
 800482c:	2023883a 	mov	r17,r4
 8004830:	11000017 	ldw	r4,0(r2)
 8004834:	dc000015 	stw	r16,0(sp)
 8004838:	dfc00215 	stw	ra,8(sp)
 800483c:	2821883a 	mov	r16,r5
 8004840:	20000226 	beq	r4,zero,800484c <__swsetup_r+0x30>
 8004844:	20800e17 	ldw	r2,56(r4)
 8004848:	10003126 	beq	r2,zero,8004910 <__swsetup_r+0xf4>
 800484c:	8080030b 	ldhu	r2,12(r16)
 8004850:	10c0020c 	andi	r3,r2,8
 8004854:	1009883a 	mov	r4,r2
 8004858:	18000f26 	beq	r3,zero,8004898 <__swsetup_r+0x7c>
 800485c:	80c00417 	ldw	r3,16(r16)
 8004860:	18001526 	beq	r3,zero,80048b8 <__swsetup_r+0x9c>
 8004864:	1100004c 	andi	r4,r2,1
 8004868:	20001c1e 	bne	r4,zero,80048dc <__swsetup_r+0xc0>
 800486c:	1080008c 	andi	r2,r2,2
 8004870:	1000291e 	bne	r2,zero,8004918 <__swsetup_r+0xfc>
 8004874:	80800517 	ldw	r2,20(r16)
 8004878:	80800215 	stw	r2,8(r16)
 800487c:	18001c26 	beq	r3,zero,80048f0 <__swsetup_r+0xd4>
 8004880:	0005883a 	mov	r2,zero
 8004884:	dfc00217 	ldw	ra,8(sp)
 8004888:	dc400117 	ldw	r17,4(sp)
 800488c:	dc000017 	ldw	r16,0(sp)
 8004890:	dec00304 	addi	sp,sp,12
 8004894:	f800283a 	ret
 8004898:	2080040c 	andi	r2,r4,16
 800489c:	10002e26 	beq	r2,zero,8004958 <__swsetup_r+0x13c>
 80048a0:	2080010c 	andi	r2,r4,4
 80048a4:	10001e1e 	bne	r2,zero,8004920 <__swsetup_r+0x104>
 80048a8:	80c00417 	ldw	r3,16(r16)
 80048ac:	20800214 	ori	r2,r4,8
 80048b0:	8080030d 	sth	r2,12(r16)
 80048b4:	183feb1e 	bne	r3,zero,8004864 <__alt_data_end+0xfc004864>
 80048b8:	1100a00c 	andi	r4,r2,640
 80048bc:	01408004 	movi	r5,512
 80048c0:	217fe826 	beq	r4,r5,8004864 <__alt_data_end+0xfc004864>
 80048c4:	800b883a 	mov	r5,r16
 80048c8:	8809883a 	mov	r4,r17
 80048cc:	80073d80 	call	80073d8 <__smakebuf_r>
 80048d0:	8080030b 	ldhu	r2,12(r16)
 80048d4:	80c00417 	ldw	r3,16(r16)
 80048d8:	003fe206 	br	8004864 <__alt_data_end+0xfc004864>
 80048dc:	80800517 	ldw	r2,20(r16)
 80048e0:	80000215 	stw	zero,8(r16)
 80048e4:	0085c83a 	sub	r2,zero,r2
 80048e8:	80800615 	stw	r2,24(r16)
 80048ec:	183fe41e 	bne	r3,zero,8004880 <__alt_data_end+0xfc004880>
 80048f0:	80c0030b 	ldhu	r3,12(r16)
 80048f4:	0005883a 	mov	r2,zero
 80048f8:	1900200c 	andi	r4,r3,128
 80048fc:	203fe126 	beq	r4,zero,8004884 <__alt_data_end+0xfc004884>
 8004900:	18c01014 	ori	r3,r3,64
 8004904:	80c0030d 	sth	r3,12(r16)
 8004908:	00bfffc4 	movi	r2,-1
 800490c:	003fdd06 	br	8004884 <__alt_data_end+0xfc004884>
 8004910:	80068280 	call	8006828 <__sinit>
 8004914:	003fcd06 	br	800484c <__alt_data_end+0xfc00484c>
 8004918:	0005883a 	mov	r2,zero
 800491c:	003fd606 	br	8004878 <__alt_data_end+0xfc004878>
 8004920:	81400c17 	ldw	r5,48(r16)
 8004924:	28000626 	beq	r5,zero,8004940 <__swsetup_r+0x124>
 8004928:	80801004 	addi	r2,r16,64
 800492c:	28800326 	beq	r5,r2,800493c <__swsetup_r+0x120>
 8004930:	8809883a 	mov	r4,r17
 8004934:	800699c0 	call	800699c <_free_r>
 8004938:	8100030b 	ldhu	r4,12(r16)
 800493c:	80000c15 	stw	zero,48(r16)
 8004940:	80c00417 	ldw	r3,16(r16)
 8004944:	00bff6c4 	movi	r2,-37
 8004948:	1108703a 	and	r4,r2,r4
 800494c:	80000115 	stw	zero,4(r16)
 8004950:	80c00015 	stw	r3,0(r16)
 8004954:	003fd506 	br	80048ac <__alt_data_end+0xfc0048ac>
 8004958:	00800244 	movi	r2,9
 800495c:	88800015 	stw	r2,0(r17)
 8004960:	20801014 	ori	r2,r4,64
 8004964:	8080030d 	sth	r2,12(r16)
 8004968:	00bfffc4 	movi	r2,-1
 800496c:	003fc506 	br	8004884 <__alt_data_end+0xfc004884>

08004970 <quorem>:
 8004970:	defff204 	addi	sp,sp,-56
 8004974:	ddc00b15 	stw	r23,44(sp)
 8004978:	20800417 	ldw	r2,16(r4)
 800497c:	2dc00417 	ldw	r23,16(r5)
 8004980:	dfc00d15 	stw	ra,52(sp)
 8004984:	df000c15 	stw	fp,48(sp)
 8004988:	dd800a15 	stw	r22,40(sp)
 800498c:	dd400915 	stw	r21,36(sp)
 8004990:	dd000815 	stw	r20,32(sp)
 8004994:	dcc00715 	stw	r19,28(sp)
 8004998:	dc800615 	stw	r18,24(sp)
 800499c:	dc400515 	stw	r17,20(sp)
 80049a0:	dc000415 	stw	r16,16(sp)
 80049a4:	15c07a16 	blt	r2,r23,8004b90 <quorem+0x220>
 80049a8:	bdffffc4 	addi	r23,r23,-1
 80049ac:	bde9883a 	add	r20,r23,r23
 80049b0:	28c00504 	addi	r3,r5,20
 80049b4:	a529883a 	add	r20,r20,r20
 80049b8:	1d39883a 	add	fp,r3,r20
 80049bc:	24c00504 	addi	r19,r4,20
 80049c0:	d9400215 	stw	r5,8(sp)
 80049c4:	9d29883a 	add	r20,r19,r20
 80049c8:	e1400017 	ldw	r5,0(fp)
 80049cc:	d9000015 	stw	r4,0(sp)
 80049d0:	a1000017 	ldw	r4,0(r20)
 80049d4:	29400044 	addi	r5,r5,1
 80049d8:	d8c00115 	stw	r3,4(sp)
 80049dc:	dd000315 	stw	r20,12(sp)
 80049e0:	800c8480 	call	800c848 <__udivsi3>
 80049e4:	1025883a 	mov	r18,r2
 80049e8:	10003026 	beq	r2,zero,8004aac <quorem+0x13c>
 80049ec:	dc400117 	ldw	r17,4(sp)
 80049f0:	9829883a 	mov	r20,r19
 80049f4:	002d883a 	mov	r22,zero
 80049f8:	0021883a 	mov	r16,zero
 80049fc:	8d400017 	ldw	r21,0(r17)
 8004a00:	900b883a 	mov	r5,r18
 8004a04:	8c400104 	addi	r17,r17,4
 8004a08:	a93fffcc 	andi	r4,r21,65535
 8004a0c:	800c9040 	call	800c904 <__mulsi3>
 8004a10:	a808d43a 	srli	r4,r21,16
 8004a14:	900b883a 	mov	r5,r18
 8004a18:	15ad883a 	add	r22,r2,r22
 8004a1c:	800c9040 	call	800c904 <__mulsi3>
 8004a20:	a1000017 	ldw	r4,0(r20)
 8004a24:	b00cd43a 	srli	r6,r22,16
 8004a28:	b0ffffcc 	andi	r3,r22,65535
 8004a2c:	217fffcc 	andi	r5,r4,65535
 8004a30:	2c21883a 	add	r16,r5,r16
 8004a34:	80c7c83a 	sub	r3,r16,r3
 8004a38:	2008d43a 	srli	r4,r4,16
 8004a3c:	1185883a 	add	r2,r2,r6
 8004a40:	1821d43a 	srai	r16,r3,16
 8004a44:	117fffcc 	andi	r5,r2,65535
 8004a48:	2149c83a 	sub	r4,r4,r5
 8004a4c:	2421883a 	add	r16,r4,r16
 8004a50:	8008943a 	slli	r4,r16,16
 8004a54:	18ffffcc 	andi	r3,r3,65535
 8004a58:	102cd43a 	srli	r22,r2,16
 8004a5c:	20c8b03a 	or	r4,r4,r3
 8004a60:	a1000015 	stw	r4,0(r20)
 8004a64:	8021d43a 	srai	r16,r16,16
 8004a68:	a5000104 	addi	r20,r20,4
 8004a6c:	e47fe32e 	bgeu	fp,r17,80049fc <__alt_data_end+0xfc0049fc>
 8004a70:	d8c00317 	ldw	r3,12(sp)
 8004a74:	18800017 	ldw	r2,0(r3)
 8004a78:	10000c1e 	bne	r2,zero,8004aac <quorem+0x13c>
 8004a7c:	18bfff04 	addi	r2,r3,-4
 8004a80:	9880082e 	bgeu	r19,r2,8004aa4 <quorem+0x134>
 8004a84:	18ffff17 	ldw	r3,-4(r3)
 8004a88:	18000326 	beq	r3,zero,8004a98 <quorem+0x128>
 8004a8c:	00000506 	br	8004aa4 <quorem+0x134>
 8004a90:	10c00017 	ldw	r3,0(r2)
 8004a94:	1800031e 	bne	r3,zero,8004aa4 <quorem+0x134>
 8004a98:	10bfff04 	addi	r2,r2,-4
 8004a9c:	bdffffc4 	addi	r23,r23,-1
 8004aa0:	98bffb36 	bltu	r19,r2,8004a90 <__alt_data_end+0xfc004a90>
 8004aa4:	d8c00017 	ldw	r3,0(sp)
 8004aa8:	1dc00415 	stw	r23,16(r3)
 8004aac:	d9400217 	ldw	r5,8(sp)
 8004ab0:	d9000017 	ldw	r4,0(sp)
 8004ab4:	8008bd40 	call	8008bd4 <__mcmp>
 8004ab8:	10002816 	blt	r2,zero,8004b5c <quorem+0x1ec>
 8004abc:	dc400117 	ldw	r17,4(sp)
 8004ac0:	94800044 	addi	r18,r18,1
 8004ac4:	980d883a 	mov	r6,r19
 8004ac8:	0007883a 	mov	r3,zero
 8004acc:	31000017 	ldw	r4,0(r6)
 8004ad0:	89400017 	ldw	r5,0(r17)
 8004ad4:	31800104 	addi	r6,r6,4
 8004ad8:	20bfffcc 	andi	r2,r4,65535
 8004adc:	10c7883a 	add	r3,r2,r3
 8004ae0:	28bfffcc 	andi	r2,r5,65535
 8004ae4:	1885c83a 	sub	r2,r3,r2
 8004ae8:	280ad43a 	srli	r5,r5,16
 8004aec:	2008d43a 	srli	r4,r4,16
 8004af0:	1007d43a 	srai	r3,r2,16
 8004af4:	10bfffcc 	andi	r2,r2,65535
 8004af8:	2149c83a 	sub	r4,r4,r5
 8004afc:	20c9883a 	add	r4,r4,r3
 8004b00:	200a943a 	slli	r5,r4,16
 8004b04:	8c400104 	addi	r17,r17,4
 8004b08:	2007d43a 	srai	r3,r4,16
 8004b0c:	2884b03a 	or	r2,r5,r2
 8004b10:	30bfff15 	stw	r2,-4(r6)
 8004b14:	e47fed2e 	bgeu	fp,r17,8004acc <__alt_data_end+0xfc004acc>
 8004b18:	bdc5883a 	add	r2,r23,r23
 8004b1c:	1085883a 	add	r2,r2,r2
 8004b20:	9887883a 	add	r3,r19,r2
 8004b24:	18800017 	ldw	r2,0(r3)
 8004b28:	10000c1e 	bne	r2,zero,8004b5c <quorem+0x1ec>
 8004b2c:	18bfff04 	addi	r2,r3,-4
 8004b30:	9880082e 	bgeu	r19,r2,8004b54 <quorem+0x1e4>
 8004b34:	18ffff17 	ldw	r3,-4(r3)
 8004b38:	18000326 	beq	r3,zero,8004b48 <quorem+0x1d8>
 8004b3c:	00000506 	br	8004b54 <quorem+0x1e4>
 8004b40:	10c00017 	ldw	r3,0(r2)
 8004b44:	1800031e 	bne	r3,zero,8004b54 <quorem+0x1e4>
 8004b48:	10bfff04 	addi	r2,r2,-4
 8004b4c:	bdffffc4 	addi	r23,r23,-1
 8004b50:	98bffb36 	bltu	r19,r2,8004b40 <__alt_data_end+0xfc004b40>
 8004b54:	d8c00017 	ldw	r3,0(sp)
 8004b58:	1dc00415 	stw	r23,16(r3)
 8004b5c:	9005883a 	mov	r2,r18
 8004b60:	dfc00d17 	ldw	ra,52(sp)
 8004b64:	df000c17 	ldw	fp,48(sp)
 8004b68:	ddc00b17 	ldw	r23,44(sp)
 8004b6c:	dd800a17 	ldw	r22,40(sp)
 8004b70:	dd400917 	ldw	r21,36(sp)
 8004b74:	dd000817 	ldw	r20,32(sp)
 8004b78:	dcc00717 	ldw	r19,28(sp)
 8004b7c:	dc800617 	ldw	r18,24(sp)
 8004b80:	dc400517 	ldw	r17,20(sp)
 8004b84:	dc000417 	ldw	r16,16(sp)
 8004b88:	dec00e04 	addi	sp,sp,56
 8004b8c:	f800283a 	ret
 8004b90:	0005883a 	mov	r2,zero
 8004b94:	003ff206 	br	8004b60 <__alt_data_end+0xfc004b60>

08004b98 <_dtoa_r>:
 8004b98:	20801017 	ldw	r2,64(r4)
 8004b9c:	deffde04 	addi	sp,sp,-136
 8004ba0:	df002015 	stw	fp,128(sp)
 8004ba4:	dcc01b15 	stw	r19,108(sp)
 8004ba8:	dc801a15 	stw	r18,104(sp)
 8004bac:	dc401915 	stw	r17,100(sp)
 8004bb0:	dc001815 	stw	r16,96(sp)
 8004bb4:	dfc02115 	stw	ra,132(sp)
 8004bb8:	ddc01f15 	stw	r23,124(sp)
 8004bbc:	dd801e15 	stw	r22,120(sp)
 8004bc0:	dd401d15 	stw	r21,116(sp)
 8004bc4:	dd001c15 	stw	r20,112(sp)
 8004bc8:	d9c00315 	stw	r7,12(sp)
 8004bcc:	2039883a 	mov	fp,r4
 8004bd0:	3023883a 	mov	r17,r6
 8004bd4:	2825883a 	mov	r18,r5
 8004bd8:	dc002417 	ldw	r16,144(sp)
 8004bdc:	3027883a 	mov	r19,r6
 8004be0:	10000826 	beq	r2,zero,8004c04 <_dtoa_r+0x6c>
 8004be4:	21801117 	ldw	r6,68(r4)
 8004be8:	00c00044 	movi	r3,1
 8004bec:	100b883a 	mov	r5,r2
 8004bf0:	1986983a 	sll	r3,r3,r6
 8004bf4:	11800115 	stw	r6,4(r2)
 8004bf8:	10c00215 	stw	r3,8(r2)
 8004bfc:	80082f80 	call	80082f8 <_Bfree>
 8004c00:	e0001015 	stw	zero,64(fp)
 8004c04:	88002e16 	blt	r17,zero,8004cc0 <_dtoa_r+0x128>
 8004c08:	80000015 	stw	zero,0(r16)
 8004c0c:	889ffc2c 	andhi	r2,r17,32752
 8004c10:	00dffc34 	movhi	r3,32752
 8004c14:	10c01c26 	beq	r2,r3,8004c88 <_dtoa_r+0xf0>
 8004c18:	000d883a 	mov	r6,zero
 8004c1c:	000f883a 	mov	r7,zero
 8004c20:	9009883a 	mov	r4,r18
 8004c24:	980b883a 	mov	r5,r19
 8004c28:	800dba80 	call	800dba8 <__eqdf2>
 8004c2c:	10002b1e 	bne	r2,zero,8004cdc <_dtoa_r+0x144>
 8004c30:	d9c02317 	ldw	r7,140(sp)
 8004c34:	00800044 	movi	r2,1
 8004c38:	38800015 	stw	r2,0(r7)
 8004c3c:	d8802517 	ldw	r2,148(sp)
 8004c40:	10019e26 	beq	r2,zero,80052bc <_dtoa_r+0x724>
 8004c44:	d8c02517 	ldw	r3,148(sp)
 8004c48:	00820074 	movhi	r2,2049
 8004c4c:	10886b44 	addi	r2,r2,8621
 8004c50:	18800015 	stw	r2,0(r3)
 8004c54:	10bfffc4 	addi	r2,r2,-1
 8004c58:	dfc02117 	ldw	ra,132(sp)
 8004c5c:	df002017 	ldw	fp,128(sp)
 8004c60:	ddc01f17 	ldw	r23,124(sp)
 8004c64:	dd801e17 	ldw	r22,120(sp)
 8004c68:	dd401d17 	ldw	r21,116(sp)
 8004c6c:	dd001c17 	ldw	r20,112(sp)
 8004c70:	dcc01b17 	ldw	r19,108(sp)
 8004c74:	dc801a17 	ldw	r18,104(sp)
 8004c78:	dc401917 	ldw	r17,100(sp)
 8004c7c:	dc001817 	ldw	r16,96(sp)
 8004c80:	dec02204 	addi	sp,sp,136
 8004c84:	f800283a 	ret
 8004c88:	d8c02317 	ldw	r3,140(sp)
 8004c8c:	0089c3c4 	movi	r2,9999
 8004c90:	18800015 	stw	r2,0(r3)
 8004c94:	90017726 	beq	r18,zero,8005274 <_dtoa_r+0x6dc>
 8004c98:	00820074 	movhi	r2,2049
 8004c9c:	10887704 	addi	r2,r2,8668
 8004ca0:	d9002517 	ldw	r4,148(sp)
 8004ca4:	203fec26 	beq	r4,zero,8004c58 <__alt_data_end+0xfc004c58>
 8004ca8:	10c000c7 	ldb	r3,3(r2)
 8004cac:	1801781e 	bne	r3,zero,8005290 <_dtoa_r+0x6f8>
 8004cb0:	10c000c4 	addi	r3,r2,3
 8004cb4:	d9802517 	ldw	r6,148(sp)
 8004cb8:	30c00015 	stw	r3,0(r6)
 8004cbc:	003fe606 	br	8004c58 <__alt_data_end+0xfc004c58>
 8004cc0:	04e00034 	movhi	r19,32768
 8004cc4:	9cffffc4 	addi	r19,r19,-1
 8004cc8:	00800044 	movi	r2,1
 8004ccc:	8ce6703a 	and	r19,r17,r19
 8004cd0:	80800015 	stw	r2,0(r16)
 8004cd4:	9823883a 	mov	r17,r19
 8004cd8:	003fcc06 	br	8004c0c <__alt_data_end+0xfc004c0c>
 8004cdc:	d8800204 	addi	r2,sp,8
 8004ce0:	d8800015 	stw	r2,0(sp)
 8004ce4:	d9c00104 	addi	r7,sp,4
 8004ce8:	900b883a 	mov	r5,r18
 8004cec:	980d883a 	mov	r6,r19
 8004cf0:	e009883a 	mov	r4,fp
 8004cf4:	8820d53a 	srli	r16,r17,20
 8004cf8:	8008fa00 	call	8008fa0 <__d2b>
 8004cfc:	d8800915 	stw	r2,36(sp)
 8004d00:	8001651e 	bne	r16,zero,8005298 <_dtoa_r+0x700>
 8004d04:	dd800217 	ldw	r22,8(sp)
 8004d08:	dc000117 	ldw	r16,4(sp)
 8004d0c:	00800804 	movi	r2,32
 8004d10:	b421883a 	add	r16,r22,r16
 8004d14:	80c10c84 	addi	r3,r16,1074
 8004d18:	10c2d10e 	bge	r2,r3,8005860 <_dtoa_r+0xcc8>
 8004d1c:	00801004 	movi	r2,64
 8004d20:	81010484 	addi	r4,r16,1042
 8004d24:	10c7c83a 	sub	r3,r2,r3
 8004d28:	9108d83a 	srl	r4,r18,r4
 8004d2c:	88e2983a 	sll	r17,r17,r3
 8004d30:	2448b03a 	or	r4,r4,r17
 8004d34:	800f0c40 	call	800f0c4 <__floatunsidf>
 8004d38:	017f8434 	movhi	r5,65040
 8004d3c:	01800044 	movi	r6,1
 8004d40:	1009883a 	mov	r4,r2
 8004d44:	194b883a 	add	r5,r3,r5
 8004d48:	843fffc4 	addi	r16,r16,-1
 8004d4c:	d9801115 	stw	r6,68(sp)
 8004d50:	000d883a 	mov	r6,zero
 8004d54:	01cffe34 	movhi	r7,16376
 8004d58:	800e66c0 	call	800e66c <__subdf3>
 8004d5c:	0198dbf4 	movhi	r6,25455
 8004d60:	01cff4f4 	movhi	r7,16339
 8004d64:	3190d844 	addi	r6,r6,17249
 8004d68:	39e1e9c4 	addi	r7,r7,-30809
 8004d6c:	1009883a 	mov	r4,r2
 8004d70:	180b883a 	mov	r5,r3
 8004d74:	800de000 	call	800de00 <__muldf3>
 8004d78:	01a2d874 	movhi	r6,35681
 8004d7c:	01cff1f4 	movhi	r7,16327
 8004d80:	31b22cc4 	addi	r6,r6,-14157
 8004d84:	39e28a04 	addi	r7,r7,-30168
 8004d88:	180b883a 	mov	r5,r3
 8004d8c:	1009883a 	mov	r4,r2
 8004d90:	800c92c0 	call	800c92c <__adddf3>
 8004d94:	8009883a 	mov	r4,r16
 8004d98:	1029883a 	mov	r20,r2
 8004d9c:	1823883a 	mov	r17,r3
 8004da0:	800efe80 	call	800efe8 <__floatsidf>
 8004da4:	019427f4 	movhi	r6,20639
 8004da8:	01cff4f4 	movhi	r7,16339
 8004dac:	319e7ec4 	addi	r6,r6,31227
 8004db0:	39d104c4 	addi	r7,r7,17427
 8004db4:	1009883a 	mov	r4,r2
 8004db8:	180b883a 	mov	r5,r3
 8004dbc:	800de000 	call	800de00 <__muldf3>
 8004dc0:	100d883a 	mov	r6,r2
 8004dc4:	180f883a 	mov	r7,r3
 8004dc8:	a009883a 	mov	r4,r20
 8004dcc:	880b883a 	mov	r5,r17
 8004dd0:	800c92c0 	call	800c92c <__adddf3>
 8004dd4:	1009883a 	mov	r4,r2
 8004dd8:	180b883a 	mov	r5,r3
 8004ddc:	1029883a 	mov	r20,r2
 8004de0:	1823883a 	mov	r17,r3
 8004de4:	800ef680 	call	800ef68 <__fixdfsi>
 8004de8:	000d883a 	mov	r6,zero
 8004dec:	000f883a 	mov	r7,zero
 8004df0:	a009883a 	mov	r4,r20
 8004df4:	880b883a 	mov	r5,r17
 8004df8:	d8800515 	stw	r2,20(sp)
 8004dfc:	800dd0c0 	call	800dd0c <__ledf2>
 8004e00:	10028716 	blt	r2,zero,8005820 <_dtoa_r+0xc88>
 8004e04:	d8c00517 	ldw	r3,20(sp)
 8004e08:	00800584 	movi	r2,22
 8004e0c:	10c27536 	bltu	r2,r3,80057e4 <_dtoa_r+0xc4c>
 8004e10:	180490fa 	slli	r2,r3,3
 8004e14:	00c20074 	movhi	r3,2049
 8004e18:	18c89304 	addi	r3,r3,8780
 8004e1c:	1885883a 	add	r2,r3,r2
 8004e20:	11000017 	ldw	r4,0(r2)
 8004e24:	11400117 	ldw	r5,4(r2)
 8004e28:	900d883a 	mov	r6,r18
 8004e2c:	980f883a 	mov	r7,r19
 8004e30:	800dc300 	call	800dc30 <__gedf2>
 8004e34:	00828d0e 	bge	zero,r2,800586c <_dtoa_r+0xcd4>
 8004e38:	d9000517 	ldw	r4,20(sp)
 8004e3c:	d8000e15 	stw	zero,56(sp)
 8004e40:	213fffc4 	addi	r4,r4,-1
 8004e44:	d9000515 	stw	r4,20(sp)
 8004e48:	b42dc83a 	sub	r22,r22,r16
 8004e4c:	b5bfffc4 	addi	r22,r22,-1
 8004e50:	b0026f16 	blt	r22,zero,8005810 <_dtoa_r+0xc78>
 8004e54:	d8000815 	stw	zero,32(sp)
 8004e58:	d9c00517 	ldw	r7,20(sp)
 8004e5c:	38026416 	blt	r7,zero,80057f0 <_dtoa_r+0xc58>
 8004e60:	b1ed883a 	add	r22,r22,r7
 8004e64:	d9c00d15 	stw	r7,52(sp)
 8004e68:	d8000a15 	stw	zero,40(sp)
 8004e6c:	d9800317 	ldw	r6,12(sp)
 8004e70:	00800244 	movi	r2,9
 8004e74:	11811436 	bltu	r2,r6,80052c8 <_dtoa_r+0x730>
 8004e78:	00800144 	movi	r2,5
 8004e7c:	1184e10e 	bge	r2,r6,8006204 <_dtoa_r+0x166c>
 8004e80:	31bfff04 	addi	r6,r6,-4
 8004e84:	d9800315 	stw	r6,12(sp)
 8004e88:	0023883a 	mov	r17,zero
 8004e8c:	d9800317 	ldw	r6,12(sp)
 8004e90:	008000c4 	movi	r2,3
 8004e94:	30836726 	beq	r6,r2,8005c34 <_dtoa_r+0x109c>
 8004e98:	1183410e 	bge	r2,r6,8005ba0 <_dtoa_r+0x1008>
 8004e9c:	d9c00317 	ldw	r7,12(sp)
 8004ea0:	00800104 	movi	r2,4
 8004ea4:	38827c26 	beq	r7,r2,8005898 <_dtoa_r+0xd00>
 8004ea8:	00800144 	movi	r2,5
 8004eac:	3884c41e 	bne	r7,r2,80061c0 <_dtoa_r+0x1628>
 8004eb0:	00800044 	movi	r2,1
 8004eb4:	d8800b15 	stw	r2,44(sp)
 8004eb8:	d8c00517 	ldw	r3,20(sp)
 8004ebc:	d9002217 	ldw	r4,136(sp)
 8004ec0:	1907883a 	add	r3,r3,r4
 8004ec4:	19800044 	addi	r6,r3,1
 8004ec8:	d8c00c15 	stw	r3,48(sp)
 8004ecc:	d9800615 	stw	r6,24(sp)
 8004ed0:	0183a40e 	bge	zero,r6,8005d64 <_dtoa_r+0x11cc>
 8004ed4:	d9800617 	ldw	r6,24(sp)
 8004ed8:	3021883a 	mov	r16,r6
 8004edc:	e0001115 	stw	zero,68(fp)
 8004ee0:	008005c4 	movi	r2,23
 8004ee4:	1184c92e 	bgeu	r2,r6,800620c <_dtoa_r+0x1674>
 8004ee8:	00c00044 	movi	r3,1
 8004eec:	00800104 	movi	r2,4
 8004ef0:	1085883a 	add	r2,r2,r2
 8004ef4:	11000504 	addi	r4,r2,20
 8004ef8:	180b883a 	mov	r5,r3
 8004efc:	18c00044 	addi	r3,r3,1
 8004f00:	313ffb2e 	bgeu	r6,r4,8004ef0 <__alt_data_end+0xfc004ef0>
 8004f04:	e1401115 	stw	r5,68(fp)
 8004f08:	e009883a 	mov	r4,fp
 8004f0c:	80082500 	call	8008250 <_Balloc>
 8004f10:	d8800715 	stw	r2,28(sp)
 8004f14:	e0801015 	stw	r2,64(fp)
 8004f18:	00800384 	movi	r2,14
 8004f1c:	1400f736 	bltu	r2,r16,80052fc <_dtoa_r+0x764>
 8004f20:	8800f626 	beq	r17,zero,80052fc <_dtoa_r+0x764>
 8004f24:	d9c00517 	ldw	r7,20(sp)
 8004f28:	01c39a0e 	bge	zero,r7,8005d94 <_dtoa_r+0x11fc>
 8004f2c:	388003cc 	andi	r2,r7,15
 8004f30:	100490fa 	slli	r2,r2,3
 8004f34:	382bd13a 	srai	r21,r7,4
 8004f38:	00c20074 	movhi	r3,2049
 8004f3c:	18c89304 	addi	r3,r3,8780
 8004f40:	1885883a 	add	r2,r3,r2
 8004f44:	a8c0040c 	andi	r3,r21,16
 8004f48:	12400017 	ldw	r9,0(r2)
 8004f4c:	12000117 	ldw	r8,4(r2)
 8004f50:	18037926 	beq	r3,zero,8005d38 <_dtoa_r+0x11a0>
 8004f54:	00820074 	movhi	r2,2049
 8004f58:	10888904 	addi	r2,r2,8740
 8004f5c:	11800817 	ldw	r6,32(r2)
 8004f60:	11c00917 	ldw	r7,36(r2)
 8004f64:	9009883a 	mov	r4,r18
 8004f68:	980b883a 	mov	r5,r19
 8004f6c:	da001715 	stw	r8,92(sp)
 8004f70:	da401615 	stw	r9,88(sp)
 8004f74:	800d1d80 	call	800d1d8 <__divdf3>
 8004f78:	da001717 	ldw	r8,92(sp)
 8004f7c:	da401617 	ldw	r9,88(sp)
 8004f80:	ad4003cc 	andi	r21,r21,15
 8004f84:	040000c4 	movi	r16,3
 8004f88:	1023883a 	mov	r17,r2
 8004f8c:	1829883a 	mov	r20,r3
 8004f90:	a8001126 	beq	r21,zero,8004fd8 <_dtoa_r+0x440>
 8004f94:	05c20074 	movhi	r23,2049
 8004f98:	bdc88904 	addi	r23,r23,8740
 8004f9c:	4805883a 	mov	r2,r9
 8004fa0:	4007883a 	mov	r3,r8
 8004fa4:	a980004c 	andi	r6,r21,1
 8004fa8:	1009883a 	mov	r4,r2
 8004fac:	a82bd07a 	srai	r21,r21,1
 8004fb0:	180b883a 	mov	r5,r3
 8004fb4:	30000426 	beq	r6,zero,8004fc8 <_dtoa_r+0x430>
 8004fb8:	b9800017 	ldw	r6,0(r23)
 8004fbc:	b9c00117 	ldw	r7,4(r23)
 8004fc0:	84000044 	addi	r16,r16,1
 8004fc4:	800de000 	call	800de00 <__muldf3>
 8004fc8:	bdc00204 	addi	r23,r23,8
 8004fcc:	a83ff51e 	bne	r21,zero,8004fa4 <__alt_data_end+0xfc004fa4>
 8004fd0:	1013883a 	mov	r9,r2
 8004fd4:	1811883a 	mov	r8,r3
 8004fd8:	480d883a 	mov	r6,r9
 8004fdc:	400f883a 	mov	r7,r8
 8004fe0:	8809883a 	mov	r4,r17
 8004fe4:	a00b883a 	mov	r5,r20
 8004fe8:	800d1d80 	call	800d1d8 <__divdf3>
 8004fec:	d8800f15 	stw	r2,60(sp)
 8004ff0:	d8c01015 	stw	r3,64(sp)
 8004ff4:	d8c00e17 	ldw	r3,56(sp)
 8004ff8:	18000626 	beq	r3,zero,8005014 <_dtoa_r+0x47c>
 8004ffc:	d9000f17 	ldw	r4,60(sp)
 8005000:	d9401017 	ldw	r5,64(sp)
 8005004:	000d883a 	mov	r6,zero
 8005008:	01cffc34 	movhi	r7,16368
 800500c:	800dd0c0 	call	800dd0c <__ledf2>
 8005010:	10040b16 	blt	r2,zero,8006040 <_dtoa_r+0x14a8>
 8005014:	8009883a 	mov	r4,r16
 8005018:	800efe80 	call	800efe8 <__floatsidf>
 800501c:	d9800f17 	ldw	r6,60(sp)
 8005020:	d9c01017 	ldw	r7,64(sp)
 8005024:	1009883a 	mov	r4,r2
 8005028:	180b883a 	mov	r5,r3
 800502c:	800de000 	call	800de00 <__muldf3>
 8005030:	000d883a 	mov	r6,zero
 8005034:	01d00734 	movhi	r7,16412
 8005038:	1009883a 	mov	r4,r2
 800503c:	180b883a 	mov	r5,r3
 8005040:	800c92c0 	call	800c92c <__adddf3>
 8005044:	1021883a 	mov	r16,r2
 8005048:	d8800617 	ldw	r2,24(sp)
 800504c:	047f3034 	movhi	r17,64704
 8005050:	1c63883a 	add	r17,r3,r17
 8005054:	10031826 	beq	r2,zero,8005cb8 <_dtoa_r+0x1120>
 8005058:	d8c00517 	ldw	r3,20(sp)
 800505c:	db000617 	ldw	r12,24(sp)
 8005060:	d8c01315 	stw	r3,76(sp)
 8005064:	d9000b17 	ldw	r4,44(sp)
 8005068:	20038f26 	beq	r4,zero,8005ea8 <_dtoa_r+0x1310>
 800506c:	60bfffc4 	addi	r2,r12,-1
 8005070:	100490fa 	slli	r2,r2,3
 8005074:	00c20074 	movhi	r3,2049
 8005078:	18c89304 	addi	r3,r3,8780
 800507c:	1885883a 	add	r2,r3,r2
 8005080:	11800017 	ldw	r6,0(r2)
 8005084:	11c00117 	ldw	r7,4(r2)
 8005088:	d8800717 	ldw	r2,28(sp)
 800508c:	0009883a 	mov	r4,zero
 8005090:	014ff834 	movhi	r5,16352
 8005094:	db001615 	stw	r12,88(sp)
 8005098:	15c00044 	addi	r23,r2,1
 800509c:	800d1d80 	call	800d1d8 <__divdf3>
 80050a0:	800d883a 	mov	r6,r16
 80050a4:	880f883a 	mov	r7,r17
 80050a8:	1009883a 	mov	r4,r2
 80050ac:	180b883a 	mov	r5,r3
 80050b0:	800e66c0 	call	800e66c <__subdf3>
 80050b4:	d9401017 	ldw	r5,64(sp)
 80050b8:	d9000f17 	ldw	r4,60(sp)
 80050bc:	102b883a 	mov	r21,r2
 80050c0:	d8c01215 	stw	r3,72(sp)
 80050c4:	800ef680 	call	800ef68 <__fixdfsi>
 80050c8:	1009883a 	mov	r4,r2
 80050cc:	1029883a 	mov	r20,r2
 80050d0:	800efe80 	call	800efe8 <__floatsidf>
 80050d4:	d9000f17 	ldw	r4,60(sp)
 80050d8:	d9401017 	ldw	r5,64(sp)
 80050dc:	100d883a 	mov	r6,r2
 80050e0:	180f883a 	mov	r7,r3
 80050e4:	800e66c0 	call	800e66c <__subdf3>
 80050e8:	1823883a 	mov	r17,r3
 80050ec:	d8c00717 	ldw	r3,28(sp)
 80050f0:	d9401217 	ldw	r5,72(sp)
 80050f4:	a2000c04 	addi	r8,r20,48
 80050f8:	1021883a 	mov	r16,r2
 80050fc:	1a000005 	stb	r8,0(r3)
 8005100:	800d883a 	mov	r6,r16
 8005104:	880f883a 	mov	r7,r17
 8005108:	a809883a 	mov	r4,r21
 800510c:	4029883a 	mov	r20,r8
 8005110:	800dc300 	call	800dc30 <__gedf2>
 8005114:	00841d16 	blt	zero,r2,800618c <_dtoa_r+0x15f4>
 8005118:	800d883a 	mov	r6,r16
 800511c:	880f883a 	mov	r7,r17
 8005120:	0009883a 	mov	r4,zero
 8005124:	014ffc34 	movhi	r5,16368
 8005128:	800e66c0 	call	800e66c <__subdf3>
 800512c:	d9401217 	ldw	r5,72(sp)
 8005130:	100d883a 	mov	r6,r2
 8005134:	180f883a 	mov	r7,r3
 8005138:	a809883a 	mov	r4,r21
 800513c:	800dc300 	call	800dc30 <__gedf2>
 8005140:	db001617 	ldw	r12,88(sp)
 8005144:	00840e16 	blt	zero,r2,8006180 <_dtoa_r+0x15e8>
 8005148:	00800044 	movi	r2,1
 800514c:	13006b0e 	bge	r2,r12,80052fc <_dtoa_r+0x764>
 8005150:	d9000717 	ldw	r4,28(sp)
 8005154:	dd800f15 	stw	r22,60(sp)
 8005158:	dcc01015 	stw	r19,64(sp)
 800515c:	2319883a 	add	r12,r4,r12
 8005160:	dcc01217 	ldw	r19,72(sp)
 8005164:	602d883a 	mov	r22,r12
 8005168:	dc801215 	stw	r18,72(sp)
 800516c:	b825883a 	mov	r18,r23
 8005170:	00000906 	br	8005198 <_dtoa_r+0x600>
 8005174:	800e66c0 	call	800e66c <__subdf3>
 8005178:	a80d883a 	mov	r6,r21
 800517c:	980f883a 	mov	r7,r19
 8005180:	1009883a 	mov	r4,r2
 8005184:	180b883a 	mov	r5,r3
 8005188:	800dd0c0 	call	800dd0c <__ledf2>
 800518c:	1003e816 	blt	r2,zero,8006130 <_dtoa_r+0x1598>
 8005190:	b825883a 	mov	r18,r23
 8005194:	bd83e926 	beq	r23,r22,800613c <_dtoa_r+0x15a4>
 8005198:	a809883a 	mov	r4,r21
 800519c:	980b883a 	mov	r5,r19
 80051a0:	000d883a 	mov	r6,zero
 80051a4:	01d00934 	movhi	r7,16420
 80051a8:	800de000 	call	800de00 <__muldf3>
 80051ac:	000d883a 	mov	r6,zero
 80051b0:	01d00934 	movhi	r7,16420
 80051b4:	8009883a 	mov	r4,r16
 80051b8:	880b883a 	mov	r5,r17
 80051bc:	102b883a 	mov	r21,r2
 80051c0:	1827883a 	mov	r19,r3
 80051c4:	800de000 	call	800de00 <__muldf3>
 80051c8:	180b883a 	mov	r5,r3
 80051cc:	1009883a 	mov	r4,r2
 80051d0:	1821883a 	mov	r16,r3
 80051d4:	1023883a 	mov	r17,r2
 80051d8:	800ef680 	call	800ef68 <__fixdfsi>
 80051dc:	1009883a 	mov	r4,r2
 80051e0:	1029883a 	mov	r20,r2
 80051e4:	800efe80 	call	800efe8 <__floatsidf>
 80051e8:	8809883a 	mov	r4,r17
 80051ec:	800b883a 	mov	r5,r16
 80051f0:	100d883a 	mov	r6,r2
 80051f4:	180f883a 	mov	r7,r3
 80051f8:	800e66c0 	call	800e66c <__subdf3>
 80051fc:	a5000c04 	addi	r20,r20,48
 8005200:	a80d883a 	mov	r6,r21
 8005204:	980f883a 	mov	r7,r19
 8005208:	1009883a 	mov	r4,r2
 800520c:	180b883a 	mov	r5,r3
 8005210:	95000005 	stb	r20,0(r18)
 8005214:	1021883a 	mov	r16,r2
 8005218:	1823883a 	mov	r17,r3
 800521c:	800dd0c0 	call	800dd0c <__ledf2>
 8005220:	bdc00044 	addi	r23,r23,1
 8005224:	800d883a 	mov	r6,r16
 8005228:	880f883a 	mov	r7,r17
 800522c:	0009883a 	mov	r4,zero
 8005230:	014ffc34 	movhi	r5,16368
 8005234:	103fcf0e 	bge	r2,zero,8005174 <__alt_data_end+0xfc005174>
 8005238:	d8c01317 	ldw	r3,76(sp)
 800523c:	d8c00515 	stw	r3,20(sp)
 8005240:	d9400917 	ldw	r5,36(sp)
 8005244:	e009883a 	mov	r4,fp
 8005248:	80082f80 	call	80082f8 <_Bfree>
 800524c:	d9000517 	ldw	r4,20(sp)
 8005250:	d9802317 	ldw	r6,140(sp)
 8005254:	d9c02517 	ldw	r7,148(sp)
 8005258:	b8000005 	stb	zero,0(r23)
 800525c:	20800044 	addi	r2,r4,1
 8005260:	30800015 	stw	r2,0(r6)
 8005264:	3802aa26 	beq	r7,zero,8005d10 <_dtoa_r+0x1178>
 8005268:	3dc00015 	stw	r23,0(r7)
 800526c:	d8800717 	ldw	r2,28(sp)
 8005270:	003e7906 	br	8004c58 <__alt_data_end+0xfc004c58>
 8005274:	00800434 	movhi	r2,16
 8005278:	10bfffc4 	addi	r2,r2,-1
 800527c:	88a2703a 	and	r17,r17,r2
 8005280:	883e851e 	bne	r17,zero,8004c98 <__alt_data_end+0xfc004c98>
 8005284:	00820074 	movhi	r2,2049
 8005288:	10887404 	addi	r2,r2,8656
 800528c:	003e8406 	br	8004ca0 <__alt_data_end+0xfc004ca0>
 8005290:	10c00204 	addi	r3,r2,8
 8005294:	003e8706 	br	8004cb4 <__alt_data_end+0xfc004cb4>
 8005298:	01400434 	movhi	r5,16
 800529c:	297fffc4 	addi	r5,r5,-1
 80052a0:	994a703a 	and	r5,r19,r5
 80052a4:	9009883a 	mov	r4,r18
 80052a8:	843f0044 	addi	r16,r16,-1023
 80052ac:	294ffc34 	orhi	r5,r5,16368
 80052b0:	dd800217 	ldw	r22,8(sp)
 80052b4:	d8001115 	stw	zero,68(sp)
 80052b8:	003ea506 	br	8004d50 <__alt_data_end+0xfc004d50>
 80052bc:	00820074 	movhi	r2,2049
 80052c0:	10886b04 	addi	r2,r2,8620
 80052c4:	003e6406 	br	8004c58 <__alt_data_end+0xfc004c58>
 80052c8:	e0001115 	stw	zero,68(fp)
 80052cc:	000b883a 	mov	r5,zero
 80052d0:	e009883a 	mov	r4,fp
 80052d4:	80082500 	call	8008250 <_Balloc>
 80052d8:	01bfffc4 	movi	r6,-1
 80052dc:	01c00044 	movi	r7,1
 80052e0:	d8800715 	stw	r2,28(sp)
 80052e4:	d9800c15 	stw	r6,48(sp)
 80052e8:	e0801015 	stw	r2,64(fp)
 80052ec:	d8000315 	stw	zero,12(sp)
 80052f0:	d9c00b15 	stw	r7,44(sp)
 80052f4:	d9800615 	stw	r6,24(sp)
 80052f8:	d8002215 	stw	zero,136(sp)
 80052fc:	d8800117 	ldw	r2,4(sp)
 8005300:	10008916 	blt	r2,zero,8005528 <_dtoa_r+0x990>
 8005304:	d9000517 	ldw	r4,20(sp)
 8005308:	00c00384 	movi	r3,14
 800530c:	19008616 	blt	r3,r4,8005528 <_dtoa_r+0x990>
 8005310:	200490fa 	slli	r2,r4,3
 8005314:	00c20074 	movhi	r3,2049
 8005318:	d9802217 	ldw	r6,136(sp)
 800531c:	18c89304 	addi	r3,r3,8780
 8005320:	1885883a 	add	r2,r3,r2
 8005324:	14000017 	ldw	r16,0(r2)
 8005328:	14400117 	ldw	r17,4(r2)
 800532c:	30016316 	blt	r6,zero,80058bc <_dtoa_r+0xd24>
 8005330:	800d883a 	mov	r6,r16
 8005334:	880f883a 	mov	r7,r17
 8005338:	9009883a 	mov	r4,r18
 800533c:	980b883a 	mov	r5,r19
 8005340:	800d1d80 	call	800d1d8 <__divdf3>
 8005344:	180b883a 	mov	r5,r3
 8005348:	1009883a 	mov	r4,r2
 800534c:	800ef680 	call	800ef68 <__fixdfsi>
 8005350:	1009883a 	mov	r4,r2
 8005354:	102b883a 	mov	r21,r2
 8005358:	800efe80 	call	800efe8 <__floatsidf>
 800535c:	800d883a 	mov	r6,r16
 8005360:	880f883a 	mov	r7,r17
 8005364:	1009883a 	mov	r4,r2
 8005368:	180b883a 	mov	r5,r3
 800536c:	800de000 	call	800de00 <__muldf3>
 8005370:	100d883a 	mov	r6,r2
 8005374:	180f883a 	mov	r7,r3
 8005378:	9009883a 	mov	r4,r18
 800537c:	980b883a 	mov	r5,r19
 8005380:	800e66c0 	call	800e66c <__subdf3>
 8005384:	d9c00717 	ldw	r7,28(sp)
 8005388:	1009883a 	mov	r4,r2
 800538c:	a8800c04 	addi	r2,r21,48
 8005390:	38800005 	stb	r2,0(r7)
 8005394:	3dc00044 	addi	r23,r7,1
 8005398:	d9c00617 	ldw	r7,24(sp)
 800539c:	01800044 	movi	r6,1
 80053a0:	180b883a 	mov	r5,r3
 80053a4:	2005883a 	mov	r2,r4
 80053a8:	39803826 	beq	r7,r6,800548c <_dtoa_r+0x8f4>
 80053ac:	000d883a 	mov	r6,zero
 80053b0:	01d00934 	movhi	r7,16420
 80053b4:	800de000 	call	800de00 <__muldf3>
 80053b8:	000d883a 	mov	r6,zero
 80053bc:	000f883a 	mov	r7,zero
 80053c0:	1009883a 	mov	r4,r2
 80053c4:	180b883a 	mov	r5,r3
 80053c8:	1025883a 	mov	r18,r2
 80053cc:	1827883a 	mov	r19,r3
 80053d0:	800dba80 	call	800dba8 <__eqdf2>
 80053d4:	103f9a26 	beq	r2,zero,8005240 <__alt_data_end+0xfc005240>
 80053d8:	d9c00617 	ldw	r7,24(sp)
 80053dc:	d8c00717 	ldw	r3,28(sp)
 80053e0:	b829883a 	mov	r20,r23
 80053e4:	38bfffc4 	addi	r2,r7,-1
 80053e8:	18ad883a 	add	r22,r3,r2
 80053ec:	00000a06 	br	8005418 <_dtoa_r+0x880>
 80053f0:	800de000 	call	800de00 <__muldf3>
 80053f4:	000d883a 	mov	r6,zero
 80053f8:	000f883a 	mov	r7,zero
 80053fc:	1009883a 	mov	r4,r2
 8005400:	180b883a 	mov	r5,r3
 8005404:	1025883a 	mov	r18,r2
 8005408:	1827883a 	mov	r19,r3
 800540c:	b829883a 	mov	r20,r23
 8005410:	800dba80 	call	800dba8 <__eqdf2>
 8005414:	103f8a26 	beq	r2,zero,8005240 <__alt_data_end+0xfc005240>
 8005418:	800d883a 	mov	r6,r16
 800541c:	880f883a 	mov	r7,r17
 8005420:	9009883a 	mov	r4,r18
 8005424:	980b883a 	mov	r5,r19
 8005428:	800d1d80 	call	800d1d8 <__divdf3>
 800542c:	180b883a 	mov	r5,r3
 8005430:	1009883a 	mov	r4,r2
 8005434:	800ef680 	call	800ef68 <__fixdfsi>
 8005438:	1009883a 	mov	r4,r2
 800543c:	102b883a 	mov	r21,r2
 8005440:	800efe80 	call	800efe8 <__floatsidf>
 8005444:	800d883a 	mov	r6,r16
 8005448:	880f883a 	mov	r7,r17
 800544c:	1009883a 	mov	r4,r2
 8005450:	180b883a 	mov	r5,r3
 8005454:	800de000 	call	800de00 <__muldf3>
 8005458:	100d883a 	mov	r6,r2
 800545c:	180f883a 	mov	r7,r3
 8005460:	9009883a 	mov	r4,r18
 8005464:	980b883a 	mov	r5,r19
 8005468:	800e66c0 	call	800e66c <__subdf3>
 800546c:	aa000c04 	addi	r8,r21,48
 8005470:	a2000005 	stb	r8,0(r20)
 8005474:	000d883a 	mov	r6,zero
 8005478:	01d00934 	movhi	r7,16420
 800547c:	1009883a 	mov	r4,r2
 8005480:	180b883a 	mov	r5,r3
 8005484:	a5c00044 	addi	r23,r20,1
 8005488:	b53fd91e 	bne	r22,r20,80053f0 <__alt_data_end+0xfc0053f0>
 800548c:	100d883a 	mov	r6,r2
 8005490:	180f883a 	mov	r7,r3
 8005494:	1009883a 	mov	r4,r2
 8005498:	180b883a 	mov	r5,r3
 800549c:	800c92c0 	call	800c92c <__adddf3>
 80054a0:	100d883a 	mov	r6,r2
 80054a4:	180f883a 	mov	r7,r3
 80054a8:	8009883a 	mov	r4,r16
 80054ac:	880b883a 	mov	r5,r17
 80054b0:	1027883a 	mov	r19,r2
 80054b4:	1825883a 	mov	r18,r3
 80054b8:	800dd0c0 	call	800dd0c <__ledf2>
 80054bc:	10000816 	blt	r2,zero,80054e0 <_dtoa_r+0x948>
 80054c0:	980d883a 	mov	r6,r19
 80054c4:	900f883a 	mov	r7,r18
 80054c8:	8009883a 	mov	r4,r16
 80054cc:	880b883a 	mov	r5,r17
 80054d0:	800dba80 	call	800dba8 <__eqdf2>
 80054d4:	103f5a1e 	bne	r2,zero,8005240 <__alt_data_end+0xfc005240>
 80054d8:	ad40004c 	andi	r21,r21,1
 80054dc:	a83f5826 	beq	r21,zero,8005240 <__alt_data_end+0xfc005240>
 80054e0:	bd3fffc3 	ldbu	r20,-1(r23)
 80054e4:	b8bfffc4 	addi	r2,r23,-1
 80054e8:	1007883a 	mov	r3,r2
 80054ec:	01400e44 	movi	r5,57
 80054f0:	d9800717 	ldw	r6,28(sp)
 80054f4:	00000506 	br	800550c <_dtoa_r+0x974>
 80054f8:	18ffffc4 	addi	r3,r3,-1
 80054fc:	11824726 	beq	r2,r6,8005e1c <_dtoa_r+0x1284>
 8005500:	1d000003 	ldbu	r20,0(r3)
 8005504:	102f883a 	mov	r23,r2
 8005508:	10bfffc4 	addi	r2,r2,-1
 800550c:	a1003fcc 	andi	r4,r20,255
 8005510:	2100201c 	xori	r4,r4,128
 8005514:	213fe004 	addi	r4,r4,-128
 8005518:	217ff726 	beq	r4,r5,80054f8 <__alt_data_end+0xfc0054f8>
 800551c:	a2000044 	addi	r8,r20,1
 8005520:	12000005 	stb	r8,0(r2)
 8005524:	003f4606 	br	8005240 <__alt_data_end+0xfc005240>
 8005528:	d9000b17 	ldw	r4,44(sp)
 800552c:	2000c826 	beq	r4,zero,8005850 <_dtoa_r+0xcb8>
 8005530:	d9800317 	ldw	r6,12(sp)
 8005534:	00c00044 	movi	r3,1
 8005538:	1980f90e 	bge	r3,r6,8005920 <_dtoa_r+0xd88>
 800553c:	d8800617 	ldw	r2,24(sp)
 8005540:	d8c00a17 	ldw	r3,40(sp)
 8005544:	157fffc4 	addi	r21,r2,-1
 8005548:	1d41f316 	blt	r3,r21,8005d18 <_dtoa_r+0x1180>
 800554c:	1d6bc83a 	sub	r21,r3,r21
 8005550:	d9c00617 	ldw	r7,24(sp)
 8005554:	3802aa16 	blt	r7,zero,8006000 <_dtoa_r+0x1468>
 8005558:	dd000817 	ldw	r20,32(sp)
 800555c:	d8800617 	ldw	r2,24(sp)
 8005560:	d8c00817 	ldw	r3,32(sp)
 8005564:	01400044 	movi	r5,1
 8005568:	e009883a 	mov	r4,fp
 800556c:	1887883a 	add	r3,r3,r2
 8005570:	d8c00815 	stw	r3,32(sp)
 8005574:	b0ad883a 	add	r22,r22,r2
 8005578:	80086840 	call	8008684 <__i2b>
 800557c:	1023883a 	mov	r17,r2
 8005580:	a0000826 	beq	r20,zero,80055a4 <_dtoa_r+0xa0c>
 8005584:	0580070e 	bge	zero,r22,80055a4 <_dtoa_r+0xa0c>
 8005588:	a005883a 	mov	r2,r20
 800558c:	b500b916 	blt	r22,r20,8005874 <_dtoa_r+0xcdc>
 8005590:	d9000817 	ldw	r4,32(sp)
 8005594:	a0a9c83a 	sub	r20,r20,r2
 8005598:	b0adc83a 	sub	r22,r22,r2
 800559c:	2089c83a 	sub	r4,r4,r2
 80055a0:	d9000815 	stw	r4,32(sp)
 80055a4:	d9800a17 	ldw	r6,40(sp)
 80055a8:	0181810e 	bge	zero,r6,8005bb0 <_dtoa_r+0x1018>
 80055ac:	d9c00b17 	ldw	r7,44(sp)
 80055b0:	3800b326 	beq	r7,zero,8005880 <_dtoa_r+0xce8>
 80055b4:	a800b226 	beq	r21,zero,8005880 <_dtoa_r+0xce8>
 80055b8:	880b883a 	mov	r5,r17
 80055bc:	a80d883a 	mov	r6,r21
 80055c0:	e009883a 	mov	r4,fp
 80055c4:	800894c0 	call	800894c <__pow5mult>
 80055c8:	d9800917 	ldw	r6,36(sp)
 80055cc:	100b883a 	mov	r5,r2
 80055d0:	e009883a 	mov	r4,fp
 80055d4:	1023883a 	mov	r17,r2
 80055d8:	80086c00 	call	80086c0 <__multiply>
 80055dc:	1021883a 	mov	r16,r2
 80055e0:	d8800a17 	ldw	r2,40(sp)
 80055e4:	d9400917 	ldw	r5,36(sp)
 80055e8:	e009883a 	mov	r4,fp
 80055ec:	1545c83a 	sub	r2,r2,r21
 80055f0:	d8800a15 	stw	r2,40(sp)
 80055f4:	80082f80 	call	80082f8 <_Bfree>
 80055f8:	d8c00a17 	ldw	r3,40(sp)
 80055fc:	18009f1e 	bne	r3,zero,800587c <_dtoa_r+0xce4>
 8005600:	05c00044 	movi	r23,1
 8005604:	e009883a 	mov	r4,fp
 8005608:	b80b883a 	mov	r5,r23
 800560c:	80086840 	call	8008684 <__i2b>
 8005610:	d9000d17 	ldw	r4,52(sp)
 8005614:	102b883a 	mov	r21,r2
 8005618:	2000ce26 	beq	r4,zero,8005954 <_dtoa_r+0xdbc>
 800561c:	200d883a 	mov	r6,r4
 8005620:	100b883a 	mov	r5,r2
 8005624:	e009883a 	mov	r4,fp
 8005628:	800894c0 	call	800894c <__pow5mult>
 800562c:	d9800317 	ldw	r6,12(sp)
 8005630:	102b883a 	mov	r21,r2
 8005634:	b981810e 	bge	r23,r6,8005c3c <_dtoa_r+0x10a4>
 8005638:	0027883a 	mov	r19,zero
 800563c:	a8800417 	ldw	r2,16(r21)
 8005640:	05c00804 	movi	r23,32
 8005644:	10800104 	addi	r2,r2,4
 8005648:	1085883a 	add	r2,r2,r2
 800564c:	1085883a 	add	r2,r2,r2
 8005650:	a885883a 	add	r2,r21,r2
 8005654:	11000017 	ldw	r4,0(r2)
 8005658:	800856c0 	call	800856c <__hi0bits>
 800565c:	b885c83a 	sub	r2,r23,r2
 8005660:	1585883a 	add	r2,r2,r22
 8005664:	108007cc 	andi	r2,r2,31
 8005668:	1000b326 	beq	r2,zero,8005938 <_dtoa_r+0xda0>
 800566c:	00c00804 	movi	r3,32
 8005670:	1887c83a 	sub	r3,r3,r2
 8005674:	01000104 	movi	r4,4
 8005678:	20c2cd0e 	bge	r4,r3,80061b0 <_dtoa_r+0x1618>
 800567c:	00c00704 	movi	r3,28
 8005680:	1885c83a 	sub	r2,r3,r2
 8005684:	d8c00817 	ldw	r3,32(sp)
 8005688:	a0a9883a 	add	r20,r20,r2
 800568c:	b0ad883a 	add	r22,r22,r2
 8005690:	1887883a 	add	r3,r3,r2
 8005694:	d8c00815 	stw	r3,32(sp)
 8005698:	d9800817 	ldw	r6,32(sp)
 800569c:	0180040e 	bge	zero,r6,80056b0 <_dtoa_r+0xb18>
 80056a0:	800b883a 	mov	r5,r16
 80056a4:	e009883a 	mov	r4,fp
 80056a8:	8008a8c0 	call	8008a8c <__lshift>
 80056ac:	1021883a 	mov	r16,r2
 80056b0:	0580050e 	bge	zero,r22,80056c8 <_dtoa_r+0xb30>
 80056b4:	a80b883a 	mov	r5,r21
 80056b8:	b00d883a 	mov	r6,r22
 80056bc:	e009883a 	mov	r4,fp
 80056c0:	8008a8c0 	call	8008a8c <__lshift>
 80056c4:	102b883a 	mov	r21,r2
 80056c8:	d9c00e17 	ldw	r7,56(sp)
 80056cc:	3801211e 	bne	r7,zero,8005b54 <_dtoa_r+0xfbc>
 80056d0:	d9800617 	ldw	r6,24(sp)
 80056d4:	0181380e 	bge	zero,r6,8005bb8 <_dtoa_r+0x1020>
 80056d8:	d8c00b17 	ldw	r3,44(sp)
 80056dc:	1800ab1e 	bne	r3,zero,800598c <_dtoa_r+0xdf4>
 80056e0:	dc800717 	ldw	r18,28(sp)
 80056e4:	dcc00617 	ldw	r19,24(sp)
 80056e8:	9029883a 	mov	r20,r18
 80056ec:	00000206 	br	80056f8 <_dtoa_r+0xb60>
 80056f0:	80083200 	call	8008320 <__multadd>
 80056f4:	1021883a 	mov	r16,r2
 80056f8:	a80b883a 	mov	r5,r21
 80056fc:	8009883a 	mov	r4,r16
 8005700:	80049700 	call	8004970 <quorem>
 8005704:	10800c04 	addi	r2,r2,48
 8005708:	90800005 	stb	r2,0(r18)
 800570c:	94800044 	addi	r18,r18,1
 8005710:	9507c83a 	sub	r3,r18,r20
 8005714:	000f883a 	mov	r7,zero
 8005718:	01800284 	movi	r6,10
 800571c:	800b883a 	mov	r5,r16
 8005720:	e009883a 	mov	r4,fp
 8005724:	1cfff216 	blt	r3,r19,80056f0 <__alt_data_end+0xfc0056f0>
 8005728:	1011883a 	mov	r8,r2
 800572c:	d8800617 	ldw	r2,24(sp)
 8005730:	0082370e 	bge	zero,r2,8006010 <_dtoa_r+0x1478>
 8005734:	d9000717 	ldw	r4,28(sp)
 8005738:	0025883a 	mov	r18,zero
 800573c:	20af883a 	add	r23,r4,r2
 8005740:	01800044 	movi	r6,1
 8005744:	800b883a 	mov	r5,r16
 8005748:	e009883a 	mov	r4,fp
 800574c:	da001715 	stw	r8,92(sp)
 8005750:	8008a8c0 	call	8008a8c <__lshift>
 8005754:	a80b883a 	mov	r5,r21
 8005758:	1009883a 	mov	r4,r2
 800575c:	d8800915 	stw	r2,36(sp)
 8005760:	8008bd40 	call	8008bd4 <__mcmp>
 8005764:	da001717 	ldw	r8,92(sp)
 8005768:	0081800e 	bge	zero,r2,8005d6c <_dtoa_r+0x11d4>
 800576c:	b93fffc3 	ldbu	r4,-1(r23)
 8005770:	b8bfffc4 	addi	r2,r23,-1
 8005774:	1007883a 	mov	r3,r2
 8005778:	01800e44 	movi	r6,57
 800577c:	d9c00717 	ldw	r7,28(sp)
 8005780:	00000506 	br	8005798 <_dtoa_r+0xc00>
 8005784:	18ffffc4 	addi	r3,r3,-1
 8005788:	11c12326 	beq	r2,r7,8005c18 <_dtoa_r+0x1080>
 800578c:	19000003 	ldbu	r4,0(r3)
 8005790:	102f883a 	mov	r23,r2
 8005794:	10bfffc4 	addi	r2,r2,-1
 8005798:	21403fcc 	andi	r5,r4,255
 800579c:	2940201c 	xori	r5,r5,128
 80057a0:	297fe004 	addi	r5,r5,-128
 80057a4:	29bff726 	beq	r5,r6,8005784 <__alt_data_end+0xfc005784>
 80057a8:	21000044 	addi	r4,r4,1
 80057ac:	11000005 	stb	r4,0(r2)
 80057b0:	a80b883a 	mov	r5,r21
 80057b4:	e009883a 	mov	r4,fp
 80057b8:	80082f80 	call	80082f8 <_Bfree>
 80057bc:	883ea026 	beq	r17,zero,8005240 <__alt_data_end+0xfc005240>
 80057c0:	90000426 	beq	r18,zero,80057d4 <_dtoa_r+0xc3c>
 80057c4:	94400326 	beq	r18,r17,80057d4 <_dtoa_r+0xc3c>
 80057c8:	900b883a 	mov	r5,r18
 80057cc:	e009883a 	mov	r4,fp
 80057d0:	80082f80 	call	80082f8 <_Bfree>
 80057d4:	880b883a 	mov	r5,r17
 80057d8:	e009883a 	mov	r4,fp
 80057dc:	80082f80 	call	80082f8 <_Bfree>
 80057e0:	003e9706 	br	8005240 <__alt_data_end+0xfc005240>
 80057e4:	01800044 	movi	r6,1
 80057e8:	d9800e15 	stw	r6,56(sp)
 80057ec:	003d9606 	br	8004e48 <__alt_data_end+0xfc004e48>
 80057f0:	d8800817 	ldw	r2,32(sp)
 80057f4:	d8c00517 	ldw	r3,20(sp)
 80057f8:	d8000d15 	stw	zero,52(sp)
 80057fc:	10c5c83a 	sub	r2,r2,r3
 8005800:	00c9c83a 	sub	r4,zero,r3
 8005804:	d8800815 	stw	r2,32(sp)
 8005808:	d9000a15 	stw	r4,40(sp)
 800580c:	003d9706 	br	8004e6c <__alt_data_end+0xfc004e6c>
 8005810:	05adc83a 	sub	r22,zero,r22
 8005814:	dd800815 	stw	r22,32(sp)
 8005818:	002d883a 	mov	r22,zero
 800581c:	003d8e06 	br	8004e58 <__alt_data_end+0xfc004e58>
 8005820:	d9000517 	ldw	r4,20(sp)
 8005824:	800efe80 	call	800efe8 <__floatsidf>
 8005828:	100d883a 	mov	r6,r2
 800582c:	180f883a 	mov	r7,r3
 8005830:	a009883a 	mov	r4,r20
 8005834:	880b883a 	mov	r5,r17
 8005838:	800dba80 	call	800dba8 <__eqdf2>
 800583c:	103d7126 	beq	r2,zero,8004e04 <__alt_data_end+0xfc004e04>
 8005840:	d9c00517 	ldw	r7,20(sp)
 8005844:	39ffffc4 	addi	r7,r7,-1
 8005848:	d9c00515 	stw	r7,20(sp)
 800584c:	003d6d06 	br	8004e04 <__alt_data_end+0xfc004e04>
 8005850:	dd400a17 	ldw	r21,40(sp)
 8005854:	dd000817 	ldw	r20,32(sp)
 8005858:	0023883a 	mov	r17,zero
 800585c:	003f4806 	br	8005580 <__alt_data_end+0xfc005580>
 8005860:	10e3c83a 	sub	r17,r2,r3
 8005864:	9448983a 	sll	r4,r18,r17
 8005868:	003d3206 	br	8004d34 <__alt_data_end+0xfc004d34>
 800586c:	d8000e15 	stw	zero,56(sp)
 8005870:	003d7506 	br	8004e48 <__alt_data_end+0xfc004e48>
 8005874:	b005883a 	mov	r2,r22
 8005878:	003f4506 	br	8005590 <__alt_data_end+0xfc005590>
 800587c:	dc000915 	stw	r16,36(sp)
 8005880:	d9800a17 	ldw	r6,40(sp)
 8005884:	d9400917 	ldw	r5,36(sp)
 8005888:	e009883a 	mov	r4,fp
 800588c:	800894c0 	call	800894c <__pow5mult>
 8005890:	1021883a 	mov	r16,r2
 8005894:	003f5a06 	br	8005600 <__alt_data_end+0xfc005600>
 8005898:	01c00044 	movi	r7,1
 800589c:	d9c00b15 	stw	r7,44(sp)
 80058a0:	d8802217 	ldw	r2,136(sp)
 80058a4:	0081280e 	bge	zero,r2,8005d48 <_dtoa_r+0x11b0>
 80058a8:	100d883a 	mov	r6,r2
 80058ac:	1021883a 	mov	r16,r2
 80058b0:	d8800c15 	stw	r2,48(sp)
 80058b4:	d8800615 	stw	r2,24(sp)
 80058b8:	003d8806 	br	8004edc <__alt_data_end+0xfc004edc>
 80058bc:	d8800617 	ldw	r2,24(sp)
 80058c0:	00be9b16 	blt	zero,r2,8005330 <__alt_data_end+0xfc005330>
 80058c4:	10010f1e 	bne	r2,zero,8005d04 <_dtoa_r+0x116c>
 80058c8:	880b883a 	mov	r5,r17
 80058cc:	000d883a 	mov	r6,zero
 80058d0:	01d00534 	movhi	r7,16404
 80058d4:	8009883a 	mov	r4,r16
 80058d8:	800de000 	call	800de00 <__muldf3>
 80058dc:	900d883a 	mov	r6,r18
 80058e0:	980f883a 	mov	r7,r19
 80058e4:	1009883a 	mov	r4,r2
 80058e8:	180b883a 	mov	r5,r3
 80058ec:	800dc300 	call	800dc30 <__gedf2>
 80058f0:	002b883a 	mov	r21,zero
 80058f4:	0023883a 	mov	r17,zero
 80058f8:	1000bf16 	blt	r2,zero,8005bf8 <_dtoa_r+0x1060>
 80058fc:	d9802217 	ldw	r6,136(sp)
 8005900:	ddc00717 	ldw	r23,28(sp)
 8005904:	018c303a 	nor	r6,zero,r6
 8005908:	d9800515 	stw	r6,20(sp)
 800590c:	a80b883a 	mov	r5,r21
 8005910:	e009883a 	mov	r4,fp
 8005914:	80082f80 	call	80082f8 <_Bfree>
 8005918:	883e4926 	beq	r17,zero,8005240 <__alt_data_end+0xfc005240>
 800591c:	003fad06 	br	80057d4 <__alt_data_end+0xfc0057d4>
 8005920:	d9c01117 	ldw	r7,68(sp)
 8005924:	3801bc26 	beq	r7,zero,8006018 <_dtoa_r+0x1480>
 8005928:	10810cc4 	addi	r2,r2,1075
 800592c:	dd400a17 	ldw	r21,40(sp)
 8005930:	dd000817 	ldw	r20,32(sp)
 8005934:	003f0a06 	br	8005560 <__alt_data_end+0xfc005560>
 8005938:	00800704 	movi	r2,28
 800593c:	d9000817 	ldw	r4,32(sp)
 8005940:	a0a9883a 	add	r20,r20,r2
 8005944:	b0ad883a 	add	r22,r22,r2
 8005948:	2089883a 	add	r4,r4,r2
 800594c:	d9000815 	stw	r4,32(sp)
 8005950:	003f5106 	br	8005698 <__alt_data_end+0xfc005698>
 8005954:	d8c00317 	ldw	r3,12(sp)
 8005958:	b8c1fc0e 	bge	r23,r3,800614c <_dtoa_r+0x15b4>
 800595c:	0027883a 	mov	r19,zero
 8005960:	b805883a 	mov	r2,r23
 8005964:	003f3e06 	br	8005660 <__alt_data_end+0xfc005660>
 8005968:	880b883a 	mov	r5,r17
 800596c:	e009883a 	mov	r4,fp
 8005970:	000f883a 	mov	r7,zero
 8005974:	01800284 	movi	r6,10
 8005978:	80083200 	call	8008320 <__multadd>
 800597c:	d9000c17 	ldw	r4,48(sp)
 8005980:	1023883a 	mov	r17,r2
 8005984:	0102040e 	bge	zero,r4,8006198 <_dtoa_r+0x1600>
 8005988:	d9000615 	stw	r4,24(sp)
 800598c:	0500050e 	bge	zero,r20,80059a4 <_dtoa_r+0xe0c>
 8005990:	880b883a 	mov	r5,r17
 8005994:	a00d883a 	mov	r6,r20
 8005998:	e009883a 	mov	r4,fp
 800599c:	8008a8c0 	call	8008a8c <__lshift>
 80059a0:	1023883a 	mov	r17,r2
 80059a4:	9801241e 	bne	r19,zero,8005e38 <_dtoa_r+0x12a0>
 80059a8:	8829883a 	mov	r20,r17
 80059ac:	d9000617 	ldw	r4,24(sp)
 80059b0:	dcc00717 	ldw	r19,28(sp)
 80059b4:	9480004c 	andi	r18,r18,1
 80059b8:	20bfffc4 	addi	r2,r4,-1
 80059bc:	9885883a 	add	r2,r19,r2
 80059c0:	d8800415 	stw	r2,16(sp)
 80059c4:	dc800615 	stw	r18,24(sp)
 80059c8:	a80b883a 	mov	r5,r21
 80059cc:	8009883a 	mov	r4,r16
 80059d0:	80049700 	call	8004970 <quorem>
 80059d4:	880b883a 	mov	r5,r17
 80059d8:	8009883a 	mov	r4,r16
 80059dc:	102f883a 	mov	r23,r2
 80059e0:	8008bd40 	call	8008bd4 <__mcmp>
 80059e4:	a80b883a 	mov	r5,r21
 80059e8:	a00d883a 	mov	r6,r20
 80059ec:	e009883a 	mov	r4,fp
 80059f0:	102d883a 	mov	r22,r2
 80059f4:	8008c340 	call	8008c34 <__mdiff>
 80059f8:	1007883a 	mov	r3,r2
 80059fc:	10800317 	ldw	r2,12(r2)
 8005a00:	bc800c04 	addi	r18,r23,48
 8005a04:	180b883a 	mov	r5,r3
 8005a08:	10004e1e 	bne	r2,zero,8005b44 <_dtoa_r+0xfac>
 8005a0c:	8009883a 	mov	r4,r16
 8005a10:	d8c01615 	stw	r3,88(sp)
 8005a14:	8008bd40 	call	8008bd4 <__mcmp>
 8005a18:	d8c01617 	ldw	r3,88(sp)
 8005a1c:	e009883a 	mov	r4,fp
 8005a20:	d8801615 	stw	r2,88(sp)
 8005a24:	180b883a 	mov	r5,r3
 8005a28:	80082f80 	call	80082f8 <_Bfree>
 8005a2c:	d8801617 	ldw	r2,88(sp)
 8005a30:	1000041e 	bne	r2,zero,8005a44 <_dtoa_r+0xeac>
 8005a34:	d9800317 	ldw	r6,12(sp)
 8005a38:	3000021e 	bne	r6,zero,8005a44 <_dtoa_r+0xeac>
 8005a3c:	d8c00617 	ldw	r3,24(sp)
 8005a40:	18003726 	beq	r3,zero,8005b20 <_dtoa_r+0xf88>
 8005a44:	b0002016 	blt	r22,zero,8005ac8 <_dtoa_r+0xf30>
 8005a48:	b000041e 	bne	r22,zero,8005a5c <_dtoa_r+0xec4>
 8005a4c:	d9000317 	ldw	r4,12(sp)
 8005a50:	2000021e 	bne	r4,zero,8005a5c <_dtoa_r+0xec4>
 8005a54:	d8c00617 	ldw	r3,24(sp)
 8005a58:	18001b26 	beq	r3,zero,8005ac8 <_dtoa_r+0xf30>
 8005a5c:	00810716 	blt	zero,r2,8005e7c <_dtoa_r+0x12e4>
 8005a60:	d8c00417 	ldw	r3,16(sp)
 8005a64:	9d800044 	addi	r22,r19,1
 8005a68:	9c800005 	stb	r18,0(r19)
 8005a6c:	b02f883a 	mov	r23,r22
 8005a70:	98c10626 	beq	r19,r3,8005e8c <_dtoa_r+0x12f4>
 8005a74:	800b883a 	mov	r5,r16
 8005a78:	000f883a 	mov	r7,zero
 8005a7c:	01800284 	movi	r6,10
 8005a80:	e009883a 	mov	r4,fp
 8005a84:	80083200 	call	8008320 <__multadd>
 8005a88:	1021883a 	mov	r16,r2
 8005a8c:	000f883a 	mov	r7,zero
 8005a90:	01800284 	movi	r6,10
 8005a94:	880b883a 	mov	r5,r17
 8005a98:	e009883a 	mov	r4,fp
 8005a9c:	8d002526 	beq	r17,r20,8005b34 <_dtoa_r+0xf9c>
 8005aa0:	80083200 	call	8008320 <__multadd>
 8005aa4:	a00b883a 	mov	r5,r20
 8005aa8:	000f883a 	mov	r7,zero
 8005aac:	01800284 	movi	r6,10
 8005ab0:	e009883a 	mov	r4,fp
 8005ab4:	1023883a 	mov	r17,r2
 8005ab8:	80083200 	call	8008320 <__multadd>
 8005abc:	1029883a 	mov	r20,r2
 8005ac0:	b027883a 	mov	r19,r22
 8005ac4:	003fc006 	br	80059c8 <__alt_data_end+0xfc0059c8>
 8005ac8:	9011883a 	mov	r8,r18
 8005acc:	00800e0e 	bge	zero,r2,8005b08 <_dtoa_r+0xf70>
 8005ad0:	800b883a 	mov	r5,r16
 8005ad4:	01800044 	movi	r6,1
 8005ad8:	e009883a 	mov	r4,fp
 8005adc:	da001715 	stw	r8,92(sp)
 8005ae0:	8008a8c0 	call	8008a8c <__lshift>
 8005ae4:	a80b883a 	mov	r5,r21
 8005ae8:	1009883a 	mov	r4,r2
 8005aec:	1021883a 	mov	r16,r2
 8005af0:	8008bd40 	call	8008bd4 <__mcmp>
 8005af4:	da001717 	ldw	r8,92(sp)
 8005af8:	0081960e 	bge	zero,r2,8006154 <_dtoa_r+0x15bc>
 8005afc:	00800e44 	movi	r2,57
 8005b00:	40817026 	beq	r8,r2,80060c4 <_dtoa_r+0x152c>
 8005b04:	ba000c44 	addi	r8,r23,49
 8005b08:	8825883a 	mov	r18,r17
 8005b0c:	9dc00044 	addi	r23,r19,1
 8005b10:	9a000005 	stb	r8,0(r19)
 8005b14:	a023883a 	mov	r17,r20
 8005b18:	dc000915 	stw	r16,36(sp)
 8005b1c:	003f2406 	br	80057b0 <__alt_data_end+0xfc0057b0>
 8005b20:	00800e44 	movi	r2,57
 8005b24:	9011883a 	mov	r8,r18
 8005b28:	90816626 	beq	r18,r2,80060c4 <_dtoa_r+0x152c>
 8005b2c:	05bff516 	blt	zero,r22,8005b04 <__alt_data_end+0xfc005b04>
 8005b30:	003ff506 	br	8005b08 <__alt_data_end+0xfc005b08>
 8005b34:	80083200 	call	8008320 <__multadd>
 8005b38:	1023883a 	mov	r17,r2
 8005b3c:	1029883a 	mov	r20,r2
 8005b40:	003fdf06 	br	8005ac0 <__alt_data_end+0xfc005ac0>
 8005b44:	e009883a 	mov	r4,fp
 8005b48:	80082f80 	call	80082f8 <_Bfree>
 8005b4c:	00800044 	movi	r2,1
 8005b50:	003fbc06 	br	8005a44 <__alt_data_end+0xfc005a44>
 8005b54:	a80b883a 	mov	r5,r21
 8005b58:	8009883a 	mov	r4,r16
 8005b5c:	8008bd40 	call	8008bd4 <__mcmp>
 8005b60:	103edb0e 	bge	r2,zero,80056d0 <__alt_data_end+0xfc0056d0>
 8005b64:	800b883a 	mov	r5,r16
 8005b68:	000f883a 	mov	r7,zero
 8005b6c:	01800284 	movi	r6,10
 8005b70:	e009883a 	mov	r4,fp
 8005b74:	80083200 	call	8008320 <__multadd>
 8005b78:	1021883a 	mov	r16,r2
 8005b7c:	d8800517 	ldw	r2,20(sp)
 8005b80:	d8c00b17 	ldw	r3,44(sp)
 8005b84:	10bfffc4 	addi	r2,r2,-1
 8005b88:	d8800515 	stw	r2,20(sp)
 8005b8c:	183f761e 	bne	r3,zero,8005968 <__alt_data_end+0xfc005968>
 8005b90:	d9000c17 	ldw	r4,48(sp)
 8005b94:	0101730e 	bge	zero,r4,8006164 <_dtoa_r+0x15cc>
 8005b98:	d9000615 	stw	r4,24(sp)
 8005b9c:	003ed006 	br	80056e0 <__alt_data_end+0xfc0056e0>
 8005ba0:	00800084 	movi	r2,2
 8005ba4:	3081861e 	bne	r6,r2,80061c0 <_dtoa_r+0x1628>
 8005ba8:	d8000b15 	stw	zero,44(sp)
 8005bac:	003f3c06 	br	80058a0 <__alt_data_end+0xfc0058a0>
 8005bb0:	dc000917 	ldw	r16,36(sp)
 8005bb4:	003e9206 	br	8005600 <__alt_data_end+0xfc005600>
 8005bb8:	d9c00317 	ldw	r7,12(sp)
 8005bbc:	00800084 	movi	r2,2
 8005bc0:	11fec50e 	bge	r2,r7,80056d8 <__alt_data_end+0xfc0056d8>
 8005bc4:	d9000617 	ldw	r4,24(sp)
 8005bc8:	20013c1e 	bne	r4,zero,80060bc <_dtoa_r+0x1524>
 8005bcc:	a80b883a 	mov	r5,r21
 8005bd0:	000f883a 	mov	r7,zero
 8005bd4:	01800144 	movi	r6,5
 8005bd8:	e009883a 	mov	r4,fp
 8005bdc:	80083200 	call	8008320 <__multadd>
 8005be0:	100b883a 	mov	r5,r2
 8005be4:	8009883a 	mov	r4,r16
 8005be8:	102b883a 	mov	r21,r2
 8005bec:	8008bd40 	call	8008bd4 <__mcmp>
 8005bf0:	dc000915 	stw	r16,36(sp)
 8005bf4:	00bf410e 	bge	zero,r2,80058fc <__alt_data_end+0xfc0058fc>
 8005bf8:	d9c00717 	ldw	r7,28(sp)
 8005bfc:	00800c44 	movi	r2,49
 8005c00:	38800005 	stb	r2,0(r7)
 8005c04:	d8800517 	ldw	r2,20(sp)
 8005c08:	3dc00044 	addi	r23,r7,1
 8005c0c:	10800044 	addi	r2,r2,1
 8005c10:	d8800515 	stw	r2,20(sp)
 8005c14:	003f3d06 	br	800590c <__alt_data_end+0xfc00590c>
 8005c18:	d9800517 	ldw	r6,20(sp)
 8005c1c:	d9c00717 	ldw	r7,28(sp)
 8005c20:	00800c44 	movi	r2,49
 8005c24:	31800044 	addi	r6,r6,1
 8005c28:	d9800515 	stw	r6,20(sp)
 8005c2c:	38800005 	stb	r2,0(r7)
 8005c30:	003edf06 	br	80057b0 <__alt_data_end+0xfc0057b0>
 8005c34:	d8000b15 	stw	zero,44(sp)
 8005c38:	003c9f06 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 8005c3c:	903e7e1e 	bne	r18,zero,8005638 <__alt_data_end+0xfc005638>
 8005c40:	00800434 	movhi	r2,16
 8005c44:	10bfffc4 	addi	r2,r2,-1
 8005c48:	9884703a 	and	r2,r19,r2
 8005c4c:	1000ea1e 	bne	r2,zero,8005ff8 <_dtoa_r+0x1460>
 8005c50:	9cdffc2c 	andhi	r19,r19,32752
 8005c54:	9800e826 	beq	r19,zero,8005ff8 <_dtoa_r+0x1460>
 8005c58:	d9c00817 	ldw	r7,32(sp)
 8005c5c:	b5800044 	addi	r22,r22,1
 8005c60:	04c00044 	movi	r19,1
 8005c64:	39c00044 	addi	r7,r7,1
 8005c68:	d9c00815 	stw	r7,32(sp)
 8005c6c:	d8800d17 	ldw	r2,52(sp)
 8005c70:	103e721e 	bne	r2,zero,800563c <__alt_data_end+0xfc00563c>
 8005c74:	00800044 	movi	r2,1
 8005c78:	003e7906 	br	8005660 <__alt_data_end+0xfc005660>
 8005c7c:	8009883a 	mov	r4,r16
 8005c80:	800efe80 	call	800efe8 <__floatsidf>
 8005c84:	d9800f17 	ldw	r6,60(sp)
 8005c88:	d9c01017 	ldw	r7,64(sp)
 8005c8c:	1009883a 	mov	r4,r2
 8005c90:	180b883a 	mov	r5,r3
 8005c94:	800de000 	call	800de00 <__muldf3>
 8005c98:	000d883a 	mov	r6,zero
 8005c9c:	01d00734 	movhi	r7,16412
 8005ca0:	1009883a 	mov	r4,r2
 8005ca4:	180b883a 	mov	r5,r3
 8005ca8:	800c92c0 	call	800c92c <__adddf3>
 8005cac:	047f3034 	movhi	r17,64704
 8005cb0:	1021883a 	mov	r16,r2
 8005cb4:	1c63883a 	add	r17,r3,r17
 8005cb8:	d9000f17 	ldw	r4,60(sp)
 8005cbc:	d9401017 	ldw	r5,64(sp)
 8005cc0:	000d883a 	mov	r6,zero
 8005cc4:	01d00534 	movhi	r7,16404
 8005cc8:	800e66c0 	call	800e66c <__subdf3>
 8005ccc:	800d883a 	mov	r6,r16
 8005cd0:	880f883a 	mov	r7,r17
 8005cd4:	1009883a 	mov	r4,r2
 8005cd8:	180b883a 	mov	r5,r3
 8005cdc:	102b883a 	mov	r21,r2
 8005ce0:	1829883a 	mov	r20,r3
 8005ce4:	800dc300 	call	800dc30 <__gedf2>
 8005ce8:	00806c16 	blt	zero,r2,8005e9c <_dtoa_r+0x1304>
 8005cec:	89e0003c 	xorhi	r7,r17,32768
 8005cf0:	800d883a 	mov	r6,r16
 8005cf4:	a809883a 	mov	r4,r21
 8005cf8:	a00b883a 	mov	r5,r20
 8005cfc:	800dd0c0 	call	800dd0c <__ledf2>
 8005d00:	103d7e0e 	bge	r2,zero,80052fc <__alt_data_end+0xfc0052fc>
 8005d04:	002b883a 	mov	r21,zero
 8005d08:	0023883a 	mov	r17,zero
 8005d0c:	003efb06 	br	80058fc <__alt_data_end+0xfc0058fc>
 8005d10:	d8800717 	ldw	r2,28(sp)
 8005d14:	003bd006 	br	8004c58 <__alt_data_end+0xfc004c58>
 8005d18:	d9000a17 	ldw	r4,40(sp)
 8005d1c:	d9800d17 	ldw	r6,52(sp)
 8005d20:	dd400a15 	stw	r21,40(sp)
 8005d24:	a905c83a 	sub	r2,r21,r4
 8005d28:	308d883a 	add	r6,r6,r2
 8005d2c:	d9800d15 	stw	r6,52(sp)
 8005d30:	002b883a 	mov	r21,zero
 8005d34:	003e0606 	br	8005550 <__alt_data_end+0xfc005550>
 8005d38:	9023883a 	mov	r17,r18
 8005d3c:	9829883a 	mov	r20,r19
 8005d40:	04000084 	movi	r16,2
 8005d44:	003c9206 	br	8004f90 <__alt_data_end+0xfc004f90>
 8005d48:	04000044 	movi	r16,1
 8005d4c:	dc000c15 	stw	r16,48(sp)
 8005d50:	dc000615 	stw	r16,24(sp)
 8005d54:	dc002215 	stw	r16,136(sp)
 8005d58:	e0001115 	stw	zero,68(fp)
 8005d5c:	000b883a 	mov	r5,zero
 8005d60:	003c6906 	br	8004f08 <__alt_data_end+0xfc004f08>
 8005d64:	3021883a 	mov	r16,r6
 8005d68:	003ffb06 	br	8005d58 <__alt_data_end+0xfc005d58>
 8005d6c:	1000021e 	bne	r2,zero,8005d78 <_dtoa_r+0x11e0>
 8005d70:	4200004c 	andi	r8,r8,1
 8005d74:	403e7d1e 	bne	r8,zero,800576c <__alt_data_end+0xfc00576c>
 8005d78:	01000c04 	movi	r4,48
 8005d7c:	00000106 	br	8005d84 <_dtoa_r+0x11ec>
 8005d80:	102f883a 	mov	r23,r2
 8005d84:	b8bfffc4 	addi	r2,r23,-1
 8005d88:	10c00007 	ldb	r3,0(r2)
 8005d8c:	193ffc26 	beq	r3,r4,8005d80 <__alt_data_end+0xfc005d80>
 8005d90:	003e8706 	br	80057b0 <__alt_data_end+0xfc0057b0>
 8005d94:	d8800517 	ldw	r2,20(sp)
 8005d98:	00a3c83a 	sub	r17,zero,r2
 8005d9c:	8800a426 	beq	r17,zero,8006030 <_dtoa_r+0x1498>
 8005da0:	888003cc 	andi	r2,r17,15
 8005da4:	100490fa 	slli	r2,r2,3
 8005da8:	00c20074 	movhi	r3,2049
 8005dac:	18c89304 	addi	r3,r3,8780
 8005db0:	1885883a 	add	r2,r3,r2
 8005db4:	11800017 	ldw	r6,0(r2)
 8005db8:	11c00117 	ldw	r7,4(r2)
 8005dbc:	9009883a 	mov	r4,r18
 8005dc0:	980b883a 	mov	r5,r19
 8005dc4:	8823d13a 	srai	r17,r17,4
 8005dc8:	800de000 	call	800de00 <__muldf3>
 8005dcc:	d8800f15 	stw	r2,60(sp)
 8005dd0:	d8c01015 	stw	r3,64(sp)
 8005dd4:	8800e826 	beq	r17,zero,8006178 <_dtoa_r+0x15e0>
 8005dd8:	05020074 	movhi	r20,2049
 8005ddc:	a5088904 	addi	r20,r20,8740
 8005de0:	04000084 	movi	r16,2
 8005de4:	8980004c 	andi	r6,r17,1
 8005de8:	1009883a 	mov	r4,r2
 8005dec:	8823d07a 	srai	r17,r17,1
 8005df0:	180b883a 	mov	r5,r3
 8005df4:	30000426 	beq	r6,zero,8005e08 <_dtoa_r+0x1270>
 8005df8:	a1800017 	ldw	r6,0(r20)
 8005dfc:	a1c00117 	ldw	r7,4(r20)
 8005e00:	84000044 	addi	r16,r16,1
 8005e04:	800de000 	call	800de00 <__muldf3>
 8005e08:	a5000204 	addi	r20,r20,8
 8005e0c:	883ff51e 	bne	r17,zero,8005de4 <__alt_data_end+0xfc005de4>
 8005e10:	d8800f15 	stw	r2,60(sp)
 8005e14:	d8c01015 	stw	r3,64(sp)
 8005e18:	003c7606 	br	8004ff4 <__alt_data_end+0xfc004ff4>
 8005e1c:	00c00c04 	movi	r3,48
 8005e20:	10c00005 	stb	r3,0(r2)
 8005e24:	d8c00517 	ldw	r3,20(sp)
 8005e28:	bd3fffc3 	ldbu	r20,-1(r23)
 8005e2c:	18c00044 	addi	r3,r3,1
 8005e30:	d8c00515 	stw	r3,20(sp)
 8005e34:	003db906 	br	800551c <__alt_data_end+0xfc00551c>
 8005e38:	89400117 	ldw	r5,4(r17)
 8005e3c:	e009883a 	mov	r4,fp
 8005e40:	80082500 	call	8008250 <_Balloc>
 8005e44:	89800417 	ldw	r6,16(r17)
 8005e48:	89400304 	addi	r5,r17,12
 8005e4c:	11000304 	addi	r4,r2,12
 8005e50:	31800084 	addi	r6,r6,2
 8005e54:	318d883a 	add	r6,r6,r6
 8005e58:	318d883a 	add	r6,r6,r6
 8005e5c:	1027883a 	mov	r19,r2
 8005e60:	8007e840 	call	8007e84 <memcpy>
 8005e64:	01800044 	movi	r6,1
 8005e68:	980b883a 	mov	r5,r19
 8005e6c:	e009883a 	mov	r4,fp
 8005e70:	8008a8c0 	call	8008a8c <__lshift>
 8005e74:	1029883a 	mov	r20,r2
 8005e78:	003ecc06 	br	80059ac <__alt_data_end+0xfc0059ac>
 8005e7c:	00800e44 	movi	r2,57
 8005e80:	90809026 	beq	r18,r2,80060c4 <_dtoa_r+0x152c>
 8005e84:	92000044 	addi	r8,r18,1
 8005e88:	003f1f06 	br	8005b08 <__alt_data_end+0xfc005b08>
 8005e8c:	9011883a 	mov	r8,r18
 8005e90:	8825883a 	mov	r18,r17
 8005e94:	a023883a 	mov	r17,r20
 8005e98:	003e2906 	br	8005740 <__alt_data_end+0xfc005740>
 8005e9c:	002b883a 	mov	r21,zero
 8005ea0:	0023883a 	mov	r17,zero
 8005ea4:	003f5406 	br	8005bf8 <__alt_data_end+0xfc005bf8>
 8005ea8:	61bfffc4 	addi	r6,r12,-1
 8005eac:	300490fa 	slli	r2,r6,3
 8005eb0:	00c20074 	movhi	r3,2049
 8005eb4:	18c89304 	addi	r3,r3,8780
 8005eb8:	1885883a 	add	r2,r3,r2
 8005ebc:	11000017 	ldw	r4,0(r2)
 8005ec0:	11400117 	ldw	r5,4(r2)
 8005ec4:	d8800717 	ldw	r2,28(sp)
 8005ec8:	880f883a 	mov	r7,r17
 8005ecc:	d9801215 	stw	r6,72(sp)
 8005ed0:	800d883a 	mov	r6,r16
 8005ed4:	db001615 	stw	r12,88(sp)
 8005ed8:	15c00044 	addi	r23,r2,1
 8005edc:	800de000 	call	800de00 <__muldf3>
 8005ee0:	d9401017 	ldw	r5,64(sp)
 8005ee4:	d9000f17 	ldw	r4,60(sp)
 8005ee8:	d8c01515 	stw	r3,84(sp)
 8005eec:	d8801415 	stw	r2,80(sp)
 8005ef0:	800ef680 	call	800ef68 <__fixdfsi>
 8005ef4:	1009883a 	mov	r4,r2
 8005ef8:	1021883a 	mov	r16,r2
 8005efc:	800efe80 	call	800efe8 <__floatsidf>
 8005f00:	d9000f17 	ldw	r4,60(sp)
 8005f04:	d9401017 	ldw	r5,64(sp)
 8005f08:	100d883a 	mov	r6,r2
 8005f0c:	180f883a 	mov	r7,r3
 8005f10:	800e66c0 	call	800e66c <__subdf3>
 8005f14:	1829883a 	mov	r20,r3
 8005f18:	d8c00717 	ldw	r3,28(sp)
 8005f1c:	84000c04 	addi	r16,r16,48
 8005f20:	1023883a 	mov	r17,r2
 8005f24:	1c000005 	stb	r16,0(r3)
 8005f28:	db001617 	ldw	r12,88(sp)
 8005f2c:	00800044 	movi	r2,1
 8005f30:	60802226 	beq	r12,r2,8005fbc <_dtoa_r+0x1424>
 8005f34:	d9c00717 	ldw	r7,28(sp)
 8005f38:	8805883a 	mov	r2,r17
 8005f3c:	b82b883a 	mov	r21,r23
 8005f40:	3b19883a 	add	r12,r7,r12
 8005f44:	6023883a 	mov	r17,r12
 8005f48:	a007883a 	mov	r3,r20
 8005f4c:	dc800f15 	stw	r18,60(sp)
 8005f50:	000d883a 	mov	r6,zero
 8005f54:	01d00934 	movhi	r7,16420
 8005f58:	1009883a 	mov	r4,r2
 8005f5c:	180b883a 	mov	r5,r3
 8005f60:	800de000 	call	800de00 <__muldf3>
 8005f64:	180b883a 	mov	r5,r3
 8005f68:	1009883a 	mov	r4,r2
 8005f6c:	1829883a 	mov	r20,r3
 8005f70:	1025883a 	mov	r18,r2
 8005f74:	800ef680 	call	800ef68 <__fixdfsi>
 8005f78:	1009883a 	mov	r4,r2
 8005f7c:	1021883a 	mov	r16,r2
 8005f80:	800efe80 	call	800efe8 <__floatsidf>
 8005f84:	100d883a 	mov	r6,r2
 8005f88:	180f883a 	mov	r7,r3
 8005f8c:	9009883a 	mov	r4,r18
 8005f90:	a00b883a 	mov	r5,r20
 8005f94:	84000c04 	addi	r16,r16,48
 8005f98:	800e66c0 	call	800e66c <__subdf3>
 8005f9c:	ad400044 	addi	r21,r21,1
 8005fa0:	ac3fffc5 	stb	r16,-1(r21)
 8005fa4:	ac7fea1e 	bne	r21,r17,8005f50 <__alt_data_end+0xfc005f50>
 8005fa8:	1023883a 	mov	r17,r2
 8005fac:	d8801217 	ldw	r2,72(sp)
 8005fb0:	dc800f17 	ldw	r18,60(sp)
 8005fb4:	1829883a 	mov	r20,r3
 8005fb8:	b8af883a 	add	r23,r23,r2
 8005fbc:	d9001417 	ldw	r4,80(sp)
 8005fc0:	d9401517 	ldw	r5,84(sp)
 8005fc4:	000d883a 	mov	r6,zero
 8005fc8:	01cff834 	movhi	r7,16352
 8005fcc:	800c92c0 	call	800c92c <__adddf3>
 8005fd0:	880d883a 	mov	r6,r17
 8005fd4:	a00f883a 	mov	r7,r20
 8005fd8:	1009883a 	mov	r4,r2
 8005fdc:	180b883a 	mov	r5,r3
 8005fe0:	800dd0c0 	call	800dd0c <__ledf2>
 8005fe4:	10003e0e 	bge	r2,zero,80060e0 <_dtoa_r+0x1548>
 8005fe8:	d9001317 	ldw	r4,76(sp)
 8005fec:	bd3fffc3 	ldbu	r20,-1(r23)
 8005ff0:	d9000515 	stw	r4,20(sp)
 8005ff4:	003d3b06 	br	80054e4 <__alt_data_end+0xfc0054e4>
 8005ff8:	0027883a 	mov	r19,zero
 8005ffc:	003f1b06 	br	8005c6c <__alt_data_end+0xfc005c6c>
 8006000:	d8800817 	ldw	r2,32(sp)
 8006004:	11e9c83a 	sub	r20,r2,r7
 8006008:	0005883a 	mov	r2,zero
 800600c:	003d5406 	br	8005560 <__alt_data_end+0xfc005560>
 8006010:	00800044 	movi	r2,1
 8006014:	003dc706 	br	8005734 <__alt_data_end+0xfc005734>
 8006018:	d8c00217 	ldw	r3,8(sp)
 800601c:	00800d84 	movi	r2,54
 8006020:	dd400a17 	ldw	r21,40(sp)
 8006024:	10c5c83a 	sub	r2,r2,r3
 8006028:	dd000817 	ldw	r20,32(sp)
 800602c:	003d4c06 	br	8005560 <__alt_data_end+0xfc005560>
 8006030:	dc800f15 	stw	r18,60(sp)
 8006034:	dcc01015 	stw	r19,64(sp)
 8006038:	04000084 	movi	r16,2
 800603c:	003bed06 	br	8004ff4 <__alt_data_end+0xfc004ff4>
 8006040:	d9000617 	ldw	r4,24(sp)
 8006044:	203f0d26 	beq	r4,zero,8005c7c <__alt_data_end+0xfc005c7c>
 8006048:	d9800c17 	ldw	r6,48(sp)
 800604c:	01bcab0e 	bge	zero,r6,80052fc <__alt_data_end+0xfc0052fc>
 8006050:	d9401017 	ldw	r5,64(sp)
 8006054:	d9000f17 	ldw	r4,60(sp)
 8006058:	000d883a 	mov	r6,zero
 800605c:	01d00934 	movhi	r7,16420
 8006060:	800de000 	call	800de00 <__muldf3>
 8006064:	81000044 	addi	r4,r16,1
 8006068:	d8800f15 	stw	r2,60(sp)
 800606c:	d8c01015 	stw	r3,64(sp)
 8006070:	800efe80 	call	800efe8 <__floatsidf>
 8006074:	d9800f17 	ldw	r6,60(sp)
 8006078:	d9c01017 	ldw	r7,64(sp)
 800607c:	1009883a 	mov	r4,r2
 8006080:	180b883a 	mov	r5,r3
 8006084:	800de000 	call	800de00 <__muldf3>
 8006088:	01d00734 	movhi	r7,16412
 800608c:	000d883a 	mov	r6,zero
 8006090:	1009883a 	mov	r4,r2
 8006094:	180b883a 	mov	r5,r3
 8006098:	800c92c0 	call	800c92c <__adddf3>
 800609c:	d9c00517 	ldw	r7,20(sp)
 80060a0:	047f3034 	movhi	r17,64704
 80060a4:	1021883a 	mov	r16,r2
 80060a8:	39ffffc4 	addi	r7,r7,-1
 80060ac:	d9c01315 	stw	r7,76(sp)
 80060b0:	1c63883a 	add	r17,r3,r17
 80060b4:	db000c17 	ldw	r12,48(sp)
 80060b8:	003bea06 	br	8005064 <__alt_data_end+0xfc005064>
 80060bc:	dc000915 	stw	r16,36(sp)
 80060c0:	003e0e06 	br	80058fc <__alt_data_end+0xfc0058fc>
 80060c4:	01000e44 	movi	r4,57
 80060c8:	8825883a 	mov	r18,r17
 80060cc:	9dc00044 	addi	r23,r19,1
 80060d0:	99000005 	stb	r4,0(r19)
 80060d4:	a023883a 	mov	r17,r20
 80060d8:	dc000915 	stw	r16,36(sp)
 80060dc:	003da406 	br	8005770 <__alt_data_end+0xfc005770>
 80060e0:	d9801417 	ldw	r6,80(sp)
 80060e4:	d9c01517 	ldw	r7,84(sp)
 80060e8:	0009883a 	mov	r4,zero
 80060ec:	014ff834 	movhi	r5,16352
 80060f0:	800e66c0 	call	800e66c <__subdf3>
 80060f4:	880d883a 	mov	r6,r17
 80060f8:	a00f883a 	mov	r7,r20
 80060fc:	1009883a 	mov	r4,r2
 8006100:	180b883a 	mov	r5,r3
 8006104:	800dc300 	call	800dc30 <__gedf2>
 8006108:	00bc7c0e 	bge	zero,r2,80052fc <__alt_data_end+0xfc0052fc>
 800610c:	01000c04 	movi	r4,48
 8006110:	00000106 	br	8006118 <_dtoa_r+0x1580>
 8006114:	102f883a 	mov	r23,r2
 8006118:	b8bfffc4 	addi	r2,r23,-1
 800611c:	10c00007 	ldb	r3,0(r2)
 8006120:	193ffc26 	beq	r3,r4,8006114 <__alt_data_end+0xfc006114>
 8006124:	d9801317 	ldw	r6,76(sp)
 8006128:	d9800515 	stw	r6,20(sp)
 800612c:	003c4406 	br	8005240 <__alt_data_end+0xfc005240>
 8006130:	d9801317 	ldw	r6,76(sp)
 8006134:	d9800515 	stw	r6,20(sp)
 8006138:	003cea06 	br	80054e4 <__alt_data_end+0xfc0054e4>
 800613c:	dd800f17 	ldw	r22,60(sp)
 8006140:	dcc01017 	ldw	r19,64(sp)
 8006144:	dc801217 	ldw	r18,72(sp)
 8006148:	003c6c06 	br	80052fc <__alt_data_end+0xfc0052fc>
 800614c:	903e031e 	bne	r18,zero,800595c <__alt_data_end+0xfc00595c>
 8006150:	003ebb06 	br	8005c40 <__alt_data_end+0xfc005c40>
 8006154:	103e6c1e 	bne	r2,zero,8005b08 <__alt_data_end+0xfc005b08>
 8006158:	4080004c 	andi	r2,r8,1
 800615c:	103e6a26 	beq	r2,zero,8005b08 <__alt_data_end+0xfc005b08>
 8006160:	003e6606 	br	8005afc <__alt_data_end+0xfc005afc>
 8006164:	d8c00317 	ldw	r3,12(sp)
 8006168:	00800084 	movi	r2,2
 800616c:	10c02916 	blt	r2,r3,8006214 <_dtoa_r+0x167c>
 8006170:	d9000c17 	ldw	r4,48(sp)
 8006174:	003e8806 	br	8005b98 <__alt_data_end+0xfc005b98>
 8006178:	04000084 	movi	r16,2
 800617c:	003b9d06 	br	8004ff4 <__alt_data_end+0xfc004ff4>
 8006180:	d9001317 	ldw	r4,76(sp)
 8006184:	d9000515 	stw	r4,20(sp)
 8006188:	003cd606 	br	80054e4 <__alt_data_end+0xfc0054e4>
 800618c:	d8801317 	ldw	r2,76(sp)
 8006190:	d8800515 	stw	r2,20(sp)
 8006194:	003c2a06 	br	8005240 <__alt_data_end+0xfc005240>
 8006198:	d9800317 	ldw	r6,12(sp)
 800619c:	00800084 	movi	r2,2
 80061a0:	11801516 	blt	r2,r6,80061f8 <_dtoa_r+0x1660>
 80061a4:	d9c00c17 	ldw	r7,48(sp)
 80061a8:	d9c00615 	stw	r7,24(sp)
 80061ac:	003df706 	br	800598c <__alt_data_end+0xfc00598c>
 80061b0:	193d3926 	beq	r3,r4,8005698 <__alt_data_end+0xfc005698>
 80061b4:	00c00f04 	movi	r3,60
 80061b8:	1885c83a 	sub	r2,r3,r2
 80061bc:	003ddf06 	br	800593c <__alt_data_end+0xfc00593c>
 80061c0:	e009883a 	mov	r4,fp
 80061c4:	e0001115 	stw	zero,68(fp)
 80061c8:	000b883a 	mov	r5,zero
 80061cc:	80082500 	call	8008250 <_Balloc>
 80061d0:	d8800715 	stw	r2,28(sp)
 80061d4:	d8c00717 	ldw	r3,28(sp)
 80061d8:	00bfffc4 	movi	r2,-1
 80061dc:	01000044 	movi	r4,1
 80061e0:	d8800c15 	stw	r2,48(sp)
 80061e4:	e0c01015 	stw	r3,64(fp)
 80061e8:	d9000b15 	stw	r4,44(sp)
 80061ec:	d8800615 	stw	r2,24(sp)
 80061f0:	d8002215 	stw	zero,136(sp)
 80061f4:	003c4106 	br	80052fc <__alt_data_end+0xfc0052fc>
 80061f8:	d8c00c17 	ldw	r3,48(sp)
 80061fc:	d8c00615 	stw	r3,24(sp)
 8006200:	003e7006 	br	8005bc4 <__alt_data_end+0xfc005bc4>
 8006204:	04400044 	movi	r17,1
 8006208:	003b2006 	br	8004e8c <__alt_data_end+0xfc004e8c>
 800620c:	000b883a 	mov	r5,zero
 8006210:	003b3d06 	br	8004f08 <__alt_data_end+0xfc004f08>
 8006214:	d8800c17 	ldw	r2,48(sp)
 8006218:	d8800615 	stw	r2,24(sp)
 800621c:	003e6906 	br	8005bc4 <__alt_data_end+0xfc005bc4>

08006220 <__sflush_r>:
 8006220:	2880030b 	ldhu	r2,12(r5)
 8006224:	defffb04 	addi	sp,sp,-20
 8006228:	dcc00315 	stw	r19,12(sp)
 800622c:	dc400115 	stw	r17,4(sp)
 8006230:	dfc00415 	stw	ra,16(sp)
 8006234:	dc800215 	stw	r18,8(sp)
 8006238:	dc000015 	stw	r16,0(sp)
 800623c:	10c0020c 	andi	r3,r2,8
 8006240:	2823883a 	mov	r17,r5
 8006244:	2027883a 	mov	r19,r4
 8006248:	1800311e 	bne	r3,zero,8006310 <__sflush_r+0xf0>
 800624c:	28c00117 	ldw	r3,4(r5)
 8006250:	10820014 	ori	r2,r2,2048
 8006254:	2880030d 	sth	r2,12(r5)
 8006258:	00c04b0e 	bge	zero,r3,8006388 <__sflush_r+0x168>
 800625c:	8a000a17 	ldw	r8,40(r17)
 8006260:	40002326 	beq	r8,zero,80062f0 <__sflush_r+0xd0>
 8006264:	9c000017 	ldw	r16,0(r19)
 8006268:	10c4000c 	andi	r3,r2,4096
 800626c:	98000015 	stw	zero,0(r19)
 8006270:	18004826 	beq	r3,zero,8006394 <__sflush_r+0x174>
 8006274:	89801417 	ldw	r6,80(r17)
 8006278:	10c0010c 	andi	r3,r2,4
 800627c:	18000626 	beq	r3,zero,8006298 <__sflush_r+0x78>
 8006280:	88c00117 	ldw	r3,4(r17)
 8006284:	88800c17 	ldw	r2,48(r17)
 8006288:	30cdc83a 	sub	r6,r6,r3
 800628c:	10000226 	beq	r2,zero,8006298 <__sflush_r+0x78>
 8006290:	88800f17 	ldw	r2,60(r17)
 8006294:	308dc83a 	sub	r6,r6,r2
 8006298:	89400717 	ldw	r5,28(r17)
 800629c:	000f883a 	mov	r7,zero
 80062a0:	9809883a 	mov	r4,r19
 80062a4:	403ee83a 	callr	r8
 80062a8:	00ffffc4 	movi	r3,-1
 80062ac:	10c04426 	beq	r2,r3,80063c0 <__sflush_r+0x1a0>
 80062b0:	88c0030b 	ldhu	r3,12(r17)
 80062b4:	89000417 	ldw	r4,16(r17)
 80062b8:	88000115 	stw	zero,4(r17)
 80062bc:	197dffcc 	andi	r5,r3,63487
 80062c0:	8940030d 	sth	r5,12(r17)
 80062c4:	89000015 	stw	r4,0(r17)
 80062c8:	18c4000c 	andi	r3,r3,4096
 80062cc:	18002c1e 	bne	r3,zero,8006380 <__sflush_r+0x160>
 80062d0:	89400c17 	ldw	r5,48(r17)
 80062d4:	9c000015 	stw	r16,0(r19)
 80062d8:	28000526 	beq	r5,zero,80062f0 <__sflush_r+0xd0>
 80062dc:	88801004 	addi	r2,r17,64
 80062e0:	28800226 	beq	r5,r2,80062ec <__sflush_r+0xcc>
 80062e4:	9809883a 	mov	r4,r19
 80062e8:	800699c0 	call	800699c <_free_r>
 80062ec:	88000c15 	stw	zero,48(r17)
 80062f0:	0005883a 	mov	r2,zero
 80062f4:	dfc00417 	ldw	ra,16(sp)
 80062f8:	dcc00317 	ldw	r19,12(sp)
 80062fc:	dc800217 	ldw	r18,8(sp)
 8006300:	dc400117 	ldw	r17,4(sp)
 8006304:	dc000017 	ldw	r16,0(sp)
 8006308:	dec00504 	addi	sp,sp,20
 800630c:	f800283a 	ret
 8006310:	2c800417 	ldw	r18,16(r5)
 8006314:	903ff626 	beq	r18,zero,80062f0 <__alt_data_end+0xfc0062f0>
 8006318:	2c000017 	ldw	r16,0(r5)
 800631c:	108000cc 	andi	r2,r2,3
 8006320:	2c800015 	stw	r18,0(r5)
 8006324:	84a1c83a 	sub	r16,r16,r18
 8006328:	1000131e 	bne	r2,zero,8006378 <__sflush_r+0x158>
 800632c:	28800517 	ldw	r2,20(r5)
 8006330:	88800215 	stw	r2,8(r17)
 8006334:	04000316 	blt	zero,r16,8006344 <__sflush_r+0x124>
 8006338:	003fed06 	br	80062f0 <__alt_data_end+0xfc0062f0>
 800633c:	90a5883a 	add	r18,r18,r2
 8006340:	043feb0e 	bge	zero,r16,80062f0 <__alt_data_end+0xfc0062f0>
 8006344:	88800917 	ldw	r2,36(r17)
 8006348:	89400717 	ldw	r5,28(r17)
 800634c:	800f883a 	mov	r7,r16
 8006350:	900d883a 	mov	r6,r18
 8006354:	9809883a 	mov	r4,r19
 8006358:	103ee83a 	callr	r2
 800635c:	80a1c83a 	sub	r16,r16,r2
 8006360:	00bff616 	blt	zero,r2,800633c <__alt_data_end+0xfc00633c>
 8006364:	88c0030b 	ldhu	r3,12(r17)
 8006368:	00bfffc4 	movi	r2,-1
 800636c:	18c01014 	ori	r3,r3,64
 8006370:	88c0030d 	sth	r3,12(r17)
 8006374:	003fdf06 	br	80062f4 <__alt_data_end+0xfc0062f4>
 8006378:	0005883a 	mov	r2,zero
 800637c:	003fec06 	br	8006330 <__alt_data_end+0xfc006330>
 8006380:	88801415 	stw	r2,80(r17)
 8006384:	003fd206 	br	80062d0 <__alt_data_end+0xfc0062d0>
 8006388:	28c00f17 	ldw	r3,60(r5)
 800638c:	00ffb316 	blt	zero,r3,800625c <__alt_data_end+0xfc00625c>
 8006390:	003fd706 	br	80062f0 <__alt_data_end+0xfc0062f0>
 8006394:	89400717 	ldw	r5,28(r17)
 8006398:	000d883a 	mov	r6,zero
 800639c:	01c00044 	movi	r7,1
 80063a0:	9809883a 	mov	r4,r19
 80063a4:	403ee83a 	callr	r8
 80063a8:	100d883a 	mov	r6,r2
 80063ac:	00bfffc4 	movi	r2,-1
 80063b0:	30801426 	beq	r6,r2,8006404 <__sflush_r+0x1e4>
 80063b4:	8880030b 	ldhu	r2,12(r17)
 80063b8:	8a000a17 	ldw	r8,40(r17)
 80063bc:	003fae06 	br	8006278 <__alt_data_end+0xfc006278>
 80063c0:	98c00017 	ldw	r3,0(r19)
 80063c4:	183fba26 	beq	r3,zero,80062b0 <__alt_data_end+0xfc0062b0>
 80063c8:	01000744 	movi	r4,29
 80063cc:	19000626 	beq	r3,r4,80063e8 <__sflush_r+0x1c8>
 80063d0:	01000584 	movi	r4,22
 80063d4:	19000426 	beq	r3,r4,80063e8 <__sflush_r+0x1c8>
 80063d8:	88c0030b 	ldhu	r3,12(r17)
 80063dc:	18c01014 	ori	r3,r3,64
 80063e0:	88c0030d 	sth	r3,12(r17)
 80063e4:	003fc306 	br	80062f4 <__alt_data_end+0xfc0062f4>
 80063e8:	8880030b 	ldhu	r2,12(r17)
 80063ec:	88c00417 	ldw	r3,16(r17)
 80063f0:	88000115 	stw	zero,4(r17)
 80063f4:	10bdffcc 	andi	r2,r2,63487
 80063f8:	8880030d 	sth	r2,12(r17)
 80063fc:	88c00015 	stw	r3,0(r17)
 8006400:	003fb306 	br	80062d0 <__alt_data_end+0xfc0062d0>
 8006404:	98800017 	ldw	r2,0(r19)
 8006408:	103fea26 	beq	r2,zero,80063b4 <__alt_data_end+0xfc0063b4>
 800640c:	00c00744 	movi	r3,29
 8006410:	10c00226 	beq	r2,r3,800641c <__sflush_r+0x1fc>
 8006414:	00c00584 	movi	r3,22
 8006418:	10c0031e 	bne	r2,r3,8006428 <__sflush_r+0x208>
 800641c:	9c000015 	stw	r16,0(r19)
 8006420:	0005883a 	mov	r2,zero
 8006424:	003fb306 	br	80062f4 <__alt_data_end+0xfc0062f4>
 8006428:	88c0030b 	ldhu	r3,12(r17)
 800642c:	3005883a 	mov	r2,r6
 8006430:	18c01014 	ori	r3,r3,64
 8006434:	88c0030d 	sth	r3,12(r17)
 8006438:	003fae06 	br	80062f4 <__alt_data_end+0xfc0062f4>

0800643c <_fflush_r>:
 800643c:	defffd04 	addi	sp,sp,-12
 8006440:	dc000115 	stw	r16,4(sp)
 8006444:	dfc00215 	stw	ra,8(sp)
 8006448:	2021883a 	mov	r16,r4
 800644c:	20000226 	beq	r4,zero,8006458 <_fflush_r+0x1c>
 8006450:	20800e17 	ldw	r2,56(r4)
 8006454:	10000c26 	beq	r2,zero,8006488 <_fflush_r+0x4c>
 8006458:	2880030f 	ldh	r2,12(r5)
 800645c:	1000051e 	bne	r2,zero,8006474 <_fflush_r+0x38>
 8006460:	0005883a 	mov	r2,zero
 8006464:	dfc00217 	ldw	ra,8(sp)
 8006468:	dc000117 	ldw	r16,4(sp)
 800646c:	dec00304 	addi	sp,sp,12
 8006470:	f800283a 	ret
 8006474:	8009883a 	mov	r4,r16
 8006478:	dfc00217 	ldw	ra,8(sp)
 800647c:	dc000117 	ldw	r16,4(sp)
 8006480:	dec00304 	addi	sp,sp,12
 8006484:	80062201 	jmpi	8006220 <__sflush_r>
 8006488:	d9400015 	stw	r5,0(sp)
 800648c:	80068280 	call	8006828 <__sinit>
 8006490:	d9400017 	ldw	r5,0(sp)
 8006494:	003ff006 	br	8006458 <__alt_data_end+0xfc006458>

08006498 <fflush>:
 8006498:	20000526 	beq	r4,zero,80064b0 <fflush+0x18>
 800649c:	00820074 	movhi	r2,2049
 80064a0:	108fc604 	addi	r2,r2,16152
 80064a4:	200b883a 	mov	r5,r4
 80064a8:	11000017 	ldw	r4,0(r2)
 80064ac:	800643c1 	jmpi	800643c <_fflush_r>
 80064b0:	00820074 	movhi	r2,2049
 80064b4:	108fc504 	addi	r2,r2,16148
 80064b8:	11000017 	ldw	r4,0(r2)
 80064bc:	01420034 	movhi	r5,2048
 80064c0:	29590f04 	addi	r5,r5,25660
 80064c4:	80072381 	jmpi	8007238 <_fwalk_reent>

080064c8 <__fp_unlock>:
 80064c8:	0005883a 	mov	r2,zero
 80064cc:	f800283a 	ret

080064d0 <_cleanup_r>:
 80064d0:	01420074 	movhi	r5,2049
 80064d4:	296cf504 	addi	r5,r5,-19500
 80064d8:	80072381 	jmpi	8007238 <_fwalk_reent>

080064dc <__sinit.part.1>:
 80064dc:	defff704 	addi	sp,sp,-36
 80064e0:	00c20034 	movhi	r3,2048
 80064e4:	dfc00815 	stw	ra,32(sp)
 80064e8:	ddc00715 	stw	r23,28(sp)
 80064ec:	dd800615 	stw	r22,24(sp)
 80064f0:	dd400515 	stw	r21,20(sp)
 80064f4:	dd000415 	stw	r20,16(sp)
 80064f8:	dcc00315 	stw	r19,12(sp)
 80064fc:	dc800215 	stw	r18,8(sp)
 8006500:	dc400115 	stw	r17,4(sp)
 8006504:	dc000015 	stw	r16,0(sp)
 8006508:	18d93404 	addi	r3,r3,25808
 800650c:	24000117 	ldw	r16,4(r4)
 8006510:	20c00f15 	stw	r3,60(r4)
 8006514:	2080bb04 	addi	r2,r4,748
 8006518:	00c000c4 	movi	r3,3
 800651c:	20c0b915 	stw	r3,740(r4)
 8006520:	2080ba15 	stw	r2,744(r4)
 8006524:	2000b815 	stw	zero,736(r4)
 8006528:	05c00204 	movi	r23,8
 800652c:	00800104 	movi	r2,4
 8006530:	2025883a 	mov	r18,r4
 8006534:	b80d883a 	mov	r6,r23
 8006538:	81001704 	addi	r4,r16,92
 800653c:	000b883a 	mov	r5,zero
 8006540:	80000015 	stw	zero,0(r16)
 8006544:	80000115 	stw	zero,4(r16)
 8006548:	80000215 	stw	zero,8(r16)
 800654c:	8080030d 	sth	r2,12(r16)
 8006550:	80001915 	stw	zero,100(r16)
 8006554:	8000038d 	sth	zero,14(r16)
 8006558:	80000415 	stw	zero,16(r16)
 800655c:	80000515 	stw	zero,20(r16)
 8006560:	80000615 	stw	zero,24(r16)
 8006564:	80081280 	call	8008128 <memset>
 8006568:	05820074 	movhi	r22,2049
 800656c:	94400217 	ldw	r17,8(r18)
 8006570:	05420074 	movhi	r21,2049
 8006574:	05020074 	movhi	r20,2049
 8006578:	04c20074 	movhi	r19,2049
 800657c:	b5a64d04 	addi	r22,r22,-26316
 8006580:	ad666404 	addi	r21,r21,-26224
 8006584:	a5268304 	addi	r20,r20,-26100
 8006588:	9ce69a04 	addi	r19,r19,-26008
 800658c:	85800815 	stw	r22,32(r16)
 8006590:	85400915 	stw	r21,36(r16)
 8006594:	85000a15 	stw	r20,40(r16)
 8006598:	84c00b15 	stw	r19,44(r16)
 800659c:	84000715 	stw	r16,28(r16)
 80065a0:	00800284 	movi	r2,10
 80065a4:	8880030d 	sth	r2,12(r17)
 80065a8:	00800044 	movi	r2,1
 80065ac:	b80d883a 	mov	r6,r23
 80065b0:	89001704 	addi	r4,r17,92
 80065b4:	000b883a 	mov	r5,zero
 80065b8:	88000015 	stw	zero,0(r17)
 80065bc:	88000115 	stw	zero,4(r17)
 80065c0:	88000215 	stw	zero,8(r17)
 80065c4:	88001915 	stw	zero,100(r17)
 80065c8:	8880038d 	sth	r2,14(r17)
 80065cc:	88000415 	stw	zero,16(r17)
 80065d0:	88000515 	stw	zero,20(r17)
 80065d4:	88000615 	stw	zero,24(r17)
 80065d8:	80081280 	call	8008128 <memset>
 80065dc:	94000317 	ldw	r16,12(r18)
 80065e0:	00800484 	movi	r2,18
 80065e4:	8c400715 	stw	r17,28(r17)
 80065e8:	8d800815 	stw	r22,32(r17)
 80065ec:	8d400915 	stw	r21,36(r17)
 80065f0:	8d000a15 	stw	r20,40(r17)
 80065f4:	8cc00b15 	stw	r19,44(r17)
 80065f8:	8080030d 	sth	r2,12(r16)
 80065fc:	00800084 	movi	r2,2
 8006600:	80000015 	stw	zero,0(r16)
 8006604:	80000115 	stw	zero,4(r16)
 8006608:	80000215 	stw	zero,8(r16)
 800660c:	80001915 	stw	zero,100(r16)
 8006610:	8080038d 	sth	r2,14(r16)
 8006614:	80000415 	stw	zero,16(r16)
 8006618:	80000515 	stw	zero,20(r16)
 800661c:	80000615 	stw	zero,24(r16)
 8006620:	b80d883a 	mov	r6,r23
 8006624:	000b883a 	mov	r5,zero
 8006628:	81001704 	addi	r4,r16,92
 800662c:	80081280 	call	8008128 <memset>
 8006630:	00800044 	movi	r2,1
 8006634:	84000715 	stw	r16,28(r16)
 8006638:	85800815 	stw	r22,32(r16)
 800663c:	85400915 	stw	r21,36(r16)
 8006640:	85000a15 	stw	r20,40(r16)
 8006644:	84c00b15 	stw	r19,44(r16)
 8006648:	90800e15 	stw	r2,56(r18)
 800664c:	dfc00817 	ldw	ra,32(sp)
 8006650:	ddc00717 	ldw	r23,28(sp)
 8006654:	dd800617 	ldw	r22,24(sp)
 8006658:	dd400517 	ldw	r21,20(sp)
 800665c:	dd000417 	ldw	r20,16(sp)
 8006660:	dcc00317 	ldw	r19,12(sp)
 8006664:	dc800217 	ldw	r18,8(sp)
 8006668:	dc400117 	ldw	r17,4(sp)
 800666c:	dc000017 	ldw	r16,0(sp)
 8006670:	dec00904 	addi	sp,sp,36
 8006674:	f800283a 	ret

08006678 <__fp_lock>:
 8006678:	0005883a 	mov	r2,zero
 800667c:	f800283a 	ret

08006680 <__sfmoreglue>:
 8006680:	defffc04 	addi	sp,sp,-16
 8006684:	dc800215 	stw	r18,8(sp)
 8006688:	2825883a 	mov	r18,r5
 800668c:	dc000015 	stw	r16,0(sp)
 8006690:	01401a04 	movi	r5,104
 8006694:	2021883a 	mov	r16,r4
 8006698:	913fffc4 	addi	r4,r18,-1
 800669c:	dfc00315 	stw	ra,12(sp)
 80066a0:	dc400115 	stw	r17,4(sp)
 80066a4:	800c9040 	call	800c904 <__mulsi3>
 80066a8:	8009883a 	mov	r4,r16
 80066ac:	11401d04 	addi	r5,r2,116
 80066b0:	1023883a 	mov	r17,r2
 80066b4:	80075940 	call	8007594 <_malloc_r>
 80066b8:	1021883a 	mov	r16,r2
 80066bc:	10000726 	beq	r2,zero,80066dc <__sfmoreglue+0x5c>
 80066c0:	11000304 	addi	r4,r2,12
 80066c4:	10000015 	stw	zero,0(r2)
 80066c8:	14800115 	stw	r18,4(r2)
 80066cc:	11000215 	stw	r4,8(r2)
 80066d0:	89801a04 	addi	r6,r17,104
 80066d4:	000b883a 	mov	r5,zero
 80066d8:	80081280 	call	8008128 <memset>
 80066dc:	8005883a 	mov	r2,r16
 80066e0:	dfc00317 	ldw	ra,12(sp)
 80066e4:	dc800217 	ldw	r18,8(sp)
 80066e8:	dc400117 	ldw	r17,4(sp)
 80066ec:	dc000017 	ldw	r16,0(sp)
 80066f0:	dec00404 	addi	sp,sp,16
 80066f4:	f800283a 	ret

080066f8 <__sfp>:
 80066f8:	defffb04 	addi	sp,sp,-20
 80066fc:	dc000015 	stw	r16,0(sp)
 8006700:	04020074 	movhi	r16,2049
 8006704:	840fc504 	addi	r16,r16,16148
 8006708:	dcc00315 	stw	r19,12(sp)
 800670c:	2027883a 	mov	r19,r4
 8006710:	81000017 	ldw	r4,0(r16)
 8006714:	dfc00415 	stw	ra,16(sp)
 8006718:	dc800215 	stw	r18,8(sp)
 800671c:	20800e17 	ldw	r2,56(r4)
 8006720:	dc400115 	stw	r17,4(sp)
 8006724:	1000021e 	bne	r2,zero,8006730 <__sfp+0x38>
 8006728:	80064dc0 	call	80064dc <__sinit.part.1>
 800672c:	81000017 	ldw	r4,0(r16)
 8006730:	2480b804 	addi	r18,r4,736
 8006734:	047fffc4 	movi	r17,-1
 8006738:	91000117 	ldw	r4,4(r18)
 800673c:	94000217 	ldw	r16,8(r18)
 8006740:	213fffc4 	addi	r4,r4,-1
 8006744:	20000a16 	blt	r4,zero,8006770 <__sfp+0x78>
 8006748:	8080030f 	ldh	r2,12(r16)
 800674c:	10000c26 	beq	r2,zero,8006780 <__sfp+0x88>
 8006750:	80c01d04 	addi	r3,r16,116
 8006754:	00000206 	br	8006760 <__sfp+0x68>
 8006758:	18bfe60f 	ldh	r2,-104(r3)
 800675c:	10000826 	beq	r2,zero,8006780 <__sfp+0x88>
 8006760:	213fffc4 	addi	r4,r4,-1
 8006764:	1c3ffd04 	addi	r16,r3,-12
 8006768:	18c01a04 	addi	r3,r3,104
 800676c:	247ffa1e 	bne	r4,r17,8006758 <__alt_data_end+0xfc006758>
 8006770:	90800017 	ldw	r2,0(r18)
 8006774:	10001d26 	beq	r2,zero,80067ec <__sfp+0xf4>
 8006778:	1025883a 	mov	r18,r2
 800677c:	003fee06 	br	8006738 <__alt_data_end+0xfc006738>
 8006780:	00bfffc4 	movi	r2,-1
 8006784:	8080038d 	sth	r2,14(r16)
 8006788:	00800044 	movi	r2,1
 800678c:	8080030d 	sth	r2,12(r16)
 8006790:	80001915 	stw	zero,100(r16)
 8006794:	80000015 	stw	zero,0(r16)
 8006798:	80000215 	stw	zero,8(r16)
 800679c:	80000115 	stw	zero,4(r16)
 80067a0:	80000415 	stw	zero,16(r16)
 80067a4:	80000515 	stw	zero,20(r16)
 80067a8:	80000615 	stw	zero,24(r16)
 80067ac:	01800204 	movi	r6,8
 80067b0:	000b883a 	mov	r5,zero
 80067b4:	81001704 	addi	r4,r16,92
 80067b8:	80081280 	call	8008128 <memset>
 80067bc:	8005883a 	mov	r2,r16
 80067c0:	80000c15 	stw	zero,48(r16)
 80067c4:	80000d15 	stw	zero,52(r16)
 80067c8:	80001115 	stw	zero,68(r16)
 80067cc:	80001215 	stw	zero,72(r16)
 80067d0:	dfc00417 	ldw	ra,16(sp)
 80067d4:	dcc00317 	ldw	r19,12(sp)
 80067d8:	dc800217 	ldw	r18,8(sp)
 80067dc:	dc400117 	ldw	r17,4(sp)
 80067e0:	dc000017 	ldw	r16,0(sp)
 80067e4:	dec00504 	addi	sp,sp,20
 80067e8:	f800283a 	ret
 80067ec:	01400104 	movi	r5,4
 80067f0:	9809883a 	mov	r4,r19
 80067f4:	80066800 	call	8006680 <__sfmoreglue>
 80067f8:	90800015 	stw	r2,0(r18)
 80067fc:	103fde1e 	bne	r2,zero,8006778 <__alt_data_end+0xfc006778>
 8006800:	00800304 	movi	r2,12
 8006804:	98800015 	stw	r2,0(r19)
 8006808:	0005883a 	mov	r2,zero
 800680c:	003ff006 	br	80067d0 <__alt_data_end+0xfc0067d0>

08006810 <_cleanup>:
 8006810:	00820074 	movhi	r2,2049
 8006814:	108fc504 	addi	r2,r2,16148
 8006818:	11000017 	ldw	r4,0(r2)
 800681c:	01420074 	movhi	r5,2049
 8006820:	296cf504 	addi	r5,r5,-19500
 8006824:	80072381 	jmpi	8007238 <_fwalk_reent>

08006828 <__sinit>:
 8006828:	20800e17 	ldw	r2,56(r4)
 800682c:	10000126 	beq	r2,zero,8006834 <__sinit+0xc>
 8006830:	f800283a 	ret
 8006834:	80064dc1 	jmpi	80064dc <__sinit.part.1>

08006838 <__sfp_lock_acquire>:
 8006838:	f800283a 	ret

0800683c <__sfp_lock_release>:
 800683c:	f800283a 	ret

08006840 <__sinit_lock_acquire>:
 8006840:	f800283a 	ret

08006844 <__sinit_lock_release>:
 8006844:	f800283a 	ret

08006848 <__fp_lock_all>:
 8006848:	00820074 	movhi	r2,2049
 800684c:	108fc604 	addi	r2,r2,16152
 8006850:	11000017 	ldw	r4,0(r2)
 8006854:	01420034 	movhi	r5,2048
 8006858:	29599e04 	addi	r5,r5,26232
 800685c:	80071741 	jmpi	8007174 <_fwalk>

08006860 <__fp_unlock_all>:
 8006860:	00820074 	movhi	r2,2049
 8006864:	108fc604 	addi	r2,r2,16152
 8006868:	11000017 	ldw	r4,0(r2)
 800686c:	01420034 	movhi	r5,2048
 8006870:	29593204 	addi	r5,r5,25800
 8006874:	80071741 	jmpi	8007174 <_fwalk>

08006878 <_malloc_trim_r>:
 8006878:	defffb04 	addi	sp,sp,-20
 800687c:	dcc00315 	stw	r19,12(sp)
 8006880:	04c20074 	movhi	r19,2049
 8006884:	dc800215 	stw	r18,8(sp)
 8006888:	dc400115 	stw	r17,4(sp)
 800688c:	dc000015 	stw	r16,0(sp)
 8006890:	dfc00415 	stw	ra,16(sp)
 8006894:	2821883a 	mov	r16,r5
 8006898:	9cca4104 	addi	r19,r19,10500
 800689c:	2025883a 	mov	r18,r4
 80068a0:	800f76c0 	call	800f76c <__malloc_lock>
 80068a4:	98800217 	ldw	r2,8(r19)
 80068a8:	14400117 	ldw	r17,4(r2)
 80068ac:	00bfff04 	movi	r2,-4
 80068b0:	88a2703a 	and	r17,r17,r2
 80068b4:	8c21c83a 	sub	r16,r17,r16
 80068b8:	8403fbc4 	addi	r16,r16,4079
 80068bc:	8020d33a 	srli	r16,r16,12
 80068c0:	0083ffc4 	movi	r2,4095
 80068c4:	843fffc4 	addi	r16,r16,-1
 80068c8:	8020933a 	slli	r16,r16,12
 80068cc:	1400060e 	bge	r2,r16,80068e8 <_malloc_trim_r+0x70>
 80068d0:	000b883a 	mov	r5,zero
 80068d4:	9009883a 	mov	r4,r18
 80068d8:	80098e00 	call	80098e0 <_sbrk_r>
 80068dc:	98c00217 	ldw	r3,8(r19)
 80068e0:	1c47883a 	add	r3,r3,r17
 80068e4:	10c00a26 	beq	r2,r3,8006910 <_malloc_trim_r+0x98>
 80068e8:	9009883a 	mov	r4,r18
 80068ec:	800f7900 	call	800f790 <__malloc_unlock>
 80068f0:	0005883a 	mov	r2,zero
 80068f4:	dfc00417 	ldw	ra,16(sp)
 80068f8:	dcc00317 	ldw	r19,12(sp)
 80068fc:	dc800217 	ldw	r18,8(sp)
 8006900:	dc400117 	ldw	r17,4(sp)
 8006904:	dc000017 	ldw	r16,0(sp)
 8006908:	dec00504 	addi	sp,sp,20
 800690c:	f800283a 	ret
 8006910:	040bc83a 	sub	r5,zero,r16
 8006914:	9009883a 	mov	r4,r18
 8006918:	80098e00 	call	80098e0 <_sbrk_r>
 800691c:	00ffffc4 	movi	r3,-1
 8006920:	10c00d26 	beq	r2,r3,8006958 <_malloc_trim_r+0xe0>
 8006924:	00c20074 	movhi	r3,2049
 8006928:	18d69f04 	addi	r3,r3,23164
 800692c:	18800017 	ldw	r2,0(r3)
 8006930:	99000217 	ldw	r4,8(r19)
 8006934:	8c23c83a 	sub	r17,r17,r16
 8006938:	8c400054 	ori	r17,r17,1
 800693c:	1421c83a 	sub	r16,r2,r16
 8006940:	24400115 	stw	r17,4(r4)
 8006944:	9009883a 	mov	r4,r18
 8006948:	1c000015 	stw	r16,0(r3)
 800694c:	800f7900 	call	800f790 <__malloc_unlock>
 8006950:	00800044 	movi	r2,1
 8006954:	003fe706 	br	80068f4 <__alt_data_end+0xfc0068f4>
 8006958:	000b883a 	mov	r5,zero
 800695c:	9009883a 	mov	r4,r18
 8006960:	80098e00 	call	80098e0 <_sbrk_r>
 8006964:	99000217 	ldw	r4,8(r19)
 8006968:	014003c4 	movi	r5,15
 800696c:	1107c83a 	sub	r3,r2,r4
 8006970:	28ffdd0e 	bge	r5,r3,80068e8 <__alt_data_end+0xfc0068e8>
 8006974:	01420074 	movhi	r5,2049
 8006978:	294fc804 	addi	r5,r5,16160
 800697c:	29400017 	ldw	r5,0(r5)
 8006980:	18c00054 	ori	r3,r3,1
 8006984:	20c00115 	stw	r3,4(r4)
 8006988:	00c20074 	movhi	r3,2049
 800698c:	1145c83a 	sub	r2,r2,r5
 8006990:	18d69f04 	addi	r3,r3,23164
 8006994:	18800015 	stw	r2,0(r3)
 8006998:	003fd306 	br	80068e8 <__alt_data_end+0xfc0068e8>

0800699c <_free_r>:
 800699c:	28004126 	beq	r5,zero,8006aa4 <_free_r+0x108>
 80069a0:	defffd04 	addi	sp,sp,-12
 80069a4:	dc400115 	stw	r17,4(sp)
 80069a8:	dc000015 	stw	r16,0(sp)
 80069ac:	2023883a 	mov	r17,r4
 80069b0:	2821883a 	mov	r16,r5
 80069b4:	dfc00215 	stw	ra,8(sp)
 80069b8:	800f76c0 	call	800f76c <__malloc_lock>
 80069bc:	81ffff17 	ldw	r7,-4(r16)
 80069c0:	00bfff84 	movi	r2,-2
 80069c4:	01020074 	movhi	r4,2049
 80069c8:	81bffe04 	addi	r6,r16,-8
 80069cc:	3884703a 	and	r2,r7,r2
 80069d0:	210a4104 	addi	r4,r4,10500
 80069d4:	308b883a 	add	r5,r6,r2
 80069d8:	2a400117 	ldw	r9,4(r5)
 80069dc:	22000217 	ldw	r8,8(r4)
 80069e0:	00ffff04 	movi	r3,-4
 80069e4:	48c6703a 	and	r3,r9,r3
 80069e8:	2a005726 	beq	r5,r8,8006b48 <_free_r+0x1ac>
 80069ec:	28c00115 	stw	r3,4(r5)
 80069f0:	39c0004c 	andi	r7,r7,1
 80069f4:	3800091e 	bne	r7,zero,8006a1c <_free_r+0x80>
 80069f8:	823ffe17 	ldw	r8,-8(r16)
 80069fc:	22400204 	addi	r9,r4,8
 8006a00:	320dc83a 	sub	r6,r6,r8
 8006a04:	31c00217 	ldw	r7,8(r6)
 8006a08:	1205883a 	add	r2,r2,r8
 8006a0c:	3a406526 	beq	r7,r9,8006ba4 <_free_r+0x208>
 8006a10:	32000317 	ldw	r8,12(r6)
 8006a14:	3a000315 	stw	r8,12(r7)
 8006a18:	41c00215 	stw	r7,8(r8)
 8006a1c:	28cf883a 	add	r7,r5,r3
 8006a20:	39c00117 	ldw	r7,4(r7)
 8006a24:	39c0004c 	andi	r7,r7,1
 8006a28:	38003a26 	beq	r7,zero,8006b14 <_free_r+0x178>
 8006a2c:	10c00054 	ori	r3,r2,1
 8006a30:	30c00115 	stw	r3,4(r6)
 8006a34:	3087883a 	add	r3,r6,r2
 8006a38:	18800015 	stw	r2,0(r3)
 8006a3c:	00c07fc4 	movi	r3,511
 8006a40:	18801936 	bltu	r3,r2,8006aa8 <_free_r+0x10c>
 8006a44:	1004d0fa 	srli	r2,r2,3
 8006a48:	01c00044 	movi	r7,1
 8006a4c:	21400117 	ldw	r5,4(r4)
 8006a50:	10c00044 	addi	r3,r2,1
 8006a54:	18c7883a 	add	r3,r3,r3
 8006a58:	1005d0ba 	srai	r2,r2,2
 8006a5c:	18c7883a 	add	r3,r3,r3
 8006a60:	18c7883a 	add	r3,r3,r3
 8006a64:	1907883a 	add	r3,r3,r4
 8006a68:	3884983a 	sll	r2,r7,r2
 8006a6c:	19c00017 	ldw	r7,0(r3)
 8006a70:	1a3ffe04 	addi	r8,r3,-8
 8006a74:	1144b03a 	or	r2,r2,r5
 8006a78:	32000315 	stw	r8,12(r6)
 8006a7c:	31c00215 	stw	r7,8(r6)
 8006a80:	20800115 	stw	r2,4(r4)
 8006a84:	19800015 	stw	r6,0(r3)
 8006a88:	39800315 	stw	r6,12(r7)
 8006a8c:	8809883a 	mov	r4,r17
 8006a90:	dfc00217 	ldw	ra,8(sp)
 8006a94:	dc400117 	ldw	r17,4(sp)
 8006a98:	dc000017 	ldw	r16,0(sp)
 8006a9c:	dec00304 	addi	sp,sp,12
 8006aa0:	800f7901 	jmpi	800f790 <__malloc_unlock>
 8006aa4:	f800283a 	ret
 8006aa8:	100ad27a 	srli	r5,r2,9
 8006aac:	00c00104 	movi	r3,4
 8006ab0:	19404a36 	bltu	r3,r5,8006bdc <_free_r+0x240>
 8006ab4:	100ad1ba 	srli	r5,r2,6
 8006ab8:	28c00e44 	addi	r3,r5,57
 8006abc:	18c7883a 	add	r3,r3,r3
 8006ac0:	29400e04 	addi	r5,r5,56
 8006ac4:	18c7883a 	add	r3,r3,r3
 8006ac8:	18c7883a 	add	r3,r3,r3
 8006acc:	1909883a 	add	r4,r3,r4
 8006ad0:	20c00017 	ldw	r3,0(r4)
 8006ad4:	01c20074 	movhi	r7,2049
 8006ad8:	213ffe04 	addi	r4,r4,-8
 8006adc:	39ca4104 	addi	r7,r7,10500
 8006ae0:	20c04426 	beq	r4,r3,8006bf4 <_free_r+0x258>
 8006ae4:	01ffff04 	movi	r7,-4
 8006ae8:	19400117 	ldw	r5,4(r3)
 8006aec:	29ca703a 	and	r5,r5,r7
 8006af0:	1140022e 	bgeu	r2,r5,8006afc <_free_r+0x160>
 8006af4:	18c00217 	ldw	r3,8(r3)
 8006af8:	20fffb1e 	bne	r4,r3,8006ae8 <__alt_data_end+0xfc006ae8>
 8006afc:	19000317 	ldw	r4,12(r3)
 8006b00:	31000315 	stw	r4,12(r6)
 8006b04:	30c00215 	stw	r3,8(r6)
 8006b08:	21800215 	stw	r6,8(r4)
 8006b0c:	19800315 	stw	r6,12(r3)
 8006b10:	003fde06 	br	8006a8c <__alt_data_end+0xfc006a8c>
 8006b14:	29c00217 	ldw	r7,8(r5)
 8006b18:	10c5883a 	add	r2,r2,r3
 8006b1c:	00c20074 	movhi	r3,2049
 8006b20:	18ca4304 	addi	r3,r3,10508
 8006b24:	38c03b26 	beq	r7,r3,8006c14 <_free_r+0x278>
 8006b28:	2a000317 	ldw	r8,12(r5)
 8006b2c:	11400054 	ori	r5,r2,1
 8006b30:	3087883a 	add	r3,r6,r2
 8006b34:	3a000315 	stw	r8,12(r7)
 8006b38:	41c00215 	stw	r7,8(r8)
 8006b3c:	31400115 	stw	r5,4(r6)
 8006b40:	18800015 	stw	r2,0(r3)
 8006b44:	003fbd06 	br	8006a3c <__alt_data_end+0xfc006a3c>
 8006b48:	39c0004c 	andi	r7,r7,1
 8006b4c:	10c5883a 	add	r2,r2,r3
 8006b50:	3800071e 	bne	r7,zero,8006b70 <_free_r+0x1d4>
 8006b54:	81fffe17 	ldw	r7,-8(r16)
 8006b58:	31cdc83a 	sub	r6,r6,r7
 8006b5c:	30c00317 	ldw	r3,12(r6)
 8006b60:	31400217 	ldw	r5,8(r6)
 8006b64:	11c5883a 	add	r2,r2,r7
 8006b68:	28c00315 	stw	r3,12(r5)
 8006b6c:	19400215 	stw	r5,8(r3)
 8006b70:	10c00054 	ori	r3,r2,1
 8006b74:	30c00115 	stw	r3,4(r6)
 8006b78:	00c20074 	movhi	r3,2049
 8006b7c:	18cfc904 	addi	r3,r3,16164
 8006b80:	18c00017 	ldw	r3,0(r3)
 8006b84:	21800215 	stw	r6,8(r4)
 8006b88:	10ffc036 	bltu	r2,r3,8006a8c <__alt_data_end+0xfc006a8c>
 8006b8c:	00820074 	movhi	r2,2049
 8006b90:	10969604 	addi	r2,r2,23128
 8006b94:	11400017 	ldw	r5,0(r2)
 8006b98:	8809883a 	mov	r4,r17
 8006b9c:	80068780 	call	8006878 <_malloc_trim_r>
 8006ba0:	003fba06 	br	8006a8c <__alt_data_end+0xfc006a8c>
 8006ba4:	28c9883a 	add	r4,r5,r3
 8006ba8:	21000117 	ldw	r4,4(r4)
 8006bac:	2100004c 	andi	r4,r4,1
 8006bb0:	2000391e 	bne	r4,zero,8006c98 <_free_r+0x2fc>
 8006bb4:	29c00217 	ldw	r7,8(r5)
 8006bb8:	29000317 	ldw	r4,12(r5)
 8006bbc:	1885883a 	add	r2,r3,r2
 8006bc0:	10c00054 	ori	r3,r2,1
 8006bc4:	39000315 	stw	r4,12(r7)
 8006bc8:	21c00215 	stw	r7,8(r4)
 8006bcc:	30c00115 	stw	r3,4(r6)
 8006bd0:	308d883a 	add	r6,r6,r2
 8006bd4:	30800015 	stw	r2,0(r6)
 8006bd8:	003fac06 	br	8006a8c <__alt_data_end+0xfc006a8c>
 8006bdc:	00c00504 	movi	r3,20
 8006be0:	19401536 	bltu	r3,r5,8006c38 <_free_r+0x29c>
 8006be4:	28c01704 	addi	r3,r5,92
 8006be8:	18c7883a 	add	r3,r3,r3
 8006bec:	294016c4 	addi	r5,r5,91
 8006bf0:	003fb406 	br	8006ac4 <__alt_data_end+0xfc006ac4>
 8006bf4:	280bd0ba 	srai	r5,r5,2
 8006bf8:	00c00044 	movi	r3,1
 8006bfc:	38800117 	ldw	r2,4(r7)
 8006c00:	194a983a 	sll	r5,r3,r5
 8006c04:	2007883a 	mov	r3,r4
 8006c08:	2884b03a 	or	r2,r5,r2
 8006c0c:	38800115 	stw	r2,4(r7)
 8006c10:	003fbb06 	br	8006b00 <__alt_data_end+0xfc006b00>
 8006c14:	21800515 	stw	r6,20(r4)
 8006c18:	21800415 	stw	r6,16(r4)
 8006c1c:	10c00054 	ori	r3,r2,1
 8006c20:	31c00315 	stw	r7,12(r6)
 8006c24:	31c00215 	stw	r7,8(r6)
 8006c28:	30c00115 	stw	r3,4(r6)
 8006c2c:	308d883a 	add	r6,r6,r2
 8006c30:	30800015 	stw	r2,0(r6)
 8006c34:	003f9506 	br	8006a8c <__alt_data_end+0xfc006a8c>
 8006c38:	00c01504 	movi	r3,84
 8006c3c:	19400536 	bltu	r3,r5,8006c54 <_free_r+0x2b8>
 8006c40:	100ad33a 	srli	r5,r2,12
 8006c44:	28c01bc4 	addi	r3,r5,111
 8006c48:	18c7883a 	add	r3,r3,r3
 8006c4c:	29401b84 	addi	r5,r5,110
 8006c50:	003f9c06 	br	8006ac4 <__alt_data_end+0xfc006ac4>
 8006c54:	00c05504 	movi	r3,340
 8006c58:	19400536 	bltu	r3,r5,8006c70 <_free_r+0x2d4>
 8006c5c:	100ad3fa 	srli	r5,r2,15
 8006c60:	28c01e04 	addi	r3,r5,120
 8006c64:	18c7883a 	add	r3,r3,r3
 8006c68:	29401dc4 	addi	r5,r5,119
 8006c6c:	003f9506 	br	8006ac4 <__alt_data_end+0xfc006ac4>
 8006c70:	00c15504 	movi	r3,1364
 8006c74:	19400536 	bltu	r3,r5,8006c8c <_free_r+0x2f0>
 8006c78:	100ad4ba 	srli	r5,r2,18
 8006c7c:	28c01f44 	addi	r3,r5,125
 8006c80:	18c7883a 	add	r3,r3,r3
 8006c84:	29401f04 	addi	r5,r5,124
 8006c88:	003f8e06 	br	8006ac4 <__alt_data_end+0xfc006ac4>
 8006c8c:	00c03f84 	movi	r3,254
 8006c90:	01401f84 	movi	r5,126
 8006c94:	003f8b06 	br	8006ac4 <__alt_data_end+0xfc006ac4>
 8006c98:	10c00054 	ori	r3,r2,1
 8006c9c:	30c00115 	stw	r3,4(r6)
 8006ca0:	308d883a 	add	r6,r6,r2
 8006ca4:	30800015 	stw	r2,0(r6)
 8006ca8:	003f7806 	br	8006a8c <__alt_data_end+0xfc006a8c>

08006cac <__sfvwrite_r>:
 8006cac:	30800217 	ldw	r2,8(r6)
 8006cb0:	10006726 	beq	r2,zero,8006e50 <__sfvwrite_r+0x1a4>
 8006cb4:	28c0030b 	ldhu	r3,12(r5)
 8006cb8:	defff404 	addi	sp,sp,-48
 8006cbc:	dd400715 	stw	r21,28(sp)
 8006cc0:	dd000615 	stw	r20,24(sp)
 8006cc4:	dc000215 	stw	r16,8(sp)
 8006cc8:	dfc00b15 	stw	ra,44(sp)
 8006ccc:	df000a15 	stw	fp,40(sp)
 8006cd0:	ddc00915 	stw	r23,36(sp)
 8006cd4:	dd800815 	stw	r22,32(sp)
 8006cd8:	dcc00515 	stw	r19,20(sp)
 8006cdc:	dc800415 	stw	r18,16(sp)
 8006ce0:	dc400315 	stw	r17,12(sp)
 8006ce4:	1880020c 	andi	r2,r3,8
 8006ce8:	2821883a 	mov	r16,r5
 8006cec:	202b883a 	mov	r21,r4
 8006cf0:	3029883a 	mov	r20,r6
 8006cf4:	10002726 	beq	r2,zero,8006d94 <__sfvwrite_r+0xe8>
 8006cf8:	28800417 	ldw	r2,16(r5)
 8006cfc:	10002526 	beq	r2,zero,8006d94 <__sfvwrite_r+0xe8>
 8006d00:	1880008c 	andi	r2,r3,2
 8006d04:	a4400017 	ldw	r17,0(r20)
 8006d08:	10002a26 	beq	r2,zero,8006db4 <__sfvwrite_r+0x108>
 8006d0c:	05a00034 	movhi	r22,32768
 8006d10:	0027883a 	mov	r19,zero
 8006d14:	0025883a 	mov	r18,zero
 8006d18:	b5bf0004 	addi	r22,r22,-1024
 8006d1c:	980d883a 	mov	r6,r19
 8006d20:	a809883a 	mov	r4,r21
 8006d24:	90004626 	beq	r18,zero,8006e40 <__sfvwrite_r+0x194>
 8006d28:	900f883a 	mov	r7,r18
 8006d2c:	b480022e 	bgeu	r22,r18,8006d38 <__sfvwrite_r+0x8c>
 8006d30:	01e00034 	movhi	r7,32768
 8006d34:	39ff0004 	addi	r7,r7,-1024
 8006d38:	80800917 	ldw	r2,36(r16)
 8006d3c:	81400717 	ldw	r5,28(r16)
 8006d40:	103ee83a 	callr	r2
 8006d44:	00805a0e 	bge	zero,r2,8006eb0 <__sfvwrite_r+0x204>
 8006d48:	a0c00217 	ldw	r3,8(r20)
 8006d4c:	98a7883a 	add	r19,r19,r2
 8006d50:	90a5c83a 	sub	r18,r18,r2
 8006d54:	1885c83a 	sub	r2,r3,r2
 8006d58:	a0800215 	stw	r2,8(r20)
 8006d5c:	103fef1e 	bne	r2,zero,8006d1c <__alt_data_end+0xfc006d1c>
 8006d60:	0005883a 	mov	r2,zero
 8006d64:	dfc00b17 	ldw	ra,44(sp)
 8006d68:	df000a17 	ldw	fp,40(sp)
 8006d6c:	ddc00917 	ldw	r23,36(sp)
 8006d70:	dd800817 	ldw	r22,32(sp)
 8006d74:	dd400717 	ldw	r21,28(sp)
 8006d78:	dd000617 	ldw	r20,24(sp)
 8006d7c:	dcc00517 	ldw	r19,20(sp)
 8006d80:	dc800417 	ldw	r18,16(sp)
 8006d84:	dc400317 	ldw	r17,12(sp)
 8006d88:	dc000217 	ldw	r16,8(sp)
 8006d8c:	dec00c04 	addi	sp,sp,48
 8006d90:	f800283a 	ret
 8006d94:	800b883a 	mov	r5,r16
 8006d98:	a809883a 	mov	r4,r21
 8006d9c:	800481c0 	call	800481c <__swsetup_r>
 8006da0:	1000ee1e 	bne	r2,zero,800715c <__sfvwrite_r+0x4b0>
 8006da4:	80c0030b 	ldhu	r3,12(r16)
 8006da8:	a4400017 	ldw	r17,0(r20)
 8006dac:	1880008c 	andi	r2,r3,2
 8006db0:	103fd61e 	bne	r2,zero,8006d0c <__alt_data_end+0xfc006d0c>
 8006db4:	1880004c 	andi	r2,r3,1
 8006db8:	1000421e 	bne	r2,zero,8006ec4 <__sfvwrite_r+0x218>
 8006dbc:	0039883a 	mov	fp,zero
 8006dc0:	0025883a 	mov	r18,zero
 8006dc4:	90001a26 	beq	r18,zero,8006e30 <__sfvwrite_r+0x184>
 8006dc8:	1880800c 	andi	r2,r3,512
 8006dcc:	84c00217 	ldw	r19,8(r16)
 8006dd0:	10002126 	beq	r2,zero,8006e58 <__sfvwrite_r+0x1ac>
 8006dd4:	982f883a 	mov	r23,r19
 8006dd8:	94c09636 	bltu	r18,r19,8007034 <__sfvwrite_r+0x388>
 8006ddc:	1881200c 	andi	r2,r3,1152
 8006de0:	1000a11e 	bne	r2,zero,8007068 <__sfvwrite_r+0x3bc>
 8006de4:	81000017 	ldw	r4,0(r16)
 8006de8:	b80d883a 	mov	r6,r23
 8006dec:	e00b883a 	mov	r5,fp
 8006df0:	8007fcc0 	call	8007fcc <memmove>
 8006df4:	80c00217 	ldw	r3,8(r16)
 8006df8:	81000017 	ldw	r4,0(r16)
 8006dfc:	9005883a 	mov	r2,r18
 8006e00:	1ce7c83a 	sub	r19,r3,r19
 8006e04:	25cf883a 	add	r7,r4,r23
 8006e08:	84c00215 	stw	r19,8(r16)
 8006e0c:	81c00015 	stw	r7,0(r16)
 8006e10:	a0c00217 	ldw	r3,8(r20)
 8006e14:	e0b9883a 	add	fp,fp,r2
 8006e18:	90a5c83a 	sub	r18,r18,r2
 8006e1c:	18a7c83a 	sub	r19,r3,r2
 8006e20:	a4c00215 	stw	r19,8(r20)
 8006e24:	983fce26 	beq	r19,zero,8006d60 <__alt_data_end+0xfc006d60>
 8006e28:	80c0030b 	ldhu	r3,12(r16)
 8006e2c:	903fe61e 	bne	r18,zero,8006dc8 <__alt_data_end+0xfc006dc8>
 8006e30:	8f000017 	ldw	fp,0(r17)
 8006e34:	8c800117 	ldw	r18,4(r17)
 8006e38:	8c400204 	addi	r17,r17,8
 8006e3c:	003fe106 	br	8006dc4 <__alt_data_end+0xfc006dc4>
 8006e40:	8cc00017 	ldw	r19,0(r17)
 8006e44:	8c800117 	ldw	r18,4(r17)
 8006e48:	8c400204 	addi	r17,r17,8
 8006e4c:	003fb306 	br	8006d1c <__alt_data_end+0xfc006d1c>
 8006e50:	0005883a 	mov	r2,zero
 8006e54:	f800283a 	ret
 8006e58:	81000017 	ldw	r4,0(r16)
 8006e5c:	80800417 	ldw	r2,16(r16)
 8006e60:	11005a36 	bltu	r2,r4,8006fcc <__sfvwrite_r+0x320>
 8006e64:	85c00517 	ldw	r23,20(r16)
 8006e68:	95c05836 	bltu	r18,r23,8006fcc <__sfvwrite_r+0x320>
 8006e6c:	00a00034 	movhi	r2,32768
 8006e70:	10bfffc4 	addi	r2,r2,-1
 8006e74:	9009883a 	mov	r4,r18
 8006e78:	1480012e 	bgeu	r2,r18,8006e80 <__sfvwrite_r+0x1d4>
 8006e7c:	1009883a 	mov	r4,r2
 8006e80:	b80b883a 	mov	r5,r23
 8006e84:	800c7500 	call	800c750 <__divsi3>
 8006e88:	b80b883a 	mov	r5,r23
 8006e8c:	1009883a 	mov	r4,r2
 8006e90:	800c9040 	call	800c904 <__mulsi3>
 8006e94:	81400717 	ldw	r5,28(r16)
 8006e98:	80c00917 	ldw	r3,36(r16)
 8006e9c:	100f883a 	mov	r7,r2
 8006ea0:	e00d883a 	mov	r6,fp
 8006ea4:	a809883a 	mov	r4,r21
 8006ea8:	183ee83a 	callr	r3
 8006eac:	00bfd816 	blt	zero,r2,8006e10 <__alt_data_end+0xfc006e10>
 8006eb0:	8080030b 	ldhu	r2,12(r16)
 8006eb4:	10801014 	ori	r2,r2,64
 8006eb8:	8080030d 	sth	r2,12(r16)
 8006ebc:	00bfffc4 	movi	r2,-1
 8006ec0:	003fa806 	br	8006d64 <__alt_data_end+0xfc006d64>
 8006ec4:	0027883a 	mov	r19,zero
 8006ec8:	0011883a 	mov	r8,zero
 8006ecc:	0039883a 	mov	fp,zero
 8006ed0:	0025883a 	mov	r18,zero
 8006ed4:	90001f26 	beq	r18,zero,8006f54 <__sfvwrite_r+0x2a8>
 8006ed8:	40005a26 	beq	r8,zero,8007044 <__sfvwrite_r+0x398>
 8006edc:	982d883a 	mov	r22,r19
 8006ee0:	94c0012e 	bgeu	r18,r19,8006ee8 <__sfvwrite_r+0x23c>
 8006ee4:	902d883a 	mov	r22,r18
 8006ee8:	81000017 	ldw	r4,0(r16)
 8006eec:	80800417 	ldw	r2,16(r16)
 8006ef0:	b02f883a 	mov	r23,r22
 8006ef4:	81c00517 	ldw	r7,20(r16)
 8006ef8:	1100032e 	bgeu	r2,r4,8006f08 <__sfvwrite_r+0x25c>
 8006efc:	80c00217 	ldw	r3,8(r16)
 8006f00:	38c7883a 	add	r3,r7,r3
 8006f04:	1d801816 	blt	r3,r22,8006f68 <__sfvwrite_r+0x2bc>
 8006f08:	b1c03e16 	blt	r22,r7,8007004 <__sfvwrite_r+0x358>
 8006f0c:	80800917 	ldw	r2,36(r16)
 8006f10:	81400717 	ldw	r5,28(r16)
 8006f14:	e00d883a 	mov	r6,fp
 8006f18:	da000115 	stw	r8,4(sp)
 8006f1c:	a809883a 	mov	r4,r21
 8006f20:	103ee83a 	callr	r2
 8006f24:	102f883a 	mov	r23,r2
 8006f28:	da000117 	ldw	r8,4(sp)
 8006f2c:	00bfe00e 	bge	zero,r2,8006eb0 <__alt_data_end+0xfc006eb0>
 8006f30:	9de7c83a 	sub	r19,r19,r23
 8006f34:	98001f26 	beq	r19,zero,8006fb4 <__sfvwrite_r+0x308>
 8006f38:	a0800217 	ldw	r2,8(r20)
 8006f3c:	e5f9883a 	add	fp,fp,r23
 8006f40:	95e5c83a 	sub	r18,r18,r23
 8006f44:	15efc83a 	sub	r23,r2,r23
 8006f48:	a5c00215 	stw	r23,8(r20)
 8006f4c:	b83f8426 	beq	r23,zero,8006d60 <__alt_data_end+0xfc006d60>
 8006f50:	903fe11e 	bne	r18,zero,8006ed8 <__alt_data_end+0xfc006ed8>
 8006f54:	8f000017 	ldw	fp,0(r17)
 8006f58:	8c800117 	ldw	r18,4(r17)
 8006f5c:	0011883a 	mov	r8,zero
 8006f60:	8c400204 	addi	r17,r17,8
 8006f64:	003fdb06 	br	8006ed4 <__alt_data_end+0xfc006ed4>
 8006f68:	180d883a 	mov	r6,r3
 8006f6c:	e00b883a 	mov	r5,fp
 8006f70:	da000115 	stw	r8,4(sp)
 8006f74:	d8c00015 	stw	r3,0(sp)
 8006f78:	8007fcc0 	call	8007fcc <memmove>
 8006f7c:	d8c00017 	ldw	r3,0(sp)
 8006f80:	80800017 	ldw	r2,0(r16)
 8006f84:	800b883a 	mov	r5,r16
 8006f88:	a809883a 	mov	r4,r21
 8006f8c:	10c5883a 	add	r2,r2,r3
 8006f90:	80800015 	stw	r2,0(r16)
 8006f94:	d8c00015 	stw	r3,0(sp)
 8006f98:	800643c0 	call	800643c <_fflush_r>
 8006f9c:	d8c00017 	ldw	r3,0(sp)
 8006fa0:	da000117 	ldw	r8,4(sp)
 8006fa4:	103fc21e 	bne	r2,zero,8006eb0 <__alt_data_end+0xfc006eb0>
 8006fa8:	182f883a 	mov	r23,r3
 8006fac:	9de7c83a 	sub	r19,r19,r23
 8006fb0:	983fe11e 	bne	r19,zero,8006f38 <__alt_data_end+0xfc006f38>
 8006fb4:	800b883a 	mov	r5,r16
 8006fb8:	a809883a 	mov	r4,r21
 8006fbc:	800643c0 	call	800643c <_fflush_r>
 8006fc0:	103fbb1e 	bne	r2,zero,8006eb0 <__alt_data_end+0xfc006eb0>
 8006fc4:	0011883a 	mov	r8,zero
 8006fc8:	003fdb06 	br	8006f38 <__alt_data_end+0xfc006f38>
 8006fcc:	94c0012e 	bgeu	r18,r19,8006fd4 <__sfvwrite_r+0x328>
 8006fd0:	9027883a 	mov	r19,r18
 8006fd4:	980d883a 	mov	r6,r19
 8006fd8:	e00b883a 	mov	r5,fp
 8006fdc:	8007fcc0 	call	8007fcc <memmove>
 8006fe0:	80800217 	ldw	r2,8(r16)
 8006fe4:	80c00017 	ldw	r3,0(r16)
 8006fe8:	14c5c83a 	sub	r2,r2,r19
 8006fec:	1cc7883a 	add	r3,r3,r19
 8006ff0:	80800215 	stw	r2,8(r16)
 8006ff4:	80c00015 	stw	r3,0(r16)
 8006ff8:	10004326 	beq	r2,zero,8007108 <__sfvwrite_r+0x45c>
 8006ffc:	9805883a 	mov	r2,r19
 8007000:	003f8306 	br	8006e10 <__alt_data_end+0xfc006e10>
 8007004:	b00d883a 	mov	r6,r22
 8007008:	e00b883a 	mov	r5,fp
 800700c:	da000115 	stw	r8,4(sp)
 8007010:	8007fcc0 	call	8007fcc <memmove>
 8007014:	80800217 	ldw	r2,8(r16)
 8007018:	80c00017 	ldw	r3,0(r16)
 800701c:	da000117 	ldw	r8,4(sp)
 8007020:	1585c83a 	sub	r2,r2,r22
 8007024:	1dad883a 	add	r22,r3,r22
 8007028:	80800215 	stw	r2,8(r16)
 800702c:	85800015 	stw	r22,0(r16)
 8007030:	003fbf06 	br	8006f30 <__alt_data_end+0xfc006f30>
 8007034:	81000017 	ldw	r4,0(r16)
 8007038:	9027883a 	mov	r19,r18
 800703c:	902f883a 	mov	r23,r18
 8007040:	003f6906 	br	8006de8 <__alt_data_end+0xfc006de8>
 8007044:	900d883a 	mov	r6,r18
 8007048:	01400284 	movi	r5,10
 800704c:	e009883a 	mov	r4,fp
 8007050:	8007da00 	call	8007da0 <memchr>
 8007054:	10003e26 	beq	r2,zero,8007150 <__sfvwrite_r+0x4a4>
 8007058:	10800044 	addi	r2,r2,1
 800705c:	1727c83a 	sub	r19,r2,fp
 8007060:	02000044 	movi	r8,1
 8007064:	003f9d06 	br	8006edc <__alt_data_end+0xfc006edc>
 8007068:	80800517 	ldw	r2,20(r16)
 800706c:	81400417 	ldw	r5,16(r16)
 8007070:	81c00017 	ldw	r7,0(r16)
 8007074:	10a7883a 	add	r19,r2,r2
 8007078:	9885883a 	add	r2,r19,r2
 800707c:	1026d7fa 	srli	r19,r2,31
 8007080:	396dc83a 	sub	r22,r7,r5
 8007084:	b1000044 	addi	r4,r22,1
 8007088:	9885883a 	add	r2,r19,r2
 800708c:	1027d07a 	srai	r19,r2,1
 8007090:	2485883a 	add	r2,r4,r18
 8007094:	980d883a 	mov	r6,r19
 8007098:	9880022e 	bgeu	r19,r2,80070a4 <__sfvwrite_r+0x3f8>
 800709c:	1027883a 	mov	r19,r2
 80070a0:	100d883a 	mov	r6,r2
 80070a4:	18c1000c 	andi	r3,r3,1024
 80070a8:	18001c26 	beq	r3,zero,800711c <__sfvwrite_r+0x470>
 80070ac:	300b883a 	mov	r5,r6
 80070b0:	a809883a 	mov	r4,r21
 80070b4:	80075940 	call	8007594 <_malloc_r>
 80070b8:	102f883a 	mov	r23,r2
 80070bc:	10002926 	beq	r2,zero,8007164 <__sfvwrite_r+0x4b8>
 80070c0:	81400417 	ldw	r5,16(r16)
 80070c4:	b00d883a 	mov	r6,r22
 80070c8:	1009883a 	mov	r4,r2
 80070cc:	8007e840 	call	8007e84 <memcpy>
 80070d0:	8080030b 	ldhu	r2,12(r16)
 80070d4:	00fedfc4 	movi	r3,-1153
 80070d8:	10c4703a 	and	r2,r2,r3
 80070dc:	10802014 	ori	r2,r2,128
 80070e0:	8080030d 	sth	r2,12(r16)
 80070e4:	bd89883a 	add	r4,r23,r22
 80070e8:	9d8fc83a 	sub	r7,r19,r22
 80070ec:	85c00415 	stw	r23,16(r16)
 80070f0:	84c00515 	stw	r19,20(r16)
 80070f4:	81000015 	stw	r4,0(r16)
 80070f8:	9027883a 	mov	r19,r18
 80070fc:	81c00215 	stw	r7,8(r16)
 8007100:	902f883a 	mov	r23,r18
 8007104:	003f3806 	br	8006de8 <__alt_data_end+0xfc006de8>
 8007108:	800b883a 	mov	r5,r16
 800710c:	a809883a 	mov	r4,r21
 8007110:	800643c0 	call	800643c <_fflush_r>
 8007114:	103fb926 	beq	r2,zero,8006ffc <__alt_data_end+0xfc006ffc>
 8007118:	003f6506 	br	8006eb0 <__alt_data_end+0xfc006eb0>
 800711c:	a809883a 	mov	r4,r21
 8007120:	80093080 	call	8009308 <_realloc_r>
 8007124:	102f883a 	mov	r23,r2
 8007128:	103fee1e 	bne	r2,zero,80070e4 <__alt_data_end+0xfc0070e4>
 800712c:	81400417 	ldw	r5,16(r16)
 8007130:	a809883a 	mov	r4,r21
 8007134:	800699c0 	call	800699c <_free_r>
 8007138:	8080030b 	ldhu	r2,12(r16)
 800713c:	00ffdfc4 	movi	r3,-129
 8007140:	1884703a 	and	r2,r3,r2
 8007144:	00c00304 	movi	r3,12
 8007148:	a8c00015 	stw	r3,0(r21)
 800714c:	003f5906 	br	8006eb4 <__alt_data_end+0xfc006eb4>
 8007150:	94c00044 	addi	r19,r18,1
 8007154:	02000044 	movi	r8,1
 8007158:	003f6006 	br	8006edc <__alt_data_end+0xfc006edc>
 800715c:	00bfffc4 	movi	r2,-1
 8007160:	003f0006 	br	8006d64 <__alt_data_end+0xfc006d64>
 8007164:	00800304 	movi	r2,12
 8007168:	a8800015 	stw	r2,0(r21)
 800716c:	8080030b 	ldhu	r2,12(r16)
 8007170:	003f5006 	br	8006eb4 <__alt_data_end+0xfc006eb4>

08007174 <_fwalk>:
 8007174:	defff704 	addi	sp,sp,-36
 8007178:	dd000415 	stw	r20,16(sp)
 800717c:	dfc00815 	stw	ra,32(sp)
 8007180:	ddc00715 	stw	r23,28(sp)
 8007184:	dd800615 	stw	r22,24(sp)
 8007188:	dd400515 	stw	r21,20(sp)
 800718c:	dcc00315 	stw	r19,12(sp)
 8007190:	dc800215 	stw	r18,8(sp)
 8007194:	dc400115 	stw	r17,4(sp)
 8007198:	dc000015 	stw	r16,0(sp)
 800719c:	2500b804 	addi	r20,r4,736
 80071a0:	a0002326 	beq	r20,zero,8007230 <_fwalk+0xbc>
 80071a4:	282b883a 	mov	r21,r5
 80071a8:	002f883a 	mov	r23,zero
 80071ac:	05800044 	movi	r22,1
 80071b0:	04ffffc4 	movi	r19,-1
 80071b4:	a4400117 	ldw	r17,4(r20)
 80071b8:	a4800217 	ldw	r18,8(r20)
 80071bc:	8c7fffc4 	addi	r17,r17,-1
 80071c0:	88000d16 	blt	r17,zero,80071f8 <_fwalk+0x84>
 80071c4:	94000304 	addi	r16,r18,12
 80071c8:	94800384 	addi	r18,r18,14
 80071cc:	8080000b 	ldhu	r2,0(r16)
 80071d0:	8c7fffc4 	addi	r17,r17,-1
 80071d4:	813ffd04 	addi	r4,r16,-12
 80071d8:	b080042e 	bgeu	r22,r2,80071ec <_fwalk+0x78>
 80071dc:	9080000f 	ldh	r2,0(r18)
 80071e0:	14c00226 	beq	r2,r19,80071ec <_fwalk+0x78>
 80071e4:	a83ee83a 	callr	r21
 80071e8:	b8aeb03a 	or	r23,r23,r2
 80071ec:	84001a04 	addi	r16,r16,104
 80071f0:	94801a04 	addi	r18,r18,104
 80071f4:	8cfff51e 	bne	r17,r19,80071cc <__alt_data_end+0xfc0071cc>
 80071f8:	a5000017 	ldw	r20,0(r20)
 80071fc:	a03fed1e 	bne	r20,zero,80071b4 <__alt_data_end+0xfc0071b4>
 8007200:	b805883a 	mov	r2,r23
 8007204:	dfc00817 	ldw	ra,32(sp)
 8007208:	ddc00717 	ldw	r23,28(sp)
 800720c:	dd800617 	ldw	r22,24(sp)
 8007210:	dd400517 	ldw	r21,20(sp)
 8007214:	dd000417 	ldw	r20,16(sp)
 8007218:	dcc00317 	ldw	r19,12(sp)
 800721c:	dc800217 	ldw	r18,8(sp)
 8007220:	dc400117 	ldw	r17,4(sp)
 8007224:	dc000017 	ldw	r16,0(sp)
 8007228:	dec00904 	addi	sp,sp,36
 800722c:	f800283a 	ret
 8007230:	002f883a 	mov	r23,zero
 8007234:	003ff206 	br	8007200 <__alt_data_end+0xfc007200>

08007238 <_fwalk_reent>:
 8007238:	defff704 	addi	sp,sp,-36
 800723c:	dd000415 	stw	r20,16(sp)
 8007240:	dfc00815 	stw	ra,32(sp)
 8007244:	ddc00715 	stw	r23,28(sp)
 8007248:	dd800615 	stw	r22,24(sp)
 800724c:	dd400515 	stw	r21,20(sp)
 8007250:	dcc00315 	stw	r19,12(sp)
 8007254:	dc800215 	stw	r18,8(sp)
 8007258:	dc400115 	stw	r17,4(sp)
 800725c:	dc000015 	stw	r16,0(sp)
 8007260:	2500b804 	addi	r20,r4,736
 8007264:	a0002326 	beq	r20,zero,80072f4 <_fwalk_reent+0xbc>
 8007268:	282b883a 	mov	r21,r5
 800726c:	2027883a 	mov	r19,r4
 8007270:	002f883a 	mov	r23,zero
 8007274:	05800044 	movi	r22,1
 8007278:	04bfffc4 	movi	r18,-1
 800727c:	a4400117 	ldw	r17,4(r20)
 8007280:	a4000217 	ldw	r16,8(r20)
 8007284:	8c7fffc4 	addi	r17,r17,-1
 8007288:	88000c16 	blt	r17,zero,80072bc <_fwalk_reent+0x84>
 800728c:	84000304 	addi	r16,r16,12
 8007290:	8080000b 	ldhu	r2,0(r16)
 8007294:	8c7fffc4 	addi	r17,r17,-1
 8007298:	817ffd04 	addi	r5,r16,-12
 800729c:	b080052e 	bgeu	r22,r2,80072b4 <_fwalk_reent+0x7c>
 80072a0:	8080008f 	ldh	r2,2(r16)
 80072a4:	9809883a 	mov	r4,r19
 80072a8:	14800226 	beq	r2,r18,80072b4 <_fwalk_reent+0x7c>
 80072ac:	a83ee83a 	callr	r21
 80072b0:	b8aeb03a 	or	r23,r23,r2
 80072b4:	84001a04 	addi	r16,r16,104
 80072b8:	8cbff51e 	bne	r17,r18,8007290 <__alt_data_end+0xfc007290>
 80072bc:	a5000017 	ldw	r20,0(r20)
 80072c0:	a03fee1e 	bne	r20,zero,800727c <__alt_data_end+0xfc00727c>
 80072c4:	b805883a 	mov	r2,r23
 80072c8:	dfc00817 	ldw	ra,32(sp)
 80072cc:	ddc00717 	ldw	r23,28(sp)
 80072d0:	dd800617 	ldw	r22,24(sp)
 80072d4:	dd400517 	ldw	r21,20(sp)
 80072d8:	dd000417 	ldw	r20,16(sp)
 80072dc:	dcc00317 	ldw	r19,12(sp)
 80072e0:	dc800217 	ldw	r18,8(sp)
 80072e4:	dc400117 	ldw	r17,4(sp)
 80072e8:	dc000017 	ldw	r16,0(sp)
 80072ec:	dec00904 	addi	sp,sp,36
 80072f0:	f800283a 	ret
 80072f4:	002f883a 	mov	r23,zero
 80072f8:	003ff206 	br	80072c4 <__alt_data_end+0xfc0072c4>

080072fc <_setlocale_r>:
 80072fc:	30001b26 	beq	r6,zero,800736c <_setlocale_r+0x70>
 8007300:	01420074 	movhi	r5,2049
 8007304:	defffe04 	addi	sp,sp,-8
 8007308:	29487904 	addi	r5,r5,8676
 800730c:	3009883a 	mov	r4,r6
 8007310:	dc000015 	stw	r16,0(sp)
 8007314:	dfc00115 	stw	ra,4(sp)
 8007318:	3021883a 	mov	r16,r6
 800731c:	8009a700 	call	8009a70 <strcmp>
 8007320:	1000061e 	bne	r2,zero,800733c <_setlocale_r+0x40>
 8007324:	00820074 	movhi	r2,2049
 8007328:	10887804 	addi	r2,r2,8672
 800732c:	dfc00117 	ldw	ra,4(sp)
 8007330:	dc000017 	ldw	r16,0(sp)
 8007334:	dec00204 	addi	sp,sp,8
 8007338:	f800283a 	ret
 800733c:	01420074 	movhi	r5,2049
 8007340:	29487804 	addi	r5,r5,8672
 8007344:	8009883a 	mov	r4,r16
 8007348:	8009a700 	call	8009a70 <strcmp>
 800734c:	103ff526 	beq	r2,zero,8007324 <__alt_data_end+0xfc007324>
 8007350:	01420074 	movhi	r5,2049
 8007354:	29486304 	addi	r5,r5,8588
 8007358:	8009883a 	mov	r4,r16
 800735c:	8009a700 	call	8009a70 <strcmp>
 8007360:	103ff026 	beq	r2,zero,8007324 <__alt_data_end+0xfc007324>
 8007364:	0005883a 	mov	r2,zero
 8007368:	003ff006 	br	800732c <__alt_data_end+0xfc00732c>
 800736c:	00820074 	movhi	r2,2049
 8007370:	10887804 	addi	r2,r2,8672
 8007374:	f800283a 	ret

08007378 <__locale_charset>:
 8007378:	00820074 	movhi	r2,2049
 800737c:	108a2b04 	addi	r2,r2,10412
 8007380:	f800283a 	ret

08007384 <__locale_mb_cur_max>:
 8007384:	00820074 	movhi	r2,2049
 8007388:	108fc704 	addi	r2,r2,16156
 800738c:	10800017 	ldw	r2,0(r2)
 8007390:	f800283a 	ret

08007394 <__locale_msgcharset>:
 8007394:	00820074 	movhi	r2,2049
 8007398:	108a2304 	addi	r2,r2,10380
 800739c:	f800283a 	ret

080073a0 <__locale_cjk_lang>:
 80073a0:	0005883a 	mov	r2,zero
 80073a4:	f800283a 	ret

080073a8 <_localeconv_r>:
 80073a8:	00820074 	movhi	r2,2049
 80073ac:	108a3304 	addi	r2,r2,10444
 80073b0:	f800283a 	ret

080073b4 <setlocale>:
 80073b4:	00820074 	movhi	r2,2049
 80073b8:	108fc604 	addi	r2,r2,16152
 80073bc:	280d883a 	mov	r6,r5
 80073c0:	200b883a 	mov	r5,r4
 80073c4:	11000017 	ldw	r4,0(r2)
 80073c8:	80072fc1 	jmpi	80072fc <_setlocale_r>

080073cc <localeconv>:
 80073cc:	00820074 	movhi	r2,2049
 80073d0:	108a3304 	addi	r2,r2,10444
 80073d4:	f800283a 	ret

080073d8 <__smakebuf_r>:
 80073d8:	2880030b 	ldhu	r2,12(r5)
 80073dc:	10c0008c 	andi	r3,r2,2
 80073e0:	1800411e 	bne	r3,zero,80074e8 <__smakebuf_r+0x110>
 80073e4:	deffec04 	addi	sp,sp,-80
 80073e8:	dc000f15 	stw	r16,60(sp)
 80073ec:	2821883a 	mov	r16,r5
 80073f0:	2940038f 	ldh	r5,14(r5)
 80073f4:	dc401015 	stw	r17,64(sp)
 80073f8:	dfc01315 	stw	ra,76(sp)
 80073fc:	dcc01215 	stw	r19,72(sp)
 8007400:	dc801115 	stw	r18,68(sp)
 8007404:	2023883a 	mov	r17,r4
 8007408:	28001c16 	blt	r5,zero,800747c <__smakebuf_r+0xa4>
 800740c:	d80d883a 	mov	r6,sp
 8007410:	800b6e00 	call	800b6e0 <_fstat_r>
 8007414:	10001816 	blt	r2,zero,8007478 <__smakebuf_r+0xa0>
 8007418:	d8800117 	ldw	r2,4(sp)
 800741c:	00e00014 	movui	r3,32768
 8007420:	10bc000c 	andi	r2,r2,61440
 8007424:	14c80020 	cmpeqi	r19,r2,8192
 8007428:	10c03726 	beq	r2,r3,8007508 <__smakebuf_r+0x130>
 800742c:	80c0030b 	ldhu	r3,12(r16)
 8007430:	18c20014 	ori	r3,r3,2048
 8007434:	80c0030d 	sth	r3,12(r16)
 8007438:	00c80004 	movi	r3,8192
 800743c:	10c0521e 	bne	r2,r3,8007588 <__smakebuf_r+0x1b0>
 8007440:	8140038f 	ldh	r5,14(r16)
 8007444:	8809883a 	mov	r4,r17
 8007448:	800b73c0 	call	800b73c <_isatty_r>
 800744c:	10004c26 	beq	r2,zero,8007580 <__smakebuf_r+0x1a8>
 8007450:	8080030b 	ldhu	r2,12(r16)
 8007454:	80c010c4 	addi	r3,r16,67
 8007458:	80c00015 	stw	r3,0(r16)
 800745c:	10800054 	ori	r2,r2,1
 8007460:	8080030d 	sth	r2,12(r16)
 8007464:	00800044 	movi	r2,1
 8007468:	80c00415 	stw	r3,16(r16)
 800746c:	80800515 	stw	r2,20(r16)
 8007470:	04810004 	movi	r18,1024
 8007474:	00000706 	br	8007494 <__smakebuf_r+0xbc>
 8007478:	8080030b 	ldhu	r2,12(r16)
 800747c:	10c0200c 	andi	r3,r2,128
 8007480:	18001f1e 	bne	r3,zero,8007500 <__smakebuf_r+0x128>
 8007484:	04810004 	movi	r18,1024
 8007488:	10820014 	ori	r2,r2,2048
 800748c:	8080030d 	sth	r2,12(r16)
 8007490:	0027883a 	mov	r19,zero
 8007494:	900b883a 	mov	r5,r18
 8007498:	8809883a 	mov	r4,r17
 800749c:	80075940 	call	8007594 <_malloc_r>
 80074a0:	10002c26 	beq	r2,zero,8007554 <__smakebuf_r+0x17c>
 80074a4:	80c0030b 	ldhu	r3,12(r16)
 80074a8:	01020034 	movhi	r4,2048
 80074ac:	21193404 	addi	r4,r4,25808
 80074b0:	89000f15 	stw	r4,60(r17)
 80074b4:	18c02014 	ori	r3,r3,128
 80074b8:	80c0030d 	sth	r3,12(r16)
 80074bc:	80800015 	stw	r2,0(r16)
 80074c0:	80800415 	stw	r2,16(r16)
 80074c4:	84800515 	stw	r18,20(r16)
 80074c8:	98001a1e 	bne	r19,zero,8007534 <__smakebuf_r+0x15c>
 80074cc:	dfc01317 	ldw	ra,76(sp)
 80074d0:	dcc01217 	ldw	r19,72(sp)
 80074d4:	dc801117 	ldw	r18,68(sp)
 80074d8:	dc401017 	ldw	r17,64(sp)
 80074dc:	dc000f17 	ldw	r16,60(sp)
 80074e0:	dec01404 	addi	sp,sp,80
 80074e4:	f800283a 	ret
 80074e8:	288010c4 	addi	r2,r5,67
 80074ec:	28800015 	stw	r2,0(r5)
 80074f0:	28800415 	stw	r2,16(r5)
 80074f4:	00800044 	movi	r2,1
 80074f8:	28800515 	stw	r2,20(r5)
 80074fc:	f800283a 	ret
 8007500:	04801004 	movi	r18,64
 8007504:	003fe006 	br	8007488 <__alt_data_end+0xfc007488>
 8007508:	81000a17 	ldw	r4,40(r16)
 800750c:	00c20074 	movhi	r3,2049
 8007510:	18e68304 	addi	r3,r3,-26100
 8007514:	20ffc51e 	bne	r4,r3,800742c <__alt_data_end+0xfc00742c>
 8007518:	8080030b 	ldhu	r2,12(r16)
 800751c:	04810004 	movi	r18,1024
 8007520:	84801315 	stw	r18,76(r16)
 8007524:	1484b03a 	or	r2,r2,r18
 8007528:	8080030d 	sth	r2,12(r16)
 800752c:	0027883a 	mov	r19,zero
 8007530:	003fd806 	br	8007494 <__alt_data_end+0xfc007494>
 8007534:	8140038f 	ldh	r5,14(r16)
 8007538:	8809883a 	mov	r4,r17
 800753c:	800b73c0 	call	800b73c <_isatty_r>
 8007540:	103fe226 	beq	r2,zero,80074cc <__alt_data_end+0xfc0074cc>
 8007544:	8080030b 	ldhu	r2,12(r16)
 8007548:	10800054 	ori	r2,r2,1
 800754c:	8080030d 	sth	r2,12(r16)
 8007550:	003fde06 	br	80074cc <__alt_data_end+0xfc0074cc>
 8007554:	8080030b 	ldhu	r2,12(r16)
 8007558:	10c0800c 	andi	r3,r2,512
 800755c:	183fdb1e 	bne	r3,zero,80074cc <__alt_data_end+0xfc0074cc>
 8007560:	10800094 	ori	r2,r2,2
 8007564:	80c010c4 	addi	r3,r16,67
 8007568:	8080030d 	sth	r2,12(r16)
 800756c:	00800044 	movi	r2,1
 8007570:	80c00015 	stw	r3,0(r16)
 8007574:	80c00415 	stw	r3,16(r16)
 8007578:	80800515 	stw	r2,20(r16)
 800757c:	003fd306 	br	80074cc <__alt_data_end+0xfc0074cc>
 8007580:	04810004 	movi	r18,1024
 8007584:	003fc306 	br	8007494 <__alt_data_end+0xfc007494>
 8007588:	0027883a 	mov	r19,zero
 800758c:	04810004 	movi	r18,1024
 8007590:	003fc006 	br	8007494 <__alt_data_end+0xfc007494>

08007594 <_malloc_r>:
 8007594:	defff504 	addi	sp,sp,-44
 8007598:	dc800315 	stw	r18,12(sp)
 800759c:	dfc00a15 	stw	ra,40(sp)
 80075a0:	df000915 	stw	fp,36(sp)
 80075a4:	ddc00815 	stw	r23,32(sp)
 80075a8:	dd800715 	stw	r22,28(sp)
 80075ac:	dd400615 	stw	r21,24(sp)
 80075b0:	dd000515 	stw	r20,20(sp)
 80075b4:	dcc00415 	stw	r19,16(sp)
 80075b8:	dc400215 	stw	r17,8(sp)
 80075bc:	dc000115 	stw	r16,4(sp)
 80075c0:	288002c4 	addi	r2,r5,11
 80075c4:	00c00584 	movi	r3,22
 80075c8:	2025883a 	mov	r18,r4
 80075cc:	18807f2e 	bgeu	r3,r2,80077cc <_malloc_r+0x238>
 80075d0:	047ffe04 	movi	r17,-8
 80075d4:	1462703a 	and	r17,r2,r17
 80075d8:	8800a316 	blt	r17,zero,8007868 <_malloc_r+0x2d4>
 80075dc:	8940a236 	bltu	r17,r5,8007868 <_malloc_r+0x2d4>
 80075e0:	800f76c0 	call	800f76c <__malloc_lock>
 80075e4:	00807dc4 	movi	r2,503
 80075e8:	1441e92e 	bgeu	r2,r17,8007d90 <_malloc_r+0x7fc>
 80075ec:	8804d27a 	srli	r2,r17,9
 80075f0:	1000a126 	beq	r2,zero,8007878 <_malloc_r+0x2e4>
 80075f4:	00c00104 	movi	r3,4
 80075f8:	18811e36 	bltu	r3,r2,8007a74 <_malloc_r+0x4e0>
 80075fc:	8804d1ba 	srli	r2,r17,6
 8007600:	12000e44 	addi	r8,r2,57
 8007604:	11c00e04 	addi	r7,r2,56
 8007608:	4209883a 	add	r4,r8,r8
 800760c:	04c20074 	movhi	r19,2049
 8007610:	2109883a 	add	r4,r4,r4
 8007614:	9cca4104 	addi	r19,r19,10500
 8007618:	2109883a 	add	r4,r4,r4
 800761c:	9909883a 	add	r4,r19,r4
 8007620:	24000117 	ldw	r16,4(r4)
 8007624:	213ffe04 	addi	r4,r4,-8
 8007628:	24009726 	beq	r4,r16,8007888 <_malloc_r+0x2f4>
 800762c:	80800117 	ldw	r2,4(r16)
 8007630:	01bfff04 	movi	r6,-4
 8007634:	014003c4 	movi	r5,15
 8007638:	1184703a 	and	r2,r2,r6
 800763c:	1447c83a 	sub	r3,r2,r17
 8007640:	28c00716 	blt	r5,r3,8007660 <_malloc_r+0xcc>
 8007644:	1800920e 	bge	r3,zero,8007890 <_malloc_r+0x2fc>
 8007648:	84000317 	ldw	r16,12(r16)
 800764c:	24008e26 	beq	r4,r16,8007888 <_malloc_r+0x2f4>
 8007650:	80800117 	ldw	r2,4(r16)
 8007654:	1184703a 	and	r2,r2,r6
 8007658:	1447c83a 	sub	r3,r2,r17
 800765c:	28fff90e 	bge	r5,r3,8007644 <__alt_data_end+0xfc007644>
 8007660:	3809883a 	mov	r4,r7
 8007664:	01820074 	movhi	r6,2049
 8007668:	9c000417 	ldw	r16,16(r19)
 800766c:	318a4104 	addi	r6,r6,10500
 8007670:	32000204 	addi	r8,r6,8
 8007674:	82013426 	beq	r16,r8,8007b48 <_malloc_r+0x5b4>
 8007678:	80c00117 	ldw	r3,4(r16)
 800767c:	00bfff04 	movi	r2,-4
 8007680:	188e703a 	and	r7,r3,r2
 8007684:	3c45c83a 	sub	r2,r7,r17
 8007688:	00c003c4 	movi	r3,15
 800768c:	18811f16 	blt	r3,r2,8007b0c <_malloc_r+0x578>
 8007690:	32000515 	stw	r8,20(r6)
 8007694:	32000415 	stw	r8,16(r6)
 8007698:	10007f0e 	bge	r2,zero,8007898 <_malloc_r+0x304>
 800769c:	00807fc4 	movi	r2,511
 80076a0:	11c0fd36 	bltu	r2,r7,8007a98 <_malloc_r+0x504>
 80076a4:	3806d0fa 	srli	r3,r7,3
 80076a8:	01c00044 	movi	r7,1
 80076ac:	30800117 	ldw	r2,4(r6)
 80076b0:	19400044 	addi	r5,r3,1
 80076b4:	294b883a 	add	r5,r5,r5
 80076b8:	1807d0ba 	srai	r3,r3,2
 80076bc:	294b883a 	add	r5,r5,r5
 80076c0:	294b883a 	add	r5,r5,r5
 80076c4:	298b883a 	add	r5,r5,r6
 80076c8:	38c6983a 	sll	r3,r7,r3
 80076cc:	29c00017 	ldw	r7,0(r5)
 80076d0:	2a7ffe04 	addi	r9,r5,-8
 80076d4:	1886b03a 	or	r3,r3,r2
 80076d8:	82400315 	stw	r9,12(r16)
 80076dc:	81c00215 	stw	r7,8(r16)
 80076e0:	30c00115 	stw	r3,4(r6)
 80076e4:	2c000015 	stw	r16,0(r5)
 80076e8:	3c000315 	stw	r16,12(r7)
 80076ec:	2005d0ba 	srai	r2,r4,2
 80076f0:	01400044 	movi	r5,1
 80076f4:	288a983a 	sll	r5,r5,r2
 80076f8:	19406f36 	bltu	r3,r5,80078b8 <_malloc_r+0x324>
 80076fc:	28c4703a 	and	r2,r5,r3
 8007700:	10000a1e 	bne	r2,zero,800772c <_malloc_r+0x198>
 8007704:	00bfff04 	movi	r2,-4
 8007708:	294b883a 	add	r5,r5,r5
 800770c:	2088703a 	and	r4,r4,r2
 8007710:	28c4703a 	and	r2,r5,r3
 8007714:	21000104 	addi	r4,r4,4
 8007718:	1000041e 	bne	r2,zero,800772c <_malloc_r+0x198>
 800771c:	294b883a 	add	r5,r5,r5
 8007720:	28c4703a 	and	r2,r5,r3
 8007724:	21000104 	addi	r4,r4,4
 8007728:	103ffc26 	beq	r2,zero,800771c <__alt_data_end+0xfc00771c>
 800772c:	02bfff04 	movi	r10,-4
 8007730:	024003c4 	movi	r9,15
 8007734:	21800044 	addi	r6,r4,1
 8007738:	318d883a 	add	r6,r6,r6
 800773c:	318d883a 	add	r6,r6,r6
 8007740:	318d883a 	add	r6,r6,r6
 8007744:	998d883a 	add	r6,r19,r6
 8007748:	333ffe04 	addi	r12,r6,-8
 800774c:	2017883a 	mov	r11,r4
 8007750:	31800104 	addi	r6,r6,4
 8007754:	34000017 	ldw	r16,0(r6)
 8007758:	31fffd04 	addi	r7,r6,-12
 800775c:	81c0041e 	bne	r16,r7,8007770 <_malloc_r+0x1dc>
 8007760:	0000fb06 	br	8007b50 <_malloc_r+0x5bc>
 8007764:	1801030e 	bge	r3,zero,8007b74 <_malloc_r+0x5e0>
 8007768:	84000317 	ldw	r16,12(r16)
 800776c:	81c0f826 	beq	r16,r7,8007b50 <_malloc_r+0x5bc>
 8007770:	80800117 	ldw	r2,4(r16)
 8007774:	1284703a 	and	r2,r2,r10
 8007778:	1447c83a 	sub	r3,r2,r17
 800777c:	48fff90e 	bge	r9,r3,8007764 <__alt_data_end+0xfc007764>
 8007780:	80800317 	ldw	r2,12(r16)
 8007784:	81000217 	ldw	r4,8(r16)
 8007788:	89400054 	ori	r5,r17,1
 800778c:	81400115 	stw	r5,4(r16)
 8007790:	20800315 	stw	r2,12(r4)
 8007794:	11000215 	stw	r4,8(r2)
 8007798:	8463883a 	add	r17,r16,r17
 800779c:	9c400515 	stw	r17,20(r19)
 80077a0:	9c400415 	stw	r17,16(r19)
 80077a4:	18800054 	ori	r2,r3,1
 80077a8:	88800115 	stw	r2,4(r17)
 80077ac:	8a000315 	stw	r8,12(r17)
 80077b0:	8a000215 	stw	r8,8(r17)
 80077b4:	88e3883a 	add	r17,r17,r3
 80077b8:	88c00015 	stw	r3,0(r17)
 80077bc:	9009883a 	mov	r4,r18
 80077c0:	800f7900 	call	800f790 <__malloc_unlock>
 80077c4:	80800204 	addi	r2,r16,8
 80077c8:	00001b06 	br	8007838 <_malloc_r+0x2a4>
 80077cc:	04400404 	movi	r17,16
 80077d0:	89402536 	bltu	r17,r5,8007868 <_malloc_r+0x2d4>
 80077d4:	800f76c0 	call	800f76c <__malloc_lock>
 80077d8:	00800184 	movi	r2,6
 80077dc:	01000084 	movi	r4,2
 80077e0:	04c20074 	movhi	r19,2049
 80077e4:	1085883a 	add	r2,r2,r2
 80077e8:	9cca4104 	addi	r19,r19,10500
 80077ec:	1085883a 	add	r2,r2,r2
 80077f0:	9885883a 	add	r2,r19,r2
 80077f4:	14000117 	ldw	r16,4(r2)
 80077f8:	10fffe04 	addi	r3,r2,-8
 80077fc:	80c0d926 	beq	r16,r3,8007b64 <_malloc_r+0x5d0>
 8007800:	80c00117 	ldw	r3,4(r16)
 8007804:	81000317 	ldw	r4,12(r16)
 8007808:	00bfff04 	movi	r2,-4
 800780c:	1884703a 	and	r2,r3,r2
 8007810:	81400217 	ldw	r5,8(r16)
 8007814:	8085883a 	add	r2,r16,r2
 8007818:	10c00117 	ldw	r3,4(r2)
 800781c:	29000315 	stw	r4,12(r5)
 8007820:	21400215 	stw	r5,8(r4)
 8007824:	18c00054 	ori	r3,r3,1
 8007828:	10c00115 	stw	r3,4(r2)
 800782c:	9009883a 	mov	r4,r18
 8007830:	800f7900 	call	800f790 <__malloc_unlock>
 8007834:	80800204 	addi	r2,r16,8
 8007838:	dfc00a17 	ldw	ra,40(sp)
 800783c:	df000917 	ldw	fp,36(sp)
 8007840:	ddc00817 	ldw	r23,32(sp)
 8007844:	dd800717 	ldw	r22,28(sp)
 8007848:	dd400617 	ldw	r21,24(sp)
 800784c:	dd000517 	ldw	r20,20(sp)
 8007850:	dcc00417 	ldw	r19,16(sp)
 8007854:	dc800317 	ldw	r18,12(sp)
 8007858:	dc400217 	ldw	r17,8(sp)
 800785c:	dc000117 	ldw	r16,4(sp)
 8007860:	dec00b04 	addi	sp,sp,44
 8007864:	f800283a 	ret
 8007868:	00800304 	movi	r2,12
 800786c:	90800015 	stw	r2,0(r18)
 8007870:	0005883a 	mov	r2,zero
 8007874:	003ff006 	br	8007838 <__alt_data_end+0xfc007838>
 8007878:	01002004 	movi	r4,128
 800787c:	02001004 	movi	r8,64
 8007880:	01c00fc4 	movi	r7,63
 8007884:	003f6106 	br	800760c <__alt_data_end+0xfc00760c>
 8007888:	4009883a 	mov	r4,r8
 800788c:	003f7506 	br	8007664 <__alt_data_end+0xfc007664>
 8007890:	81000317 	ldw	r4,12(r16)
 8007894:	003fde06 	br	8007810 <__alt_data_end+0xfc007810>
 8007898:	81c5883a 	add	r2,r16,r7
 800789c:	11400117 	ldw	r5,4(r2)
 80078a0:	9009883a 	mov	r4,r18
 80078a4:	29400054 	ori	r5,r5,1
 80078a8:	11400115 	stw	r5,4(r2)
 80078ac:	800f7900 	call	800f790 <__malloc_unlock>
 80078b0:	80800204 	addi	r2,r16,8
 80078b4:	003fe006 	br	8007838 <__alt_data_end+0xfc007838>
 80078b8:	9c000217 	ldw	r16,8(r19)
 80078bc:	00bfff04 	movi	r2,-4
 80078c0:	85800117 	ldw	r22,4(r16)
 80078c4:	b0ac703a 	and	r22,r22,r2
 80078c8:	b4400336 	bltu	r22,r17,80078d8 <_malloc_r+0x344>
 80078cc:	b445c83a 	sub	r2,r22,r17
 80078d0:	00c003c4 	movi	r3,15
 80078d4:	18805d16 	blt	r3,r2,8007a4c <_malloc_r+0x4b8>
 80078d8:	05c20074 	movhi	r23,2049
 80078dc:	00820074 	movhi	r2,2049
 80078e0:	10969604 	addi	r2,r2,23128
 80078e4:	bdcfc804 	addi	r23,r23,16160
 80078e8:	15400017 	ldw	r21,0(r2)
 80078ec:	b8c00017 	ldw	r3,0(r23)
 80078f0:	00bfffc4 	movi	r2,-1
 80078f4:	858d883a 	add	r6,r16,r22
 80078f8:	8d6b883a 	add	r21,r17,r21
 80078fc:	1880ea26 	beq	r3,r2,8007ca8 <_malloc_r+0x714>
 8007900:	ad4403c4 	addi	r21,r21,4111
 8007904:	00bc0004 	movi	r2,-4096
 8007908:	a8aa703a 	and	r21,r21,r2
 800790c:	a80b883a 	mov	r5,r21
 8007910:	9009883a 	mov	r4,r18
 8007914:	d9800015 	stw	r6,0(sp)
 8007918:	80098e00 	call	80098e0 <_sbrk_r>
 800791c:	1029883a 	mov	r20,r2
 8007920:	00bfffc4 	movi	r2,-1
 8007924:	d9800017 	ldw	r6,0(sp)
 8007928:	a080e826 	beq	r20,r2,8007ccc <_malloc_r+0x738>
 800792c:	a180a636 	bltu	r20,r6,8007bc8 <_malloc_r+0x634>
 8007930:	07020074 	movhi	fp,2049
 8007934:	e7169f04 	addi	fp,fp,23164
 8007938:	e0800017 	ldw	r2,0(fp)
 800793c:	a887883a 	add	r3,r21,r2
 8007940:	e0c00015 	stw	r3,0(fp)
 8007944:	3500e626 	beq	r6,r20,8007ce0 <_malloc_r+0x74c>
 8007948:	b9000017 	ldw	r4,0(r23)
 800794c:	00bfffc4 	movi	r2,-1
 8007950:	2080ee26 	beq	r4,r2,8007d0c <_malloc_r+0x778>
 8007954:	a185c83a 	sub	r2,r20,r6
 8007958:	10c5883a 	add	r2,r2,r3
 800795c:	e0800015 	stw	r2,0(fp)
 8007960:	a0c001cc 	andi	r3,r20,7
 8007964:	1800bc26 	beq	r3,zero,8007c58 <_malloc_r+0x6c4>
 8007968:	a0e9c83a 	sub	r20,r20,r3
 800796c:	00840204 	movi	r2,4104
 8007970:	a5000204 	addi	r20,r20,8
 8007974:	10c7c83a 	sub	r3,r2,r3
 8007978:	a545883a 	add	r2,r20,r21
 800797c:	1083ffcc 	andi	r2,r2,4095
 8007980:	18abc83a 	sub	r21,r3,r2
 8007984:	a80b883a 	mov	r5,r21
 8007988:	9009883a 	mov	r4,r18
 800798c:	80098e00 	call	80098e0 <_sbrk_r>
 8007990:	00ffffc4 	movi	r3,-1
 8007994:	10c0e126 	beq	r2,r3,8007d1c <_malloc_r+0x788>
 8007998:	1505c83a 	sub	r2,r2,r20
 800799c:	1545883a 	add	r2,r2,r21
 80079a0:	10800054 	ori	r2,r2,1
 80079a4:	e0c00017 	ldw	r3,0(fp)
 80079a8:	9d000215 	stw	r20,8(r19)
 80079ac:	a0800115 	stw	r2,4(r20)
 80079b0:	a8c7883a 	add	r3,r21,r3
 80079b4:	e0c00015 	stw	r3,0(fp)
 80079b8:	84c00e26 	beq	r16,r19,80079f4 <_malloc_r+0x460>
 80079bc:	018003c4 	movi	r6,15
 80079c0:	3580a72e 	bgeu	r6,r22,8007c60 <_malloc_r+0x6cc>
 80079c4:	81400117 	ldw	r5,4(r16)
 80079c8:	013ffe04 	movi	r4,-8
 80079cc:	b0bffd04 	addi	r2,r22,-12
 80079d0:	1104703a 	and	r2,r2,r4
 80079d4:	2900004c 	andi	r4,r5,1
 80079d8:	2088b03a 	or	r4,r4,r2
 80079dc:	81000115 	stw	r4,4(r16)
 80079e0:	01400144 	movi	r5,5
 80079e4:	8089883a 	add	r4,r16,r2
 80079e8:	21400115 	stw	r5,4(r4)
 80079ec:	21400215 	stw	r5,8(r4)
 80079f0:	3080cd36 	bltu	r6,r2,8007d28 <_malloc_r+0x794>
 80079f4:	00820074 	movhi	r2,2049
 80079f8:	10969504 	addi	r2,r2,23124
 80079fc:	11000017 	ldw	r4,0(r2)
 8007a00:	20c0012e 	bgeu	r4,r3,8007a08 <_malloc_r+0x474>
 8007a04:	10c00015 	stw	r3,0(r2)
 8007a08:	00820074 	movhi	r2,2049
 8007a0c:	10969404 	addi	r2,r2,23120
 8007a10:	11000017 	ldw	r4,0(r2)
 8007a14:	9c000217 	ldw	r16,8(r19)
 8007a18:	20c0012e 	bgeu	r4,r3,8007a20 <_malloc_r+0x48c>
 8007a1c:	10c00015 	stw	r3,0(r2)
 8007a20:	80c00117 	ldw	r3,4(r16)
 8007a24:	00bfff04 	movi	r2,-4
 8007a28:	1886703a 	and	r3,r3,r2
 8007a2c:	1c45c83a 	sub	r2,r3,r17
 8007a30:	1c400236 	bltu	r3,r17,8007a3c <_malloc_r+0x4a8>
 8007a34:	00c003c4 	movi	r3,15
 8007a38:	18800416 	blt	r3,r2,8007a4c <_malloc_r+0x4b8>
 8007a3c:	9009883a 	mov	r4,r18
 8007a40:	800f7900 	call	800f790 <__malloc_unlock>
 8007a44:	0005883a 	mov	r2,zero
 8007a48:	003f7b06 	br	8007838 <__alt_data_end+0xfc007838>
 8007a4c:	88c00054 	ori	r3,r17,1
 8007a50:	80c00115 	stw	r3,4(r16)
 8007a54:	8463883a 	add	r17,r16,r17
 8007a58:	10800054 	ori	r2,r2,1
 8007a5c:	9c400215 	stw	r17,8(r19)
 8007a60:	88800115 	stw	r2,4(r17)
 8007a64:	9009883a 	mov	r4,r18
 8007a68:	800f7900 	call	800f790 <__malloc_unlock>
 8007a6c:	80800204 	addi	r2,r16,8
 8007a70:	003f7106 	br	8007838 <__alt_data_end+0xfc007838>
 8007a74:	00c00504 	movi	r3,20
 8007a78:	18804a2e 	bgeu	r3,r2,8007ba4 <_malloc_r+0x610>
 8007a7c:	00c01504 	movi	r3,84
 8007a80:	18806e36 	bltu	r3,r2,8007c3c <_malloc_r+0x6a8>
 8007a84:	8804d33a 	srli	r2,r17,12
 8007a88:	12001bc4 	addi	r8,r2,111
 8007a8c:	11c01b84 	addi	r7,r2,110
 8007a90:	4209883a 	add	r4,r8,r8
 8007a94:	003edd06 	br	800760c <__alt_data_end+0xfc00760c>
 8007a98:	3804d27a 	srli	r2,r7,9
 8007a9c:	00c00104 	movi	r3,4
 8007aa0:	1880442e 	bgeu	r3,r2,8007bb4 <_malloc_r+0x620>
 8007aa4:	00c00504 	movi	r3,20
 8007aa8:	18808136 	bltu	r3,r2,8007cb0 <_malloc_r+0x71c>
 8007aac:	11401704 	addi	r5,r2,92
 8007ab0:	10c016c4 	addi	r3,r2,91
 8007ab4:	294b883a 	add	r5,r5,r5
 8007ab8:	294b883a 	add	r5,r5,r5
 8007abc:	294b883a 	add	r5,r5,r5
 8007ac0:	994b883a 	add	r5,r19,r5
 8007ac4:	28800017 	ldw	r2,0(r5)
 8007ac8:	01820074 	movhi	r6,2049
 8007acc:	297ffe04 	addi	r5,r5,-8
 8007ad0:	318a4104 	addi	r6,r6,10500
 8007ad4:	28806526 	beq	r5,r2,8007c6c <_malloc_r+0x6d8>
 8007ad8:	01bfff04 	movi	r6,-4
 8007adc:	10c00117 	ldw	r3,4(r2)
 8007ae0:	1986703a 	and	r3,r3,r6
 8007ae4:	38c0022e 	bgeu	r7,r3,8007af0 <_malloc_r+0x55c>
 8007ae8:	10800217 	ldw	r2,8(r2)
 8007aec:	28bffb1e 	bne	r5,r2,8007adc <__alt_data_end+0xfc007adc>
 8007af0:	11400317 	ldw	r5,12(r2)
 8007af4:	98c00117 	ldw	r3,4(r19)
 8007af8:	81400315 	stw	r5,12(r16)
 8007afc:	80800215 	stw	r2,8(r16)
 8007b00:	2c000215 	stw	r16,8(r5)
 8007b04:	14000315 	stw	r16,12(r2)
 8007b08:	003ef806 	br	80076ec <__alt_data_end+0xfc0076ec>
 8007b0c:	88c00054 	ori	r3,r17,1
 8007b10:	80c00115 	stw	r3,4(r16)
 8007b14:	8463883a 	add	r17,r16,r17
 8007b18:	34400515 	stw	r17,20(r6)
 8007b1c:	34400415 	stw	r17,16(r6)
 8007b20:	10c00054 	ori	r3,r2,1
 8007b24:	8a000315 	stw	r8,12(r17)
 8007b28:	8a000215 	stw	r8,8(r17)
 8007b2c:	88c00115 	stw	r3,4(r17)
 8007b30:	88a3883a 	add	r17,r17,r2
 8007b34:	88800015 	stw	r2,0(r17)
 8007b38:	9009883a 	mov	r4,r18
 8007b3c:	800f7900 	call	800f790 <__malloc_unlock>
 8007b40:	80800204 	addi	r2,r16,8
 8007b44:	003f3c06 	br	8007838 <__alt_data_end+0xfc007838>
 8007b48:	30c00117 	ldw	r3,4(r6)
 8007b4c:	003ee706 	br	80076ec <__alt_data_end+0xfc0076ec>
 8007b50:	5ac00044 	addi	r11,r11,1
 8007b54:	588000cc 	andi	r2,r11,3
 8007b58:	31800204 	addi	r6,r6,8
 8007b5c:	103efd1e 	bne	r2,zero,8007754 <__alt_data_end+0xfc007754>
 8007b60:	00002406 	br	8007bf4 <_malloc_r+0x660>
 8007b64:	14000317 	ldw	r16,12(r2)
 8007b68:	143f251e 	bne	r2,r16,8007800 <__alt_data_end+0xfc007800>
 8007b6c:	21000084 	addi	r4,r4,2
 8007b70:	003ebc06 	br	8007664 <__alt_data_end+0xfc007664>
 8007b74:	8085883a 	add	r2,r16,r2
 8007b78:	10c00117 	ldw	r3,4(r2)
 8007b7c:	81000317 	ldw	r4,12(r16)
 8007b80:	81400217 	ldw	r5,8(r16)
 8007b84:	18c00054 	ori	r3,r3,1
 8007b88:	10c00115 	stw	r3,4(r2)
 8007b8c:	29000315 	stw	r4,12(r5)
 8007b90:	21400215 	stw	r5,8(r4)
 8007b94:	9009883a 	mov	r4,r18
 8007b98:	800f7900 	call	800f790 <__malloc_unlock>
 8007b9c:	80800204 	addi	r2,r16,8
 8007ba0:	003f2506 	br	8007838 <__alt_data_end+0xfc007838>
 8007ba4:	12001704 	addi	r8,r2,92
 8007ba8:	11c016c4 	addi	r7,r2,91
 8007bac:	4209883a 	add	r4,r8,r8
 8007bb0:	003e9606 	br	800760c <__alt_data_end+0xfc00760c>
 8007bb4:	3804d1ba 	srli	r2,r7,6
 8007bb8:	11400e44 	addi	r5,r2,57
 8007bbc:	10c00e04 	addi	r3,r2,56
 8007bc0:	294b883a 	add	r5,r5,r5
 8007bc4:	003fbc06 	br	8007ab8 <__alt_data_end+0xfc007ab8>
 8007bc8:	84ff5926 	beq	r16,r19,8007930 <__alt_data_end+0xfc007930>
 8007bcc:	00820074 	movhi	r2,2049
 8007bd0:	108a4104 	addi	r2,r2,10500
 8007bd4:	14000217 	ldw	r16,8(r2)
 8007bd8:	00bfff04 	movi	r2,-4
 8007bdc:	80c00117 	ldw	r3,4(r16)
 8007be0:	1886703a 	and	r3,r3,r2
 8007be4:	003f9106 	br	8007a2c <__alt_data_end+0xfc007a2c>
 8007be8:	60800217 	ldw	r2,8(r12)
 8007bec:	213fffc4 	addi	r4,r4,-1
 8007bf0:	1300651e 	bne	r2,r12,8007d88 <_malloc_r+0x7f4>
 8007bf4:	208000cc 	andi	r2,r4,3
 8007bf8:	633ffe04 	addi	r12,r12,-8
 8007bfc:	103ffa1e 	bne	r2,zero,8007be8 <__alt_data_end+0xfc007be8>
 8007c00:	98800117 	ldw	r2,4(r19)
 8007c04:	0146303a 	nor	r3,zero,r5
 8007c08:	1884703a 	and	r2,r3,r2
 8007c0c:	98800115 	stw	r2,4(r19)
 8007c10:	294b883a 	add	r5,r5,r5
 8007c14:	117f2836 	bltu	r2,r5,80078b8 <__alt_data_end+0xfc0078b8>
 8007c18:	283f2726 	beq	r5,zero,80078b8 <__alt_data_end+0xfc0078b8>
 8007c1c:	2886703a 	and	r3,r5,r2
 8007c20:	5809883a 	mov	r4,r11
 8007c24:	183ec31e 	bne	r3,zero,8007734 <__alt_data_end+0xfc007734>
 8007c28:	294b883a 	add	r5,r5,r5
 8007c2c:	2886703a 	and	r3,r5,r2
 8007c30:	21000104 	addi	r4,r4,4
 8007c34:	183ffc26 	beq	r3,zero,8007c28 <__alt_data_end+0xfc007c28>
 8007c38:	003ebe06 	br	8007734 <__alt_data_end+0xfc007734>
 8007c3c:	00c05504 	movi	r3,340
 8007c40:	18801236 	bltu	r3,r2,8007c8c <_malloc_r+0x6f8>
 8007c44:	8804d3fa 	srli	r2,r17,15
 8007c48:	12001e04 	addi	r8,r2,120
 8007c4c:	11c01dc4 	addi	r7,r2,119
 8007c50:	4209883a 	add	r4,r8,r8
 8007c54:	003e6d06 	br	800760c <__alt_data_end+0xfc00760c>
 8007c58:	00c40004 	movi	r3,4096
 8007c5c:	003f4606 	br	8007978 <__alt_data_end+0xfc007978>
 8007c60:	00800044 	movi	r2,1
 8007c64:	a0800115 	stw	r2,4(r20)
 8007c68:	003f7406 	br	8007a3c <__alt_data_end+0xfc007a3c>
 8007c6c:	1805d0ba 	srai	r2,r3,2
 8007c70:	01c00044 	movi	r7,1
 8007c74:	30c00117 	ldw	r3,4(r6)
 8007c78:	388e983a 	sll	r7,r7,r2
 8007c7c:	2805883a 	mov	r2,r5
 8007c80:	38c6b03a 	or	r3,r7,r3
 8007c84:	30c00115 	stw	r3,4(r6)
 8007c88:	003f9b06 	br	8007af8 <__alt_data_end+0xfc007af8>
 8007c8c:	00c15504 	movi	r3,1364
 8007c90:	18801a36 	bltu	r3,r2,8007cfc <_malloc_r+0x768>
 8007c94:	8804d4ba 	srli	r2,r17,18
 8007c98:	12001f44 	addi	r8,r2,125
 8007c9c:	11c01f04 	addi	r7,r2,124
 8007ca0:	4209883a 	add	r4,r8,r8
 8007ca4:	003e5906 	br	800760c <__alt_data_end+0xfc00760c>
 8007ca8:	ad400404 	addi	r21,r21,16
 8007cac:	003f1706 	br	800790c <__alt_data_end+0xfc00790c>
 8007cb0:	00c01504 	movi	r3,84
 8007cb4:	18802336 	bltu	r3,r2,8007d44 <_malloc_r+0x7b0>
 8007cb8:	3804d33a 	srli	r2,r7,12
 8007cbc:	11401bc4 	addi	r5,r2,111
 8007cc0:	10c01b84 	addi	r3,r2,110
 8007cc4:	294b883a 	add	r5,r5,r5
 8007cc8:	003f7b06 	br	8007ab8 <__alt_data_end+0xfc007ab8>
 8007ccc:	9c000217 	ldw	r16,8(r19)
 8007cd0:	00bfff04 	movi	r2,-4
 8007cd4:	80c00117 	ldw	r3,4(r16)
 8007cd8:	1886703a 	and	r3,r3,r2
 8007cdc:	003f5306 	br	8007a2c <__alt_data_end+0xfc007a2c>
 8007ce0:	3083ffcc 	andi	r2,r6,4095
 8007ce4:	103f181e 	bne	r2,zero,8007948 <__alt_data_end+0xfc007948>
 8007ce8:	99000217 	ldw	r4,8(r19)
 8007cec:	b545883a 	add	r2,r22,r21
 8007cf0:	10800054 	ori	r2,r2,1
 8007cf4:	20800115 	stw	r2,4(r4)
 8007cf8:	003f3e06 	br	80079f4 <__alt_data_end+0xfc0079f4>
 8007cfc:	01003f84 	movi	r4,254
 8007d00:	02001fc4 	movi	r8,127
 8007d04:	01c01f84 	movi	r7,126
 8007d08:	003e4006 	br	800760c <__alt_data_end+0xfc00760c>
 8007d0c:	00820074 	movhi	r2,2049
 8007d10:	108fc804 	addi	r2,r2,16160
 8007d14:	15000015 	stw	r20,0(r2)
 8007d18:	003f1106 	br	8007960 <__alt_data_end+0xfc007960>
 8007d1c:	00800044 	movi	r2,1
 8007d20:	002b883a 	mov	r21,zero
 8007d24:	003f1f06 	br	80079a4 <__alt_data_end+0xfc0079a4>
 8007d28:	81400204 	addi	r5,r16,8
 8007d2c:	9009883a 	mov	r4,r18
 8007d30:	800699c0 	call	800699c <_free_r>
 8007d34:	00820074 	movhi	r2,2049
 8007d38:	10969f04 	addi	r2,r2,23164
 8007d3c:	10c00017 	ldw	r3,0(r2)
 8007d40:	003f2c06 	br	80079f4 <__alt_data_end+0xfc0079f4>
 8007d44:	00c05504 	movi	r3,340
 8007d48:	18800536 	bltu	r3,r2,8007d60 <_malloc_r+0x7cc>
 8007d4c:	3804d3fa 	srli	r2,r7,15
 8007d50:	11401e04 	addi	r5,r2,120
 8007d54:	10c01dc4 	addi	r3,r2,119
 8007d58:	294b883a 	add	r5,r5,r5
 8007d5c:	003f5606 	br	8007ab8 <__alt_data_end+0xfc007ab8>
 8007d60:	00c15504 	movi	r3,1364
 8007d64:	18800536 	bltu	r3,r2,8007d7c <_malloc_r+0x7e8>
 8007d68:	3804d4ba 	srli	r2,r7,18
 8007d6c:	11401f44 	addi	r5,r2,125
 8007d70:	10c01f04 	addi	r3,r2,124
 8007d74:	294b883a 	add	r5,r5,r5
 8007d78:	003f4f06 	br	8007ab8 <__alt_data_end+0xfc007ab8>
 8007d7c:	01403f84 	movi	r5,254
 8007d80:	00c01f84 	movi	r3,126
 8007d84:	003f4c06 	br	8007ab8 <__alt_data_end+0xfc007ab8>
 8007d88:	98800117 	ldw	r2,4(r19)
 8007d8c:	003fa006 	br	8007c10 <__alt_data_end+0xfc007c10>
 8007d90:	8808d0fa 	srli	r4,r17,3
 8007d94:	20800044 	addi	r2,r4,1
 8007d98:	1085883a 	add	r2,r2,r2
 8007d9c:	003e9006 	br	80077e0 <__alt_data_end+0xfc0077e0>

08007da0 <memchr>:
 8007da0:	208000cc 	andi	r2,r4,3
 8007da4:	280f883a 	mov	r7,r5
 8007da8:	10003426 	beq	r2,zero,8007e7c <memchr+0xdc>
 8007dac:	30bfffc4 	addi	r2,r6,-1
 8007db0:	30001a26 	beq	r6,zero,8007e1c <memchr+0x7c>
 8007db4:	20c00003 	ldbu	r3,0(r4)
 8007db8:	29803fcc 	andi	r6,r5,255
 8007dbc:	30c0051e 	bne	r6,r3,8007dd4 <memchr+0x34>
 8007dc0:	00001806 	br	8007e24 <memchr+0x84>
 8007dc4:	10001526 	beq	r2,zero,8007e1c <memchr+0x7c>
 8007dc8:	20c00003 	ldbu	r3,0(r4)
 8007dcc:	10bfffc4 	addi	r2,r2,-1
 8007dd0:	30c01426 	beq	r6,r3,8007e24 <memchr+0x84>
 8007dd4:	21000044 	addi	r4,r4,1
 8007dd8:	20c000cc 	andi	r3,r4,3
 8007ddc:	183ff91e 	bne	r3,zero,8007dc4 <__alt_data_end+0xfc007dc4>
 8007de0:	020000c4 	movi	r8,3
 8007de4:	40801136 	bltu	r8,r2,8007e2c <memchr+0x8c>
 8007de8:	10000c26 	beq	r2,zero,8007e1c <memchr+0x7c>
 8007dec:	20c00003 	ldbu	r3,0(r4)
 8007df0:	29403fcc 	andi	r5,r5,255
 8007df4:	28c00b26 	beq	r5,r3,8007e24 <memchr+0x84>
 8007df8:	20c00044 	addi	r3,r4,1
 8007dfc:	39803fcc 	andi	r6,r7,255
 8007e00:	2089883a 	add	r4,r4,r2
 8007e04:	00000306 	br	8007e14 <memchr+0x74>
 8007e08:	18c00044 	addi	r3,r3,1
 8007e0c:	197fffc3 	ldbu	r5,-1(r3)
 8007e10:	31400526 	beq	r6,r5,8007e28 <memchr+0x88>
 8007e14:	1805883a 	mov	r2,r3
 8007e18:	20fffb1e 	bne	r4,r3,8007e08 <__alt_data_end+0xfc007e08>
 8007e1c:	0005883a 	mov	r2,zero
 8007e20:	f800283a 	ret
 8007e24:	2005883a 	mov	r2,r4
 8007e28:	f800283a 	ret
 8007e2c:	28c03fcc 	andi	r3,r5,255
 8007e30:	1812923a 	slli	r9,r3,8
 8007e34:	02ffbff4 	movhi	r11,65279
 8007e38:	02a02074 	movhi	r10,32897
 8007e3c:	48d2b03a 	or	r9,r9,r3
 8007e40:	4806943a 	slli	r3,r9,16
 8007e44:	5affbfc4 	addi	r11,r11,-257
 8007e48:	52a02004 	addi	r10,r10,-32640
 8007e4c:	48d2b03a 	or	r9,r9,r3
 8007e50:	20c00017 	ldw	r3,0(r4)
 8007e54:	48c6f03a 	xor	r3,r9,r3
 8007e58:	1acd883a 	add	r6,r3,r11
 8007e5c:	00c6303a 	nor	r3,zero,r3
 8007e60:	30c6703a 	and	r3,r6,r3
 8007e64:	1a86703a 	and	r3,r3,r10
 8007e68:	183fe01e 	bne	r3,zero,8007dec <__alt_data_end+0xfc007dec>
 8007e6c:	10bfff04 	addi	r2,r2,-4
 8007e70:	21000104 	addi	r4,r4,4
 8007e74:	40bff636 	bltu	r8,r2,8007e50 <__alt_data_end+0xfc007e50>
 8007e78:	003fdb06 	br	8007de8 <__alt_data_end+0xfc007de8>
 8007e7c:	3005883a 	mov	r2,r6
 8007e80:	003fd706 	br	8007de0 <__alt_data_end+0xfc007de0>

08007e84 <memcpy>:
 8007e84:	defffd04 	addi	sp,sp,-12
 8007e88:	dfc00215 	stw	ra,8(sp)
 8007e8c:	dc400115 	stw	r17,4(sp)
 8007e90:	dc000015 	stw	r16,0(sp)
 8007e94:	00c003c4 	movi	r3,15
 8007e98:	2005883a 	mov	r2,r4
 8007e9c:	1980452e 	bgeu	r3,r6,8007fb4 <memcpy+0x130>
 8007ea0:	2906b03a 	or	r3,r5,r4
 8007ea4:	18c000cc 	andi	r3,r3,3
 8007ea8:	1800441e 	bne	r3,zero,8007fbc <memcpy+0x138>
 8007eac:	347ffc04 	addi	r17,r6,-16
 8007eb0:	8822d13a 	srli	r17,r17,4
 8007eb4:	28c00104 	addi	r3,r5,4
 8007eb8:	23400104 	addi	r13,r4,4
 8007ebc:	8820913a 	slli	r16,r17,4
 8007ec0:	2b000204 	addi	r12,r5,8
 8007ec4:	22c00204 	addi	r11,r4,8
 8007ec8:	84000504 	addi	r16,r16,20
 8007ecc:	2a800304 	addi	r10,r5,12
 8007ed0:	22400304 	addi	r9,r4,12
 8007ed4:	2c21883a 	add	r16,r5,r16
 8007ed8:	2811883a 	mov	r8,r5
 8007edc:	200f883a 	mov	r7,r4
 8007ee0:	41000017 	ldw	r4,0(r8)
 8007ee4:	1fc00017 	ldw	ra,0(r3)
 8007ee8:	63c00017 	ldw	r15,0(r12)
 8007eec:	39000015 	stw	r4,0(r7)
 8007ef0:	53800017 	ldw	r14,0(r10)
 8007ef4:	6fc00015 	stw	ra,0(r13)
 8007ef8:	5bc00015 	stw	r15,0(r11)
 8007efc:	4b800015 	stw	r14,0(r9)
 8007f00:	18c00404 	addi	r3,r3,16
 8007f04:	39c00404 	addi	r7,r7,16
 8007f08:	42000404 	addi	r8,r8,16
 8007f0c:	6b400404 	addi	r13,r13,16
 8007f10:	63000404 	addi	r12,r12,16
 8007f14:	5ac00404 	addi	r11,r11,16
 8007f18:	52800404 	addi	r10,r10,16
 8007f1c:	4a400404 	addi	r9,r9,16
 8007f20:	1c3fef1e 	bne	r3,r16,8007ee0 <__alt_data_end+0xfc007ee0>
 8007f24:	89c00044 	addi	r7,r17,1
 8007f28:	380e913a 	slli	r7,r7,4
 8007f2c:	310003cc 	andi	r4,r6,15
 8007f30:	02c000c4 	movi	r11,3
 8007f34:	11c7883a 	add	r3,r2,r7
 8007f38:	29cb883a 	add	r5,r5,r7
 8007f3c:	5900212e 	bgeu	r11,r4,8007fc4 <memcpy+0x140>
 8007f40:	1813883a 	mov	r9,r3
 8007f44:	2811883a 	mov	r8,r5
 8007f48:	200f883a 	mov	r7,r4
 8007f4c:	42800017 	ldw	r10,0(r8)
 8007f50:	4a400104 	addi	r9,r9,4
 8007f54:	39ffff04 	addi	r7,r7,-4
 8007f58:	4abfff15 	stw	r10,-4(r9)
 8007f5c:	42000104 	addi	r8,r8,4
 8007f60:	59fffa36 	bltu	r11,r7,8007f4c <__alt_data_end+0xfc007f4c>
 8007f64:	213fff04 	addi	r4,r4,-4
 8007f68:	2008d0ba 	srli	r4,r4,2
 8007f6c:	318000cc 	andi	r6,r6,3
 8007f70:	21000044 	addi	r4,r4,1
 8007f74:	2109883a 	add	r4,r4,r4
 8007f78:	2109883a 	add	r4,r4,r4
 8007f7c:	1907883a 	add	r3,r3,r4
 8007f80:	290b883a 	add	r5,r5,r4
 8007f84:	30000626 	beq	r6,zero,8007fa0 <memcpy+0x11c>
 8007f88:	198d883a 	add	r6,r3,r6
 8007f8c:	29c00003 	ldbu	r7,0(r5)
 8007f90:	18c00044 	addi	r3,r3,1
 8007f94:	29400044 	addi	r5,r5,1
 8007f98:	19ffffc5 	stb	r7,-1(r3)
 8007f9c:	19bffb1e 	bne	r3,r6,8007f8c <__alt_data_end+0xfc007f8c>
 8007fa0:	dfc00217 	ldw	ra,8(sp)
 8007fa4:	dc400117 	ldw	r17,4(sp)
 8007fa8:	dc000017 	ldw	r16,0(sp)
 8007fac:	dec00304 	addi	sp,sp,12
 8007fb0:	f800283a 	ret
 8007fb4:	2007883a 	mov	r3,r4
 8007fb8:	003ff206 	br	8007f84 <__alt_data_end+0xfc007f84>
 8007fbc:	2007883a 	mov	r3,r4
 8007fc0:	003ff106 	br	8007f88 <__alt_data_end+0xfc007f88>
 8007fc4:	200d883a 	mov	r6,r4
 8007fc8:	003fee06 	br	8007f84 <__alt_data_end+0xfc007f84>

08007fcc <memmove>:
 8007fcc:	2005883a 	mov	r2,r4
 8007fd0:	29000b2e 	bgeu	r5,r4,8008000 <memmove+0x34>
 8007fd4:	298f883a 	add	r7,r5,r6
 8007fd8:	21c0092e 	bgeu	r4,r7,8008000 <memmove+0x34>
 8007fdc:	2187883a 	add	r3,r4,r6
 8007fe0:	198bc83a 	sub	r5,r3,r6
 8007fe4:	30004826 	beq	r6,zero,8008108 <memmove+0x13c>
 8007fe8:	39ffffc4 	addi	r7,r7,-1
 8007fec:	39000003 	ldbu	r4,0(r7)
 8007ff0:	18ffffc4 	addi	r3,r3,-1
 8007ff4:	19000005 	stb	r4,0(r3)
 8007ff8:	28fffb1e 	bne	r5,r3,8007fe8 <__alt_data_end+0xfc007fe8>
 8007ffc:	f800283a 	ret
 8008000:	00c003c4 	movi	r3,15
 8008004:	1980412e 	bgeu	r3,r6,800810c <memmove+0x140>
 8008008:	2886b03a 	or	r3,r5,r2
 800800c:	18c000cc 	andi	r3,r3,3
 8008010:	1800401e 	bne	r3,zero,8008114 <memmove+0x148>
 8008014:	33fffc04 	addi	r15,r6,-16
 8008018:	781ed13a 	srli	r15,r15,4
 800801c:	28c00104 	addi	r3,r5,4
 8008020:	13400104 	addi	r13,r2,4
 8008024:	781c913a 	slli	r14,r15,4
 8008028:	2b000204 	addi	r12,r5,8
 800802c:	12c00204 	addi	r11,r2,8
 8008030:	73800504 	addi	r14,r14,20
 8008034:	2a800304 	addi	r10,r5,12
 8008038:	12400304 	addi	r9,r2,12
 800803c:	2b9d883a 	add	r14,r5,r14
 8008040:	2811883a 	mov	r8,r5
 8008044:	100f883a 	mov	r7,r2
 8008048:	41000017 	ldw	r4,0(r8)
 800804c:	39c00404 	addi	r7,r7,16
 8008050:	18c00404 	addi	r3,r3,16
 8008054:	393ffc15 	stw	r4,-16(r7)
 8008058:	193ffc17 	ldw	r4,-16(r3)
 800805c:	6b400404 	addi	r13,r13,16
 8008060:	5ac00404 	addi	r11,r11,16
 8008064:	693ffc15 	stw	r4,-16(r13)
 8008068:	61000017 	ldw	r4,0(r12)
 800806c:	4a400404 	addi	r9,r9,16
 8008070:	42000404 	addi	r8,r8,16
 8008074:	593ffc15 	stw	r4,-16(r11)
 8008078:	51000017 	ldw	r4,0(r10)
 800807c:	63000404 	addi	r12,r12,16
 8008080:	52800404 	addi	r10,r10,16
 8008084:	493ffc15 	stw	r4,-16(r9)
 8008088:	1bbfef1e 	bne	r3,r14,8008048 <__alt_data_end+0xfc008048>
 800808c:	79000044 	addi	r4,r15,1
 8008090:	2008913a 	slli	r4,r4,4
 8008094:	328003cc 	andi	r10,r6,15
 8008098:	02c000c4 	movi	r11,3
 800809c:	1107883a 	add	r3,r2,r4
 80080a0:	290b883a 	add	r5,r5,r4
 80080a4:	5a801e2e 	bgeu	r11,r10,8008120 <memmove+0x154>
 80080a8:	1813883a 	mov	r9,r3
 80080ac:	2811883a 	mov	r8,r5
 80080b0:	500f883a 	mov	r7,r10
 80080b4:	41000017 	ldw	r4,0(r8)
 80080b8:	4a400104 	addi	r9,r9,4
 80080bc:	39ffff04 	addi	r7,r7,-4
 80080c0:	493fff15 	stw	r4,-4(r9)
 80080c4:	42000104 	addi	r8,r8,4
 80080c8:	59fffa36 	bltu	r11,r7,80080b4 <__alt_data_end+0xfc0080b4>
 80080cc:	513fff04 	addi	r4,r10,-4
 80080d0:	2008d0ba 	srli	r4,r4,2
 80080d4:	318000cc 	andi	r6,r6,3
 80080d8:	21000044 	addi	r4,r4,1
 80080dc:	2109883a 	add	r4,r4,r4
 80080e0:	2109883a 	add	r4,r4,r4
 80080e4:	1907883a 	add	r3,r3,r4
 80080e8:	290b883a 	add	r5,r5,r4
 80080ec:	30000b26 	beq	r6,zero,800811c <memmove+0x150>
 80080f0:	198d883a 	add	r6,r3,r6
 80080f4:	29c00003 	ldbu	r7,0(r5)
 80080f8:	18c00044 	addi	r3,r3,1
 80080fc:	29400044 	addi	r5,r5,1
 8008100:	19ffffc5 	stb	r7,-1(r3)
 8008104:	19bffb1e 	bne	r3,r6,80080f4 <__alt_data_end+0xfc0080f4>
 8008108:	f800283a 	ret
 800810c:	1007883a 	mov	r3,r2
 8008110:	003ff606 	br	80080ec <__alt_data_end+0xfc0080ec>
 8008114:	1007883a 	mov	r3,r2
 8008118:	003ff506 	br	80080f0 <__alt_data_end+0xfc0080f0>
 800811c:	f800283a 	ret
 8008120:	500d883a 	mov	r6,r10
 8008124:	003ff106 	br	80080ec <__alt_data_end+0xfc0080ec>

08008128 <memset>:
 8008128:	20c000cc 	andi	r3,r4,3
 800812c:	2005883a 	mov	r2,r4
 8008130:	18004426 	beq	r3,zero,8008244 <memset+0x11c>
 8008134:	31ffffc4 	addi	r7,r6,-1
 8008138:	30004026 	beq	r6,zero,800823c <memset+0x114>
 800813c:	2813883a 	mov	r9,r5
 8008140:	200d883a 	mov	r6,r4
 8008144:	2007883a 	mov	r3,r4
 8008148:	00000406 	br	800815c <memset+0x34>
 800814c:	3a3fffc4 	addi	r8,r7,-1
 8008150:	31800044 	addi	r6,r6,1
 8008154:	38003926 	beq	r7,zero,800823c <memset+0x114>
 8008158:	400f883a 	mov	r7,r8
 800815c:	18c00044 	addi	r3,r3,1
 8008160:	32400005 	stb	r9,0(r6)
 8008164:	1a0000cc 	andi	r8,r3,3
 8008168:	403ff81e 	bne	r8,zero,800814c <__alt_data_end+0xfc00814c>
 800816c:	010000c4 	movi	r4,3
 8008170:	21c02d2e 	bgeu	r4,r7,8008228 <memset+0x100>
 8008174:	29003fcc 	andi	r4,r5,255
 8008178:	200c923a 	slli	r6,r4,8
 800817c:	3108b03a 	or	r4,r6,r4
 8008180:	200c943a 	slli	r6,r4,16
 8008184:	218cb03a 	or	r6,r4,r6
 8008188:	010003c4 	movi	r4,15
 800818c:	21c0182e 	bgeu	r4,r7,80081f0 <memset+0xc8>
 8008190:	3b3ffc04 	addi	r12,r7,-16
 8008194:	6018d13a 	srli	r12,r12,4
 8008198:	1a000104 	addi	r8,r3,4
 800819c:	1ac00204 	addi	r11,r3,8
 80081a0:	6008913a 	slli	r4,r12,4
 80081a4:	1a800304 	addi	r10,r3,12
 80081a8:	1813883a 	mov	r9,r3
 80081ac:	21000504 	addi	r4,r4,20
 80081b0:	1909883a 	add	r4,r3,r4
 80081b4:	49800015 	stw	r6,0(r9)
 80081b8:	41800015 	stw	r6,0(r8)
 80081bc:	59800015 	stw	r6,0(r11)
 80081c0:	51800015 	stw	r6,0(r10)
 80081c4:	42000404 	addi	r8,r8,16
 80081c8:	4a400404 	addi	r9,r9,16
 80081cc:	5ac00404 	addi	r11,r11,16
 80081d0:	52800404 	addi	r10,r10,16
 80081d4:	413ff71e 	bne	r8,r4,80081b4 <__alt_data_end+0xfc0081b4>
 80081d8:	63000044 	addi	r12,r12,1
 80081dc:	6018913a 	slli	r12,r12,4
 80081e0:	39c003cc 	andi	r7,r7,15
 80081e4:	010000c4 	movi	r4,3
 80081e8:	1b07883a 	add	r3,r3,r12
 80081ec:	21c00e2e 	bgeu	r4,r7,8008228 <memset+0x100>
 80081f0:	1813883a 	mov	r9,r3
 80081f4:	3811883a 	mov	r8,r7
 80081f8:	010000c4 	movi	r4,3
 80081fc:	49800015 	stw	r6,0(r9)
 8008200:	423fff04 	addi	r8,r8,-4
 8008204:	4a400104 	addi	r9,r9,4
 8008208:	223ffc36 	bltu	r4,r8,80081fc <__alt_data_end+0xfc0081fc>
 800820c:	393fff04 	addi	r4,r7,-4
 8008210:	2008d0ba 	srli	r4,r4,2
 8008214:	39c000cc 	andi	r7,r7,3
 8008218:	21000044 	addi	r4,r4,1
 800821c:	2109883a 	add	r4,r4,r4
 8008220:	2109883a 	add	r4,r4,r4
 8008224:	1907883a 	add	r3,r3,r4
 8008228:	38000526 	beq	r7,zero,8008240 <memset+0x118>
 800822c:	19cf883a 	add	r7,r3,r7
 8008230:	19400005 	stb	r5,0(r3)
 8008234:	18c00044 	addi	r3,r3,1
 8008238:	38fffd1e 	bne	r7,r3,8008230 <__alt_data_end+0xfc008230>
 800823c:	f800283a 	ret
 8008240:	f800283a 	ret
 8008244:	2007883a 	mov	r3,r4
 8008248:	300f883a 	mov	r7,r6
 800824c:	003fc706 	br	800816c <__alt_data_end+0xfc00816c>

08008250 <_Balloc>:
 8008250:	20801317 	ldw	r2,76(r4)
 8008254:	defffc04 	addi	sp,sp,-16
 8008258:	dc400115 	stw	r17,4(sp)
 800825c:	dc000015 	stw	r16,0(sp)
 8008260:	dfc00315 	stw	ra,12(sp)
 8008264:	dc800215 	stw	r18,8(sp)
 8008268:	2023883a 	mov	r17,r4
 800826c:	2821883a 	mov	r16,r5
 8008270:	10000f26 	beq	r2,zero,80082b0 <_Balloc+0x60>
 8008274:	8407883a 	add	r3,r16,r16
 8008278:	18c7883a 	add	r3,r3,r3
 800827c:	10c7883a 	add	r3,r2,r3
 8008280:	18800017 	ldw	r2,0(r3)
 8008284:	10001126 	beq	r2,zero,80082cc <_Balloc+0x7c>
 8008288:	11000017 	ldw	r4,0(r2)
 800828c:	19000015 	stw	r4,0(r3)
 8008290:	10000415 	stw	zero,16(r2)
 8008294:	10000315 	stw	zero,12(r2)
 8008298:	dfc00317 	ldw	ra,12(sp)
 800829c:	dc800217 	ldw	r18,8(sp)
 80082a0:	dc400117 	ldw	r17,4(sp)
 80082a4:	dc000017 	ldw	r16,0(sp)
 80082a8:	dec00404 	addi	sp,sp,16
 80082ac:	f800283a 	ret
 80082b0:	01800844 	movi	r6,33
 80082b4:	01400104 	movi	r5,4
 80082b8:	800b2f80 	call	800b2f8 <_calloc_r>
 80082bc:	88801315 	stw	r2,76(r17)
 80082c0:	103fec1e 	bne	r2,zero,8008274 <__alt_data_end+0xfc008274>
 80082c4:	0005883a 	mov	r2,zero
 80082c8:	003ff306 	br	8008298 <__alt_data_end+0xfc008298>
 80082cc:	01400044 	movi	r5,1
 80082d0:	2c24983a 	sll	r18,r5,r16
 80082d4:	8809883a 	mov	r4,r17
 80082d8:	91800144 	addi	r6,r18,5
 80082dc:	318d883a 	add	r6,r6,r6
 80082e0:	318d883a 	add	r6,r6,r6
 80082e4:	800b2f80 	call	800b2f8 <_calloc_r>
 80082e8:	103ff626 	beq	r2,zero,80082c4 <__alt_data_end+0xfc0082c4>
 80082ec:	14000115 	stw	r16,4(r2)
 80082f0:	14800215 	stw	r18,8(r2)
 80082f4:	003fe606 	br	8008290 <__alt_data_end+0xfc008290>

080082f8 <_Bfree>:
 80082f8:	28000826 	beq	r5,zero,800831c <_Bfree+0x24>
 80082fc:	28c00117 	ldw	r3,4(r5)
 8008300:	20801317 	ldw	r2,76(r4)
 8008304:	18c7883a 	add	r3,r3,r3
 8008308:	18c7883a 	add	r3,r3,r3
 800830c:	10c5883a 	add	r2,r2,r3
 8008310:	10c00017 	ldw	r3,0(r2)
 8008314:	28c00015 	stw	r3,0(r5)
 8008318:	11400015 	stw	r5,0(r2)
 800831c:	f800283a 	ret

08008320 <__multadd>:
 8008320:	defff704 	addi	sp,sp,-36
 8008324:	dc800215 	stw	r18,8(sp)
 8008328:	2c800417 	ldw	r18,16(r5)
 800832c:	dd800615 	stw	r22,24(sp)
 8008330:	dd400515 	stw	r21,20(sp)
 8008334:	dd000415 	stw	r20,16(sp)
 8008338:	dcc00315 	stw	r19,12(sp)
 800833c:	dc400115 	stw	r17,4(sp)
 8008340:	dc000015 	stw	r16,0(sp)
 8008344:	dfc00815 	stw	ra,32(sp)
 8008348:	ddc00715 	stw	r23,28(sp)
 800834c:	2827883a 	mov	r19,r5
 8008350:	2029883a 	mov	r20,r4
 8008354:	3023883a 	mov	r17,r6
 8008358:	3821883a 	mov	r16,r7
 800835c:	2d400504 	addi	r21,r5,20
 8008360:	002d883a 	mov	r22,zero
 8008364:	adc00017 	ldw	r23,0(r21)
 8008368:	880b883a 	mov	r5,r17
 800836c:	ad400104 	addi	r21,r21,4
 8008370:	b93fffcc 	andi	r4,r23,65535
 8008374:	800c9040 	call	800c904 <__mulsi3>
 8008378:	b808d43a 	srli	r4,r23,16
 800837c:	880b883a 	mov	r5,r17
 8008380:	1421883a 	add	r16,r2,r16
 8008384:	800c9040 	call	800c904 <__mulsi3>
 8008388:	800ed43a 	srli	r7,r16,16
 800838c:	80ffffcc 	andi	r3,r16,65535
 8008390:	b5800044 	addi	r22,r22,1
 8008394:	11c5883a 	add	r2,r2,r7
 8008398:	100e943a 	slli	r7,r2,16
 800839c:	1020d43a 	srli	r16,r2,16
 80083a0:	38c7883a 	add	r3,r7,r3
 80083a4:	a8ffff15 	stw	r3,-4(r21)
 80083a8:	b4bfee16 	blt	r22,r18,8008364 <__alt_data_end+0xfc008364>
 80083ac:	80000926 	beq	r16,zero,80083d4 <__multadd+0xb4>
 80083b0:	98800217 	ldw	r2,8(r19)
 80083b4:	9080130e 	bge	r18,r2,8008404 <__multadd+0xe4>
 80083b8:	90800144 	addi	r2,r18,5
 80083bc:	1085883a 	add	r2,r2,r2
 80083c0:	1085883a 	add	r2,r2,r2
 80083c4:	9885883a 	add	r2,r19,r2
 80083c8:	14000015 	stw	r16,0(r2)
 80083cc:	94800044 	addi	r18,r18,1
 80083d0:	9c800415 	stw	r18,16(r19)
 80083d4:	9805883a 	mov	r2,r19
 80083d8:	dfc00817 	ldw	ra,32(sp)
 80083dc:	ddc00717 	ldw	r23,28(sp)
 80083e0:	dd800617 	ldw	r22,24(sp)
 80083e4:	dd400517 	ldw	r21,20(sp)
 80083e8:	dd000417 	ldw	r20,16(sp)
 80083ec:	dcc00317 	ldw	r19,12(sp)
 80083f0:	dc800217 	ldw	r18,8(sp)
 80083f4:	dc400117 	ldw	r17,4(sp)
 80083f8:	dc000017 	ldw	r16,0(sp)
 80083fc:	dec00904 	addi	sp,sp,36
 8008400:	f800283a 	ret
 8008404:	99400117 	ldw	r5,4(r19)
 8008408:	a009883a 	mov	r4,r20
 800840c:	29400044 	addi	r5,r5,1
 8008410:	80082500 	call	8008250 <_Balloc>
 8008414:	99800417 	ldw	r6,16(r19)
 8008418:	99400304 	addi	r5,r19,12
 800841c:	11000304 	addi	r4,r2,12
 8008420:	31800084 	addi	r6,r6,2
 8008424:	318d883a 	add	r6,r6,r6
 8008428:	318d883a 	add	r6,r6,r6
 800842c:	1023883a 	mov	r17,r2
 8008430:	8007e840 	call	8007e84 <memcpy>
 8008434:	98000a26 	beq	r19,zero,8008460 <__multadd+0x140>
 8008438:	98c00117 	ldw	r3,4(r19)
 800843c:	a0801317 	ldw	r2,76(r20)
 8008440:	18c7883a 	add	r3,r3,r3
 8008444:	18c7883a 	add	r3,r3,r3
 8008448:	10c5883a 	add	r2,r2,r3
 800844c:	10c00017 	ldw	r3,0(r2)
 8008450:	98c00015 	stw	r3,0(r19)
 8008454:	14c00015 	stw	r19,0(r2)
 8008458:	8827883a 	mov	r19,r17
 800845c:	003fd606 	br	80083b8 <__alt_data_end+0xfc0083b8>
 8008460:	8827883a 	mov	r19,r17
 8008464:	003fd406 	br	80083b8 <__alt_data_end+0xfc0083b8>

08008468 <__s2b>:
 8008468:	defff904 	addi	sp,sp,-28
 800846c:	dc400115 	stw	r17,4(sp)
 8008470:	dc000015 	stw	r16,0(sp)
 8008474:	2023883a 	mov	r17,r4
 8008478:	2821883a 	mov	r16,r5
 800847c:	39000204 	addi	r4,r7,8
 8008480:	01400244 	movi	r5,9
 8008484:	dcc00315 	stw	r19,12(sp)
 8008488:	dc800215 	stw	r18,8(sp)
 800848c:	dfc00615 	stw	ra,24(sp)
 8008490:	dd400515 	stw	r21,20(sp)
 8008494:	dd000415 	stw	r20,16(sp)
 8008498:	3825883a 	mov	r18,r7
 800849c:	3027883a 	mov	r19,r6
 80084a0:	800c7500 	call	800c750 <__divsi3>
 80084a4:	00c00044 	movi	r3,1
 80084a8:	000b883a 	mov	r5,zero
 80084ac:	1880030e 	bge	r3,r2,80084bc <__s2b+0x54>
 80084b0:	18c7883a 	add	r3,r3,r3
 80084b4:	29400044 	addi	r5,r5,1
 80084b8:	18bffd16 	blt	r3,r2,80084b0 <__alt_data_end+0xfc0084b0>
 80084bc:	8809883a 	mov	r4,r17
 80084c0:	80082500 	call	8008250 <_Balloc>
 80084c4:	d8c00717 	ldw	r3,28(sp)
 80084c8:	10c00515 	stw	r3,20(r2)
 80084cc:	00c00044 	movi	r3,1
 80084d0:	10c00415 	stw	r3,16(r2)
 80084d4:	00c00244 	movi	r3,9
 80084d8:	1cc0210e 	bge	r3,r19,8008560 <__s2b+0xf8>
 80084dc:	80eb883a 	add	r21,r16,r3
 80084e0:	a829883a 	mov	r20,r21
 80084e4:	84e1883a 	add	r16,r16,r19
 80084e8:	a1c00007 	ldb	r7,0(r20)
 80084ec:	01800284 	movi	r6,10
 80084f0:	a5000044 	addi	r20,r20,1
 80084f4:	100b883a 	mov	r5,r2
 80084f8:	39fff404 	addi	r7,r7,-48
 80084fc:	8809883a 	mov	r4,r17
 8008500:	80083200 	call	8008320 <__multadd>
 8008504:	a43ff81e 	bne	r20,r16,80084e8 <__alt_data_end+0xfc0084e8>
 8008508:	ace1883a 	add	r16,r21,r19
 800850c:	843ffe04 	addi	r16,r16,-8
 8008510:	9c800a0e 	bge	r19,r18,800853c <__s2b+0xd4>
 8008514:	94e5c83a 	sub	r18,r18,r19
 8008518:	84a5883a 	add	r18,r16,r18
 800851c:	81c00007 	ldb	r7,0(r16)
 8008520:	01800284 	movi	r6,10
 8008524:	84000044 	addi	r16,r16,1
 8008528:	100b883a 	mov	r5,r2
 800852c:	39fff404 	addi	r7,r7,-48
 8008530:	8809883a 	mov	r4,r17
 8008534:	80083200 	call	8008320 <__multadd>
 8008538:	84bff81e 	bne	r16,r18,800851c <__alt_data_end+0xfc00851c>
 800853c:	dfc00617 	ldw	ra,24(sp)
 8008540:	dd400517 	ldw	r21,20(sp)
 8008544:	dd000417 	ldw	r20,16(sp)
 8008548:	dcc00317 	ldw	r19,12(sp)
 800854c:	dc800217 	ldw	r18,8(sp)
 8008550:	dc400117 	ldw	r17,4(sp)
 8008554:	dc000017 	ldw	r16,0(sp)
 8008558:	dec00704 	addi	sp,sp,28
 800855c:	f800283a 	ret
 8008560:	84000284 	addi	r16,r16,10
 8008564:	1827883a 	mov	r19,r3
 8008568:	003fe906 	br	8008510 <__alt_data_end+0xfc008510>

0800856c <__hi0bits>:
 800856c:	20bfffec 	andhi	r2,r4,65535
 8008570:	1000141e 	bne	r2,zero,80085c4 <__hi0bits+0x58>
 8008574:	2008943a 	slli	r4,r4,16
 8008578:	00800404 	movi	r2,16
 800857c:	20ffc02c 	andhi	r3,r4,65280
 8008580:	1800021e 	bne	r3,zero,800858c <__hi0bits+0x20>
 8008584:	2008923a 	slli	r4,r4,8
 8008588:	10800204 	addi	r2,r2,8
 800858c:	20fc002c 	andhi	r3,r4,61440
 8008590:	1800021e 	bne	r3,zero,800859c <__hi0bits+0x30>
 8008594:	2008913a 	slli	r4,r4,4
 8008598:	10800104 	addi	r2,r2,4
 800859c:	20f0002c 	andhi	r3,r4,49152
 80085a0:	1800031e 	bne	r3,zero,80085b0 <__hi0bits+0x44>
 80085a4:	2109883a 	add	r4,r4,r4
 80085a8:	10800084 	addi	r2,r2,2
 80085ac:	2109883a 	add	r4,r4,r4
 80085b0:	20000316 	blt	r4,zero,80085c0 <__hi0bits+0x54>
 80085b4:	2110002c 	andhi	r4,r4,16384
 80085b8:	2000041e 	bne	r4,zero,80085cc <__hi0bits+0x60>
 80085bc:	00800804 	movi	r2,32
 80085c0:	f800283a 	ret
 80085c4:	0005883a 	mov	r2,zero
 80085c8:	003fec06 	br	800857c <__alt_data_end+0xfc00857c>
 80085cc:	10800044 	addi	r2,r2,1
 80085d0:	f800283a 	ret

080085d4 <__lo0bits>:
 80085d4:	20c00017 	ldw	r3,0(r4)
 80085d8:	188001cc 	andi	r2,r3,7
 80085dc:	10000826 	beq	r2,zero,8008600 <__lo0bits+0x2c>
 80085e0:	1880004c 	andi	r2,r3,1
 80085e4:	1000211e 	bne	r2,zero,800866c <__lo0bits+0x98>
 80085e8:	1880008c 	andi	r2,r3,2
 80085ec:	1000211e 	bne	r2,zero,8008674 <__lo0bits+0xa0>
 80085f0:	1806d0ba 	srli	r3,r3,2
 80085f4:	00800084 	movi	r2,2
 80085f8:	20c00015 	stw	r3,0(r4)
 80085fc:	f800283a 	ret
 8008600:	18bfffcc 	andi	r2,r3,65535
 8008604:	10001326 	beq	r2,zero,8008654 <__lo0bits+0x80>
 8008608:	0005883a 	mov	r2,zero
 800860c:	19403fcc 	andi	r5,r3,255
 8008610:	2800021e 	bne	r5,zero,800861c <__lo0bits+0x48>
 8008614:	1806d23a 	srli	r3,r3,8
 8008618:	10800204 	addi	r2,r2,8
 800861c:	194003cc 	andi	r5,r3,15
 8008620:	2800021e 	bne	r5,zero,800862c <__lo0bits+0x58>
 8008624:	1806d13a 	srli	r3,r3,4
 8008628:	10800104 	addi	r2,r2,4
 800862c:	194000cc 	andi	r5,r3,3
 8008630:	2800021e 	bne	r5,zero,800863c <__lo0bits+0x68>
 8008634:	1806d0ba 	srli	r3,r3,2
 8008638:	10800084 	addi	r2,r2,2
 800863c:	1940004c 	andi	r5,r3,1
 8008640:	2800081e 	bne	r5,zero,8008664 <__lo0bits+0x90>
 8008644:	1806d07a 	srli	r3,r3,1
 8008648:	1800051e 	bne	r3,zero,8008660 <__lo0bits+0x8c>
 800864c:	00800804 	movi	r2,32
 8008650:	f800283a 	ret
 8008654:	1806d43a 	srli	r3,r3,16
 8008658:	00800404 	movi	r2,16
 800865c:	003feb06 	br	800860c <__alt_data_end+0xfc00860c>
 8008660:	10800044 	addi	r2,r2,1
 8008664:	20c00015 	stw	r3,0(r4)
 8008668:	f800283a 	ret
 800866c:	0005883a 	mov	r2,zero
 8008670:	f800283a 	ret
 8008674:	1806d07a 	srli	r3,r3,1
 8008678:	00800044 	movi	r2,1
 800867c:	20c00015 	stw	r3,0(r4)
 8008680:	f800283a 	ret

08008684 <__i2b>:
 8008684:	defffd04 	addi	sp,sp,-12
 8008688:	dc000015 	stw	r16,0(sp)
 800868c:	04000044 	movi	r16,1
 8008690:	dc400115 	stw	r17,4(sp)
 8008694:	2823883a 	mov	r17,r5
 8008698:	800b883a 	mov	r5,r16
 800869c:	dfc00215 	stw	ra,8(sp)
 80086a0:	80082500 	call	8008250 <_Balloc>
 80086a4:	14400515 	stw	r17,20(r2)
 80086a8:	14000415 	stw	r16,16(r2)
 80086ac:	dfc00217 	ldw	ra,8(sp)
 80086b0:	dc400117 	ldw	r17,4(sp)
 80086b4:	dc000017 	ldw	r16,0(sp)
 80086b8:	dec00304 	addi	sp,sp,12
 80086bc:	f800283a 	ret

080086c0 <__multiply>:
 80086c0:	deffef04 	addi	sp,sp,-68
 80086c4:	dc400815 	stw	r17,32(sp)
 80086c8:	dc000715 	stw	r16,28(sp)
 80086cc:	34400417 	ldw	r17,16(r6)
 80086d0:	2c000417 	ldw	r16,16(r5)
 80086d4:	dd800d15 	stw	r22,52(sp)
 80086d8:	dc800915 	stw	r18,36(sp)
 80086dc:	dfc01015 	stw	ra,64(sp)
 80086e0:	df000f15 	stw	fp,60(sp)
 80086e4:	ddc00e15 	stw	r23,56(sp)
 80086e8:	dd400c15 	stw	r21,48(sp)
 80086ec:	dd000b15 	stw	r20,44(sp)
 80086f0:	dcc00a15 	stw	r19,40(sp)
 80086f4:	2825883a 	mov	r18,r5
 80086f8:	302d883a 	mov	r22,r6
 80086fc:	8440050e 	bge	r16,r17,8008714 <__multiply+0x54>
 8008700:	8007883a 	mov	r3,r16
 8008704:	3025883a 	mov	r18,r6
 8008708:	8821883a 	mov	r16,r17
 800870c:	282d883a 	mov	r22,r5
 8008710:	1823883a 	mov	r17,r3
 8008714:	90800217 	ldw	r2,8(r18)
 8008718:	8447883a 	add	r3,r16,r17
 800871c:	d8c00215 	stw	r3,8(sp)
 8008720:	91400117 	ldw	r5,4(r18)
 8008724:	10c0010e 	bge	r2,r3,800872c <__multiply+0x6c>
 8008728:	29400044 	addi	r5,r5,1
 800872c:	80082500 	call	8008250 <_Balloc>
 8008730:	d8c00217 	ldw	r3,8(sp)
 8008734:	d8800615 	stw	r2,24(sp)
 8008738:	18eb883a 	add	r21,r3,r3
 800873c:	ad6b883a 	add	r21,r21,r21
 8008740:	10c00504 	addi	r3,r2,20
 8008744:	1d6b883a 	add	r21,r3,r21
 8008748:	d8c00115 	stw	r3,4(sp)
 800874c:	dd400315 	stw	r21,12(sp)
 8008750:	1805883a 	mov	r2,r3
 8008754:	1d40042e 	bgeu	r3,r21,8008768 <__multiply+0xa8>
 8008758:	d8c00317 	ldw	r3,12(sp)
 800875c:	10000015 	stw	zero,0(r2)
 8008760:	10800104 	addi	r2,r2,4
 8008764:	10fffc36 	bltu	r2,r3,8008758 <__alt_data_end+0xfc008758>
 8008768:	8c63883a 	add	r17,r17,r17
 800876c:	b5800504 	addi	r22,r22,20
 8008770:	8c63883a 	add	r17,r17,r17
 8008774:	94800504 	addi	r18,r18,20
 8008778:	8421883a 	add	r16,r16,r16
 800877c:	b463883a 	add	r17,r22,r17
 8008780:	8421883a 	add	r16,r16,r16
 8008784:	dd800015 	stw	r22,0(sp)
 8008788:	dc800415 	stw	r18,16(sp)
 800878c:	dc400515 	stw	r17,20(sp)
 8008790:	9429883a 	add	r20,r18,r16
 8008794:	b4404f2e 	bgeu	r22,r17,80088d4 <__multiply+0x214>
 8008798:	d8c00017 	ldw	r3,0(sp)
 800879c:	1c800017 	ldw	r18,0(r3)
 80087a0:	947fffcc 	andi	r17,r18,65535
 80087a4:	88001e26 	beq	r17,zero,8008820 <__multiply+0x160>
 80087a8:	dd800117 	ldw	r22,4(sp)
 80087ac:	dd400417 	ldw	r21,16(sp)
 80087b0:	0027883a 	mov	r19,zero
 80087b4:	ac800017 	ldw	r18,0(r21)
 80087b8:	b4000017 	ldw	r16,0(r22)
 80087bc:	880b883a 	mov	r5,r17
 80087c0:	913fffcc 	andi	r4,r18,65535
 80087c4:	800c9040 	call	800c904 <__mulsi3>
 80087c8:	9008d43a 	srli	r4,r18,16
 80087cc:	84bfffcc 	andi	r18,r16,65535
 80087d0:	1485883a 	add	r2,r2,r18
 80087d4:	14e5883a 	add	r18,r2,r19
 80087d8:	8020d43a 	srli	r16,r16,16
 80087dc:	9026d43a 	srli	r19,r18,16
 80087e0:	880b883a 	mov	r5,r17
 80087e4:	800c9040 	call	800c904 <__mulsi3>
 80087e8:	1405883a 	add	r2,r2,r16
 80087ec:	14e1883a 	add	r16,r2,r19
 80087f0:	90ffffcc 	andi	r3,r18,65535
 80087f4:	8024943a 	slli	r18,r16,16
 80087f8:	ad400104 	addi	r21,r21,4
 80087fc:	b005883a 	mov	r2,r22
 8008800:	90c6b03a 	or	r3,r18,r3
 8008804:	b0c00015 	stw	r3,0(r22)
 8008808:	8026d43a 	srli	r19,r16,16
 800880c:	b5800104 	addi	r22,r22,4
 8008810:	ad3fe836 	bltu	r21,r20,80087b4 <__alt_data_end+0xfc0087b4>
 8008814:	d8c00017 	ldw	r3,0(sp)
 8008818:	14c00115 	stw	r19,4(r2)
 800881c:	1c800017 	ldw	r18,0(r3)
 8008820:	9024d43a 	srli	r18,r18,16
 8008824:	90002226 	beq	r18,zero,80088b0 <__multiply+0x1f0>
 8008828:	d8c00117 	ldw	r3,4(sp)
 800882c:	dd800417 	ldw	r22,16(sp)
 8008830:	002f883a 	mov	r23,zero
 8008834:	1f000017 	ldw	fp,0(r3)
 8008838:	1823883a 	mov	r17,r3
 800883c:	182b883a 	mov	r21,r3
 8008840:	e021883a 	mov	r16,fp
 8008844:	00000106 	br	800884c <__multiply+0x18c>
 8008848:	982b883a 	mov	r21,r19
 800884c:	b100000b 	ldhu	r4,0(r22)
 8008850:	8020d43a 	srli	r16,r16,16
 8008854:	900b883a 	mov	r5,r18
 8008858:	800c9040 	call	800c904 <__mulsi3>
 800885c:	1405883a 	add	r2,r2,r16
 8008860:	15ef883a 	add	r23,r2,r23
 8008864:	b804943a 	slli	r2,r23,16
 8008868:	e0ffffcc 	andi	r3,fp,65535
 800886c:	8c400104 	addi	r17,r17,4
 8008870:	10c6b03a 	or	r3,r2,r3
 8008874:	88ffff15 	stw	r3,-4(r17)
 8008878:	b5800104 	addi	r22,r22,4
 800887c:	b13fff17 	ldw	r4,-4(r22)
 8008880:	acc00104 	addi	r19,r21,4
 8008884:	900b883a 	mov	r5,r18
 8008888:	2008d43a 	srli	r4,r4,16
 800888c:	9c000017 	ldw	r16,0(r19)
 8008890:	800c9040 	call	800c904 <__mulsi3>
 8008894:	b806d43a 	srli	r3,r23,16
 8008898:	813fffcc 	andi	r4,r16,65535
 800889c:	1105883a 	add	r2,r2,r4
 80088a0:	10f9883a 	add	fp,r2,r3
 80088a4:	e02ed43a 	srli	r23,fp,16
 80088a8:	b53fe736 	bltu	r22,r20,8008848 <__alt_data_end+0xfc008848>
 80088ac:	af000115 	stw	fp,4(r21)
 80088b0:	d8c00017 	ldw	r3,0(sp)
 80088b4:	d9000517 	ldw	r4,20(sp)
 80088b8:	18c00104 	addi	r3,r3,4
 80088bc:	d8c00015 	stw	r3,0(sp)
 80088c0:	d8c00117 	ldw	r3,4(sp)
 80088c4:	18c00104 	addi	r3,r3,4
 80088c8:	d8c00115 	stw	r3,4(sp)
 80088cc:	d8c00017 	ldw	r3,0(sp)
 80088d0:	193fb136 	bltu	r3,r4,8008798 <__alt_data_end+0xfc008798>
 80088d4:	d8c00217 	ldw	r3,8(sp)
 80088d8:	00c00c0e 	bge	zero,r3,800890c <__multiply+0x24c>
 80088dc:	d8c00317 	ldw	r3,12(sp)
 80088e0:	18bfff17 	ldw	r2,-4(r3)
 80088e4:	1d7fff04 	addi	r21,r3,-4
 80088e8:	10000326 	beq	r2,zero,80088f8 <__multiply+0x238>
 80088ec:	00000706 	br	800890c <__multiply+0x24c>
 80088f0:	a8800017 	ldw	r2,0(r21)
 80088f4:	1000051e 	bne	r2,zero,800890c <__multiply+0x24c>
 80088f8:	d8c00217 	ldw	r3,8(sp)
 80088fc:	ad7fff04 	addi	r21,r21,-4
 8008900:	18ffffc4 	addi	r3,r3,-1
 8008904:	d8c00215 	stw	r3,8(sp)
 8008908:	183ff91e 	bne	r3,zero,80088f0 <__alt_data_end+0xfc0088f0>
 800890c:	d8c00617 	ldw	r3,24(sp)
 8008910:	d9000217 	ldw	r4,8(sp)
 8008914:	1805883a 	mov	r2,r3
 8008918:	19000415 	stw	r4,16(r3)
 800891c:	dfc01017 	ldw	ra,64(sp)
 8008920:	df000f17 	ldw	fp,60(sp)
 8008924:	ddc00e17 	ldw	r23,56(sp)
 8008928:	dd800d17 	ldw	r22,52(sp)
 800892c:	dd400c17 	ldw	r21,48(sp)
 8008930:	dd000b17 	ldw	r20,44(sp)
 8008934:	dcc00a17 	ldw	r19,40(sp)
 8008938:	dc800917 	ldw	r18,36(sp)
 800893c:	dc400817 	ldw	r17,32(sp)
 8008940:	dc000717 	ldw	r16,28(sp)
 8008944:	dec01104 	addi	sp,sp,68
 8008948:	f800283a 	ret

0800894c <__pow5mult>:
 800894c:	defffa04 	addi	sp,sp,-24
 8008950:	dcc00315 	stw	r19,12(sp)
 8008954:	dc000015 	stw	r16,0(sp)
 8008958:	dfc00515 	stw	ra,20(sp)
 800895c:	dd000415 	stw	r20,16(sp)
 8008960:	dc800215 	stw	r18,8(sp)
 8008964:	dc400115 	stw	r17,4(sp)
 8008968:	308000cc 	andi	r2,r6,3
 800896c:	3021883a 	mov	r16,r6
 8008970:	2027883a 	mov	r19,r4
 8008974:	10002f1e 	bne	r2,zero,8008a34 <__pow5mult+0xe8>
 8008978:	2825883a 	mov	r18,r5
 800897c:	8021d0ba 	srai	r16,r16,2
 8008980:	80001a26 	beq	r16,zero,80089ec <__pow5mult+0xa0>
 8008984:	9c401217 	ldw	r17,72(r19)
 8008988:	8800061e 	bne	r17,zero,80089a4 <__pow5mult+0x58>
 800898c:	00003406 	br	8008a60 <__pow5mult+0x114>
 8008990:	8021d07a 	srai	r16,r16,1
 8008994:	80001526 	beq	r16,zero,80089ec <__pow5mult+0xa0>
 8008998:	88800017 	ldw	r2,0(r17)
 800899c:	10001c26 	beq	r2,zero,8008a10 <__pow5mult+0xc4>
 80089a0:	1023883a 	mov	r17,r2
 80089a4:	8080004c 	andi	r2,r16,1
 80089a8:	103ff926 	beq	r2,zero,8008990 <__alt_data_end+0xfc008990>
 80089ac:	880d883a 	mov	r6,r17
 80089b0:	900b883a 	mov	r5,r18
 80089b4:	9809883a 	mov	r4,r19
 80089b8:	80086c00 	call	80086c0 <__multiply>
 80089bc:	90001b26 	beq	r18,zero,8008a2c <__pow5mult+0xe0>
 80089c0:	91000117 	ldw	r4,4(r18)
 80089c4:	98c01317 	ldw	r3,76(r19)
 80089c8:	8021d07a 	srai	r16,r16,1
 80089cc:	2109883a 	add	r4,r4,r4
 80089d0:	2109883a 	add	r4,r4,r4
 80089d4:	1907883a 	add	r3,r3,r4
 80089d8:	19000017 	ldw	r4,0(r3)
 80089dc:	91000015 	stw	r4,0(r18)
 80089e0:	1c800015 	stw	r18,0(r3)
 80089e4:	1025883a 	mov	r18,r2
 80089e8:	803feb1e 	bne	r16,zero,8008998 <__alt_data_end+0xfc008998>
 80089ec:	9005883a 	mov	r2,r18
 80089f0:	dfc00517 	ldw	ra,20(sp)
 80089f4:	dd000417 	ldw	r20,16(sp)
 80089f8:	dcc00317 	ldw	r19,12(sp)
 80089fc:	dc800217 	ldw	r18,8(sp)
 8008a00:	dc400117 	ldw	r17,4(sp)
 8008a04:	dc000017 	ldw	r16,0(sp)
 8008a08:	dec00604 	addi	sp,sp,24
 8008a0c:	f800283a 	ret
 8008a10:	880d883a 	mov	r6,r17
 8008a14:	880b883a 	mov	r5,r17
 8008a18:	9809883a 	mov	r4,r19
 8008a1c:	80086c00 	call	80086c0 <__multiply>
 8008a20:	88800015 	stw	r2,0(r17)
 8008a24:	10000015 	stw	zero,0(r2)
 8008a28:	003fdd06 	br	80089a0 <__alt_data_end+0xfc0089a0>
 8008a2c:	1025883a 	mov	r18,r2
 8008a30:	003fd706 	br	8008990 <__alt_data_end+0xfc008990>
 8008a34:	10bfffc4 	addi	r2,r2,-1
 8008a38:	1085883a 	add	r2,r2,r2
 8008a3c:	00c20074 	movhi	r3,2049
 8008a40:	18c87c04 	addi	r3,r3,8688
 8008a44:	1085883a 	add	r2,r2,r2
 8008a48:	1885883a 	add	r2,r3,r2
 8008a4c:	11800017 	ldw	r6,0(r2)
 8008a50:	000f883a 	mov	r7,zero
 8008a54:	80083200 	call	8008320 <__multadd>
 8008a58:	1025883a 	mov	r18,r2
 8008a5c:	003fc706 	br	800897c <__alt_data_end+0xfc00897c>
 8008a60:	05000044 	movi	r20,1
 8008a64:	a00b883a 	mov	r5,r20
 8008a68:	9809883a 	mov	r4,r19
 8008a6c:	80082500 	call	8008250 <_Balloc>
 8008a70:	1023883a 	mov	r17,r2
 8008a74:	00809c44 	movi	r2,625
 8008a78:	88800515 	stw	r2,20(r17)
 8008a7c:	8d000415 	stw	r20,16(r17)
 8008a80:	9c401215 	stw	r17,72(r19)
 8008a84:	88000015 	stw	zero,0(r17)
 8008a88:	003fc606 	br	80089a4 <__alt_data_end+0xfc0089a4>

08008a8c <__lshift>:
 8008a8c:	defff904 	addi	sp,sp,-28
 8008a90:	dd400515 	stw	r21,20(sp)
 8008a94:	dcc00315 	stw	r19,12(sp)
 8008a98:	302bd17a 	srai	r21,r6,5
 8008a9c:	2cc00417 	ldw	r19,16(r5)
 8008aa0:	28800217 	ldw	r2,8(r5)
 8008aa4:	dd000415 	stw	r20,16(sp)
 8008aa8:	ace7883a 	add	r19,r21,r19
 8008aac:	dc800215 	stw	r18,8(sp)
 8008ab0:	dc400115 	stw	r17,4(sp)
 8008ab4:	dc000015 	stw	r16,0(sp)
 8008ab8:	dfc00615 	stw	ra,24(sp)
 8008abc:	9c000044 	addi	r16,r19,1
 8008ac0:	2823883a 	mov	r17,r5
 8008ac4:	3029883a 	mov	r20,r6
 8008ac8:	2025883a 	mov	r18,r4
 8008acc:	29400117 	ldw	r5,4(r5)
 8008ad0:	1400030e 	bge	r2,r16,8008ae0 <__lshift+0x54>
 8008ad4:	1085883a 	add	r2,r2,r2
 8008ad8:	29400044 	addi	r5,r5,1
 8008adc:	143ffd16 	blt	r2,r16,8008ad4 <__alt_data_end+0xfc008ad4>
 8008ae0:	9009883a 	mov	r4,r18
 8008ae4:	80082500 	call	8008250 <_Balloc>
 8008ae8:	10c00504 	addi	r3,r2,20
 8008aec:	0540070e 	bge	zero,r21,8008b0c <__lshift+0x80>
 8008af0:	ad6b883a 	add	r21,r21,r21
 8008af4:	ad6b883a 	add	r21,r21,r21
 8008af8:	1809883a 	mov	r4,r3
 8008afc:	1d47883a 	add	r3,r3,r21
 8008b00:	20000015 	stw	zero,0(r4)
 8008b04:	21000104 	addi	r4,r4,4
 8008b08:	193ffd1e 	bne	r3,r4,8008b00 <__alt_data_end+0xfc008b00>
 8008b0c:	8a000417 	ldw	r8,16(r17)
 8008b10:	89000504 	addi	r4,r17,20
 8008b14:	a18007cc 	andi	r6,r20,31
 8008b18:	4211883a 	add	r8,r8,r8
 8008b1c:	4211883a 	add	r8,r8,r8
 8008b20:	2211883a 	add	r8,r4,r8
 8008b24:	30002326 	beq	r6,zero,8008bb4 <__lshift+0x128>
 8008b28:	02400804 	movi	r9,32
 8008b2c:	4993c83a 	sub	r9,r9,r6
 8008b30:	000b883a 	mov	r5,zero
 8008b34:	21c00017 	ldw	r7,0(r4)
 8008b38:	1815883a 	mov	r10,r3
 8008b3c:	18c00104 	addi	r3,r3,4
 8008b40:	398e983a 	sll	r7,r7,r6
 8008b44:	21000104 	addi	r4,r4,4
 8008b48:	394ab03a 	or	r5,r7,r5
 8008b4c:	197fff15 	stw	r5,-4(r3)
 8008b50:	217fff17 	ldw	r5,-4(r4)
 8008b54:	2a4ad83a 	srl	r5,r5,r9
 8008b58:	223ff636 	bltu	r4,r8,8008b34 <__alt_data_end+0xfc008b34>
 8008b5c:	51400115 	stw	r5,4(r10)
 8008b60:	28001a1e 	bne	r5,zero,8008bcc <__lshift+0x140>
 8008b64:	843fffc4 	addi	r16,r16,-1
 8008b68:	14000415 	stw	r16,16(r2)
 8008b6c:	88000826 	beq	r17,zero,8008b90 <__lshift+0x104>
 8008b70:	89000117 	ldw	r4,4(r17)
 8008b74:	90c01317 	ldw	r3,76(r18)
 8008b78:	2109883a 	add	r4,r4,r4
 8008b7c:	2109883a 	add	r4,r4,r4
 8008b80:	1907883a 	add	r3,r3,r4
 8008b84:	19000017 	ldw	r4,0(r3)
 8008b88:	89000015 	stw	r4,0(r17)
 8008b8c:	1c400015 	stw	r17,0(r3)
 8008b90:	dfc00617 	ldw	ra,24(sp)
 8008b94:	dd400517 	ldw	r21,20(sp)
 8008b98:	dd000417 	ldw	r20,16(sp)
 8008b9c:	dcc00317 	ldw	r19,12(sp)
 8008ba0:	dc800217 	ldw	r18,8(sp)
 8008ba4:	dc400117 	ldw	r17,4(sp)
 8008ba8:	dc000017 	ldw	r16,0(sp)
 8008bac:	dec00704 	addi	sp,sp,28
 8008bb0:	f800283a 	ret
 8008bb4:	21400017 	ldw	r5,0(r4)
 8008bb8:	18c00104 	addi	r3,r3,4
 8008bbc:	21000104 	addi	r4,r4,4
 8008bc0:	197fff15 	stw	r5,-4(r3)
 8008bc4:	223ffb36 	bltu	r4,r8,8008bb4 <__alt_data_end+0xfc008bb4>
 8008bc8:	003fe606 	br	8008b64 <__alt_data_end+0xfc008b64>
 8008bcc:	9c000084 	addi	r16,r19,2
 8008bd0:	003fe406 	br	8008b64 <__alt_data_end+0xfc008b64>

08008bd4 <__mcmp>:
 8008bd4:	20800417 	ldw	r2,16(r4)
 8008bd8:	28c00417 	ldw	r3,16(r5)
 8008bdc:	10c5c83a 	sub	r2,r2,r3
 8008be0:	1000111e 	bne	r2,zero,8008c28 <__mcmp+0x54>
 8008be4:	18c7883a 	add	r3,r3,r3
 8008be8:	18c7883a 	add	r3,r3,r3
 8008bec:	21000504 	addi	r4,r4,20
 8008bf0:	29400504 	addi	r5,r5,20
 8008bf4:	20c5883a 	add	r2,r4,r3
 8008bf8:	28cb883a 	add	r5,r5,r3
 8008bfc:	00000106 	br	8008c04 <__mcmp+0x30>
 8008c00:	20800a2e 	bgeu	r4,r2,8008c2c <__mcmp+0x58>
 8008c04:	10bfff04 	addi	r2,r2,-4
 8008c08:	297fff04 	addi	r5,r5,-4
 8008c0c:	11800017 	ldw	r6,0(r2)
 8008c10:	28c00017 	ldw	r3,0(r5)
 8008c14:	30fffa26 	beq	r6,r3,8008c00 <__alt_data_end+0xfc008c00>
 8008c18:	30c00236 	bltu	r6,r3,8008c24 <__mcmp+0x50>
 8008c1c:	00800044 	movi	r2,1
 8008c20:	f800283a 	ret
 8008c24:	00bfffc4 	movi	r2,-1
 8008c28:	f800283a 	ret
 8008c2c:	0005883a 	mov	r2,zero
 8008c30:	f800283a 	ret

08008c34 <__mdiff>:
 8008c34:	28c00417 	ldw	r3,16(r5)
 8008c38:	30800417 	ldw	r2,16(r6)
 8008c3c:	defffa04 	addi	sp,sp,-24
 8008c40:	dcc00315 	stw	r19,12(sp)
 8008c44:	dc800215 	stw	r18,8(sp)
 8008c48:	dfc00515 	stw	ra,20(sp)
 8008c4c:	dd000415 	stw	r20,16(sp)
 8008c50:	dc400115 	stw	r17,4(sp)
 8008c54:	dc000015 	stw	r16,0(sp)
 8008c58:	1887c83a 	sub	r3,r3,r2
 8008c5c:	2825883a 	mov	r18,r5
 8008c60:	3027883a 	mov	r19,r6
 8008c64:	1800141e 	bne	r3,zero,8008cb8 <__mdiff+0x84>
 8008c68:	1085883a 	add	r2,r2,r2
 8008c6c:	1085883a 	add	r2,r2,r2
 8008c70:	2a000504 	addi	r8,r5,20
 8008c74:	34000504 	addi	r16,r6,20
 8008c78:	4087883a 	add	r3,r8,r2
 8008c7c:	8085883a 	add	r2,r16,r2
 8008c80:	00000106 	br	8008c88 <__mdiff+0x54>
 8008c84:	40c0592e 	bgeu	r8,r3,8008dec <__mdiff+0x1b8>
 8008c88:	18ffff04 	addi	r3,r3,-4
 8008c8c:	10bfff04 	addi	r2,r2,-4
 8008c90:	19c00017 	ldw	r7,0(r3)
 8008c94:	11400017 	ldw	r5,0(r2)
 8008c98:	397ffa26 	beq	r7,r5,8008c84 <__alt_data_end+0xfc008c84>
 8008c9c:	3940592e 	bgeu	r7,r5,8008e04 <__mdiff+0x1d0>
 8008ca0:	9005883a 	mov	r2,r18
 8008ca4:	4023883a 	mov	r17,r8
 8008ca8:	9825883a 	mov	r18,r19
 8008cac:	05000044 	movi	r20,1
 8008cb0:	1027883a 	mov	r19,r2
 8008cb4:	00000406 	br	8008cc8 <__mdiff+0x94>
 8008cb8:	18005616 	blt	r3,zero,8008e14 <__mdiff+0x1e0>
 8008cbc:	34400504 	addi	r17,r6,20
 8008cc0:	2c000504 	addi	r16,r5,20
 8008cc4:	0029883a 	mov	r20,zero
 8008cc8:	91400117 	ldw	r5,4(r18)
 8008ccc:	80082500 	call	8008250 <_Balloc>
 8008cd0:	92400417 	ldw	r9,16(r18)
 8008cd4:	9b000417 	ldw	r12,16(r19)
 8008cd8:	12c00504 	addi	r11,r2,20
 8008cdc:	4a51883a 	add	r8,r9,r9
 8008ce0:	6319883a 	add	r12,r12,r12
 8008ce4:	4211883a 	add	r8,r8,r8
 8008ce8:	6319883a 	add	r12,r12,r12
 8008cec:	15000315 	stw	r20,12(r2)
 8008cf0:	8211883a 	add	r8,r16,r8
 8008cf4:	8b19883a 	add	r12,r17,r12
 8008cf8:	0007883a 	mov	r3,zero
 8008cfc:	81400017 	ldw	r5,0(r16)
 8008d00:	89c00017 	ldw	r7,0(r17)
 8008d04:	59800104 	addi	r6,r11,4
 8008d08:	293fffcc 	andi	r4,r5,65535
 8008d0c:	20c7883a 	add	r3,r4,r3
 8008d10:	393fffcc 	andi	r4,r7,65535
 8008d14:	1909c83a 	sub	r4,r3,r4
 8008d18:	280ad43a 	srli	r5,r5,16
 8008d1c:	380ed43a 	srli	r7,r7,16
 8008d20:	2007d43a 	srai	r3,r4,16
 8008d24:	213fffcc 	andi	r4,r4,65535
 8008d28:	29cbc83a 	sub	r5,r5,r7
 8008d2c:	28c7883a 	add	r3,r5,r3
 8008d30:	180a943a 	slli	r5,r3,16
 8008d34:	8c400104 	addi	r17,r17,4
 8008d38:	84000104 	addi	r16,r16,4
 8008d3c:	2908b03a 	or	r4,r5,r4
 8008d40:	59000015 	stw	r4,0(r11)
 8008d44:	1807d43a 	srai	r3,r3,16
 8008d48:	3015883a 	mov	r10,r6
 8008d4c:	3017883a 	mov	r11,r6
 8008d50:	8b3fea36 	bltu	r17,r12,8008cfc <__alt_data_end+0xfc008cfc>
 8008d54:	8200162e 	bgeu	r16,r8,8008db0 <__mdiff+0x17c>
 8008d58:	8017883a 	mov	r11,r16
 8008d5c:	59400017 	ldw	r5,0(r11)
 8008d60:	31800104 	addi	r6,r6,4
 8008d64:	5ac00104 	addi	r11,r11,4
 8008d68:	293fffcc 	andi	r4,r5,65535
 8008d6c:	20c7883a 	add	r3,r4,r3
 8008d70:	280ed43a 	srli	r7,r5,16
 8008d74:	180bd43a 	srai	r5,r3,16
 8008d78:	193fffcc 	andi	r4,r3,65535
 8008d7c:	3947883a 	add	r3,r7,r5
 8008d80:	180a943a 	slli	r5,r3,16
 8008d84:	1807d43a 	srai	r3,r3,16
 8008d88:	2908b03a 	or	r4,r5,r4
 8008d8c:	313fff15 	stw	r4,-4(r6)
 8008d90:	5a3ff236 	bltu	r11,r8,8008d5c <__alt_data_end+0xfc008d5c>
 8008d94:	0406303a 	nor	r3,zero,r16
 8008d98:	1a07883a 	add	r3,r3,r8
 8008d9c:	1806d0ba 	srli	r3,r3,2
 8008da0:	18c00044 	addi	r3,r3,1
 8008da4:	18c7883a 	add	r3,r3,r3
 8008da8:	18c7883a 	add	r3,r3,r3
 8008dac:	50d5883a 	add	r10,r10,r3
 8008db0:	50ffff04 	addi	r3,r10,-4
 8008db4:	2000041e 	bne	r4,zero,8008dc8 <__mdiff+0x194>
 8008db8:	18ffff04 	addi	r3,r3,-4
 8008dbc:	19000017 	ldw	r4,0(r3)
 8008dc0:	4a7fffc4 	addi	r9,r9,-1
 8008dc4:	203ffc26 	beq	r4,zero,8008db8 <__alt_data_end+0xfc008db8>
 8008dc8:	12400415 	stw	r9,16(r2)
 8008dcc:	dfc00517 	ldw	ra,20(sp)
 8008dd0:	dd000417 	ldw	r20,16(sp)
 8008dd4:	dcc00317 	ldw	r19,12(sp)
 8008dd8:	dc800217 	ldw	r18,8(sp)
 8008ddc:	dc400117 	ldw	r17,4(sp)
 8008de0:	dc000017 	ldw	r16,0(sp)
 8008de4:	dec00604 	addi	sp,sp,24
 8008de8:	f800283a 	ret
 8008dec:	000b883a 	mov	r5,zero
 8008df0:	80082500 	call	8008250 <_Balloc>
 8008df4:	00c00044 	movi	r3,1
 8008df8:	10c00415 	stw	r3,16(r2)
 8008dfc:	10000515 	stw	zero,20(r2)
 8008e00:	003ff206 	br	8008dcc <__alt_data_end+0xfc008dcc>
 8008e04:	8023883a 	mov	r17,r16
 8008e08:	0029883a 	mov	r20,zero
 8008e0c:	4021883a 	mov	r16,r8
 8008e10:	003fad06 	br	8008cc8 <__alt_data_end+0xfc008cc8>
 8008e14:	9005883a 	mov	r2,r18
 8008e18:	94400504 	addi	r17,r18,20
 8008e1c:	9c000504 	addi	r16,r19,20
 8008e20:	9825883a 	mov	r18,r19
 8008e24:	05000044 	movi	r20,1
 8008e28:	1027883a 	mov	r19,r2
 8008e2c:	003fa606 	br	8008cc8 <__alt_data_end+0xfc008cc8>

08008e30 <__ulp>:
 8008e30:	295ffc2c 	andhi	r5,r5,32752
 8008e34:	00bf3034 	movhi	r2,64704
 8008e38:	2887883a 	add	r3,r5,r2
 8008e3c:	00c0020e 	bge	zero,r3,8008e48 <__ulp+0x18>
 8008e40:	0005883a 	mov	r2,zero
 8008e44:	f800283a 	ret
 8008e48:	00c7c83a 	sub	r3,zero,r3
 8008e4c:	1807d53a 	srai	r3,r3,20
 8008e50:	008004c4 	movi	r2,19
 8008e54:	10c00b0e 	bge	r2,r3,8008e84 <__ulp+0x54>
 8008e58:	18bffb04 	addi	r2,r3,-20
 8008e5c:	01000784 	movi	r4,30
 8008e60:	0007883a 	mov	r3,zero
 8008e64:	20800516 	blt	r4,r2,8008e7c <__ulp+0x4c>
 8008e68:	010007c4 	movi	r4,31
 8008e6c:	2089c83a 	sub	r4,r4,r2
 8008e70:	00800044 	movi	r2,1
 8008e74:	1104983a 	sll	r2,r2,r4
 8008e78:	f800283a 	ret
 8008e7c:	00800044 	movi	r2,1
 8008e80:	f800283a 	ret
 8008e84:	01400234 	movhi	r5,8
 8008e88:	28c7d83a 	sra	r3,r5,r3
 8008e8c:	0005883a 	mov	r2,zero
 8008e90:	f800283a 	ret

08008e94 <__b2d>:
 8008e94:	defffa04 	addi	sp,sp,-24
 8008e98:	dc000015 	stw	r16,0(sp)
 8008e9c:	24000417 	ldw	r16,16(r4)
 8008ea0:	dc400115 	stw	r17,4(sp)
 8008ea4:	24400504 	addi	r17,r4,20
 8008ea8:	8421883a 	add	r16,r16,r16
 8008eac:	8421883a 	add	r16,r16,r16
 8008eb0:	8c21883a 	add	r16,r17,r16
 8008eb4:	dc800215 	stw	r18,8(sp)
 8008eb8:	84bfff17 	ldw	r18,-4(r16)
 8008ebc:	dd000415 	stw	r20,16(sp)
 8008ec0:	dcc00315 	stw	r19,12(sp)
 8008ec4:	9009883a 	mov	r4,r18
 8008ec8:	2829883a 	mov	r20,r5
 8008ecc:	dfc00515 	stw	ra,20(sp)
 8008ed0:	800856c0 	call	800856c <__hi0bits>
 8008ed4:	00c00804 	movi	r3,32
 8008ed8:	1889c83a 	sub	r4,r3,r2
 8008edc:	a1000015 	stw	r4,0(r20)
 8008ee0:	01000284 	movi	r4,10
 8008ee4:	84ffff04 	addi	r19,r16,-4
 8008ee8:	20801216 	blt	r4,r2,8008f34 <__b2d+0xa0>
 8008eec:	018002c4 	movi	r6,11
 8008ef0:	308dc83a 	sub	r6,r6,r2
 8008ef4:	9186d83a 	srl	r3,r18,r6
 8008ef8:	18cffc34 	orhi	r3,r3,16368
 8008efc:	8cc0212e 	bgeu	r17,r19,8008f84 <__b2d+0xf0>
 8008f00:	813ffe17 	ldw	r4,-8(r16)
 8008f04:	218cd83a 	srl	r6,r4,r6
 8008f08:	10800544 	addi	r2,r2,21
 8008f0c:	9084983a 	sll	r2,r18,r2
 8008f10:	1184b03a 	or	r2,r2,r6
 8008f14:	dfc00517 	ldw	ra,20(sp)
 8008f18:	dd000417 	ldw	r20,16(sp)
 8008f1c:	dcc00317 	ldw	r19,12(sp)
 8008f20:	dc800217 	ldw	r18,8(sp)
 8008f24:	dc400117 	ldw	r17,4(sp)
 8008f28:	dc000017 	ldw	r16,0(sp)
 8008f2c:	dec00604 	addi	sp,sp,24
 8008f30:	f800283a 	ret
 8008f34:	8cc00f2e 	bgeu	r17,r19,8008f74 <__b2d+0xe0>
 8008f38:	117ffd44 	addi	r5,r2,-11
 8008f3c:	80bffe17 	ldw	r2,-8(r16)
 8008f40:	28000e26 	beq	r5,zero,8008f7c <__b2d+0xe8>
 8008f44:	1949c83a 	sub	r4,r3,r5
 8008f48:	9164983a 	sll	r18,r18,r5
 8008f4c:	1106d83a 	srl	r3,r2,r4
 8008f50:	81bffe04 	addi	r6,r16,-8
 8008f54:	948ffc34 	orhi	r18,r18,16368
 8008f58:	90c6b03a 	or	r3,r18,r3
 8008f5c:	89800e2e 	bgeu	r17,r6,8008f98 <__b2d+0x104>
 8008f60:	81bffd17 	ldw	r6,-12(r16)
 8008f64:	1144983a 	sll	r2,r2,r5
 8008f68:	310ad83a 	srl	r5,r6,r4
 8008f6c:	2884b03a 	or	r2,r5,r2
 8008f70:	003fe806 	br	8008f14 <__alt_data_end+0xfc008f14>
 8008f74:	10bffd44 	addi	r2,r2,-11
 8008f78:	1000041e 	bne	r2,zero,8008f8c <__b2d+0xf8>
 8008f7c:	90cffc34 	orhi	r3,r18,16368
 8008f80:	003fe406 	br	8008f14 <__alt_data_end+0xfc008f14>
 8008f84:	000d883a 	mov	r6,zero
 8008f88:	003fdf06 	br	8008f08 <__alt_data_end+0xfc008f08>
 8008f8c:	90a4983a 	sll	r18,r18,r2
 8008f90:	0005883a 	mov	r2,zero
 8008f94:	003ff906 	br	8008f7c <__alt_data_end+0xfc008f7c>
 8008f98:	1144983a 	sll	r2,r2,r5
 8008f9c:	003fdd06 	br	8008f14 <__alt_data_end+0xfc008f14>

08008fa0 <__d2b>:
 8008fa0:	defff804 	addi	sp,sp,-32
 8008fa4:	dc000215 	stw	r16,8(sp)
 8008fa8:	3021883a 	mov	r16,r6
 8008fac:	dc400315 	stw	r17,12(sp)
 8008fb0:	8022907a 	slli	r17,r16,1
 8008fb4:	dd000615 	stw	r20,24(sp)
 8008fb8:	2829883a 	mov	r20,r5
 8008fbc:	01400044 	movi	r5,1
 8008fc0:	dcc00515 	stw	r19,20(sp)
 8008fc4:	dc800415 	stw	r18,16(sp)
 8008fc8:	dfc00715 	stw	ra,28(sp)
 8008fcc:	3825883a 	mov	r18,r7
 8008fd0:	8822d57a 	srli	r17,r17,21
 8008fd4:	80082500 	call	8008250 <_Balloc>
 8008fd8:	1027883a 	mov	r19,r2
 8008fdc:	00800434 	movhi	r2,16
 8008fe0:	10bfffc4 	addi	r2,r2,-1
 8008fe4:	808c703a 	and	r6,r16,r2
 8008fe8:	88000126 	beq	r17,zero,8008ff0 <__d2b+0x50>
 8008fec:	31800434 	orhi	r6,r6,16
 8008ff0:	d9800015 	stw	r6,0(sp)
 8008ff4:	a0002426 	beq	r20,zero,8009088 <__d2b+0xe8>
 8008ff8:	d9000104 	addi	r4,sp,4
 8008ffc:	dd000115 	stw	r20,4(sp)
 8009000:	80085d40 	call	80085d4 <__lo0bits>
 8009004:	d8c00017 	ldw	r3,0(sp)
 8009008:	10002f1e 	bne	r2,zero,80090c8 <__d2b+0x128>
 800900c:	d9000117 	ldw	r4,4(sp)
 8009010:	99000515 	stw	r4,20(r19)
 8009014:	1821003a 	cmpeq	r16,r3,zero
 8009018:	01000084 	movi	r4,2
 800901c:	2421c83a 	sub	r16,r4,r16
 8009020:	98c00615 	stw	r3,24(r19)
 8009024:	9c000415 	stw	r16,16(r19)
 8009028:	88001f1e 	bne	r17,zero,80090a8 <__d2b+0x108>
 800902c:	10bef384 	addi	r2,r2,-1074
 8009030:	90800015 	stw	r2,0(r18)
 8009034:	00900034 	movhi	r2,16384
 8009038:	10bfffc4 	addi	r2,r2,-1
 800903c:	8085883a 	add	r2,r16,r2
 8009040:	1085883a 	add	r2,r2,r2
 8009044:	1085883a 	add	r2,r2,r2
 8009048:	9885883a 	add	r2,r19,r2
 800904c:	11000517 	ldw	r4,20(r2)
 8009050:	8020917a 	slli	r16,r16,5
 8009054:	800856c0 	call	800856c <__hi0bits>
 8009058:	d8c00817 	ldw	r3,32(sp)
 800905c:	8085c83a 	sub	r2,r16,r2
 8009060:	18800015 	stw	r2,0(r3)
 8009064:	9805883a 	mov	r2,r19
 8009068:	dfc00717 	ldw	ra,28(sp)
 800906c:	dd000617 	ldw	r20,24(sp)
 8009070:	dcc00517 	ldw	r19,20(sp)
 8009074:	dc800417 	ldw	r18,16(sp)
 8009078:	dc400317 	ldw	r17,12(sp)
 800907c:	dc000217 	ldw	r16,8(sp)
 8009080:	dec00804 	addi	sp,sp,32
 8009084:	f800283a 	ret
 8009088:	d809883a 	mov	r4,sp
 800908c:	80085d40 	call	80085d4 <__lo0bits>
 8009090:	d8c00017 	ldw	r3,0(sp)
 8009094:	04000044 	movi	r16,1
 8009098:	9c000415 	stw	r16,16(r19)
 800909c:	98c00515 	stw	r3,20(r19)
 80090a0:	10800804 	addi	r2,r2,32
 80090a4:	883fe126 	beq	r17,zero,800902c <__alt_data_end+0xfc00902c>
 80090a8:	00c00d44 	movi	r3,53
 80090ac:	8c7ef344 	addi	r17,r17,-1075
 80090b0:	88a3883a 	add	r17,r17,r2
 80090b4:	1885c83a 	sub	r2,r3,r2
 80090b8:	d8c00817 	ldw	r3,32(sp)
 80090bc:	94400015 	stw	r17,0(r18)
 80090c0:	18800015 	stw	r2,0(r3)
 80090c4:	003fe706 	br	8009064 <__alt_data_end+0xfc009064>
 80090c8:	01000804 	movi	r4,32
 80090cc:	2089c83a 	sub	r4,r4,r2
 80090d0:	1908983a 	sll	r4,r3,r4
 80090d4:	d9400117 	ldw	r5,4(sp)
 80090d8:	1886d83a 	srl	r3,r3,r2
 80090dc:	2148b03a 	or	r4,r4,r5
 80090e0:	99000515 	stw	r4,20(r19)
 80090e4:	d8c00015 	stw	r3,0(sp)
 80090e8:	003fca06 	br	8009014 <__alt_data_end+0xfc009014>

080090ec <__ratio>:
 80090ec:	defff904 	addi	sp,sp,-28
 80090f0:	dc400315 	stw	r17,12(sp)
 80090f4:	2823883a 	mov	r17,r5
 80090f8:	d9400104 	addi	r5,sp,4
 80090fc:	dfc00615 	stw	ra,24(sp)
 8009100:	dcc00515 	stw	r19,20(sp)
 8009104:	dc800415 	stw	r18,16(sp)
 8009108:	2027883a 	mov	r19,r4
 800910c:	dc000215 	stw	r16,8(sp)
 8009110:	8008e940 	call	8008e94 <__b2d>
 8009114:	d80b883a 	mov	r5,sp
 8009118:	8809883a 	mov	r4,r17
 800911c:	1025883a 	mov	r18,r2
 8009120:	1821883a 	mov	r16,r3
 8009124:	8008e940 	call	8008e94 <__b2d>
 8009128:	8a000417 	ldw	r8,16(r17)
 800912c:	99000417 	ldw	r4,16(r19)
 8009130:	d9400117 	ldw	r5,4(sp)
 8009134:	2209c83a 	sub	r4,r4,r8
 8009138:	2010917a 	slli	r8,r4,5
 800913c:	d9000017 	ldw	r4,0(sp)
 8009140:	2909c83a 	sub	r4,r5,r4
 8009144:	4109883a 	add	r4,r8,r4
 8009148:	01000e0e 	bge	zero,r4,8009184 <__ratio+0x98>
 800914c:	2008953a 	slli	r4,r4,20
 8009150:	2421883a 	add	r16,r4,r16
 8009154:	100d883a 	mov	r6,r2
 8009158:	180f883a 	mov	r7,r3
 800915c:	9009883a 	mov	r4,r18
 8009160:	800b883a 	mov	r5,r16
 8009164:	800d1d80 	call	800d1d8 <__divdf3>
 8009168:	dfc00617 	ldw	ra,24(sp)
 800916c:	dcc00517 	ldw	r19,20(sp)
 8009170:	dc800417 	ldw	r18,16(sp)
 8009174:	dc400317 	ldw	r17,12(sp)
 8009178:	dc000217 	ldw	r16,8(sp)
 800917c:	dec00704 	addi	sp,sp,28
 8009180:	f800283a 	ret
 8009184:	2008953a 	slli	r4,r4,20
 8009188:	1907c83a 	sub	r3,r3,r4
 800918c:	003ff106 	br	8009154 <__alt_data_end+0xfc009154>

08009190 <_mprec_log10>:
 8009190:	defffe04 	addi	sp,sp,-8
 8009194:	dc000015 	stw	r16,0(sp)
 8009198:	dfc00115 	stw	ra,4(sp)
 800919c:	008005c4 	movi	r2,23
 80091a0:	2021883a 	mov	r16,r4
 80091a4:	11000d0e 	bge	r2,r4,80091dc <_mprec_log10+0x4c>
 80091a8:	0005883a 	mov	r2,zero
 80091ac:	00cffc34 	movhi	r3,16368
 80091b0:	843fffc4 	addi	r16,r16,-1
 80091b4:	000d883a 	mov	r6,zero
 80091b8:	01d00934 	movhi	r7,16420
 80091bc:	1009883a 	mov	r4,r2
 80091c0:	180b883a 	mov	r5,r3
 80091c4:	800de000 	call	800de00 <__muldf3>
 80091c8:	803ff91e 	bne	r16,zero,80091b0 <__alt_data_end+0xfc0091b0>
 80091cc:	dfc00117 	ldw	ra,4(sp)
 80091d0:	dc000017 	ldw	r16,0(sp)
 80091d4:	dec00204 	addi	sp,sp,8
 80091d8:	f800283a 	ret
 80091dc:	202090fa 	slli	r16,r4,3
 80091e0:	00820074 	movhi	r2,2049
 80091e4:	10889304 	addi	r2,r2,8780
 80091e8:	1421883a 	add	r16,r2,r16
 80091ec:	80800017 	ldw	r2,0(r16)
 80091f0:	80c00117 	ldw	r3,4(r16)
 80091f4:	dfc00117 	ldw	ra,4(sp)
 80091f8:	dc000017 	ldw	r16,0(sp)
 80091fc:	dec00204 	addi	sp,sp,8
 8009200:	f800283a 	ret

08009204 <__copybits>:
 8009204:	297fffc4 	addi	r5,r5,-1
 8009208:	280fd17a 	srai	r7,r5,5
 800920c:	30c00417 	ldw	r3,16(r6)
 8009210:	30800504 	addi	r2,r6,20
 8009214:	39c00044 	addi	r7,r7,1
 8009218:	18c7883a 	add	r3,r3,r3
 800921c:	39cf883a 	add	r7,r7,r7
 8009220:	18c7883a 	add	r3,r3,r3
 8009224:	39cf883a 	add	r7,r7,r7
 8009228:	10c7883a 	add	r3,r2,r3
 800922c:	21cf883a 	add	r7,r4,r7
 8009230:	10c00d2e 	bgeu	r2,r3,8009268 <__copybits+0x64>
 8009234:	200b883a 	mov	r5,r4
 8009238:	12000017 	ldw	r8,0(r2)
 800923c:	29400104 	addi	r5,r5,4
 8009240:	10800104 	addi	r2,r2,4
 8009244:	2a3fff15 	stw	r8,-4(r5)
 8009248:	10fffb36 	bltu	r2,r3,8009238 <__alt_data_end+0xfc009238>
 800924c:	1985c83a 	sub	r2,r3,r6
 8009250:	10bffac4 	addi	r2,r2,-21
 8009254:	1004d0ba 	srli	r2,r2,2
 8009258:	10800044 	addi	r2,r2,1
 800925c:	1085883a 	add	r2,r2,r2
 8009260:	1085883a 	add	r2,r2,r2
 8009264:	2089883a 	add	r4,r4,r2
 8009268:	21c0032e 	bgeu	r4,r7,8009278 <__copybits+0x74>
 800926c:	20000015 	stw	zero,0(r4)
 8009270:	21000104 	addi	r4,r4,4
 8009274:	21fffd36 	bltu	r4,r7,800926c <__alt_data_end+0xfc00926c>
 8009278:	f800283a 	ret

0800927c <__any_on>:
 800927c:	20c00417 	ldw	r3,16(r4)
 8009280:	2805d17a 	srai	r2,r5,5
 8009284:	21000504 	addi	r4,r4,20
 8009288:	18800d0e 	bge	r3,r2,80092c0 <__any_on+0x44>
 800928c:	18c7883a 	add	r3,r3,r3
 8009290:	18c7883a 	add	r3,r3,r3
 8009294:	20c7883a 	add	r3,r4,r3
 8009298:	20c0192e 	bgeu	r4,r3,8009300 <__any_on+0x84>
 800929c:	18bfff17 	ldw	r2,-4(r3)
 80092a0:	18ffff04 	addi	r3,r3,-4
 80092a4:	1000041e 	bne	r2,zero,80092b8 <__any_on+0x3c>
 80092a8:	20c0142e 	bgeu	r4,r3,80092fc <__any_on+0x80>
 80092ac:	18ffff04 	addi	r3,r3,-4
 80092b0:	19400017 	ldw	r5,0(r3)
 80092b4:	283ffc26 	beq	r5,zero,80092a8 <__alt_data_end+0xfc0092a8>
 80092b8:	00800044 	movi	r2,1
 80092bc:	f800283a 	ret
 80092c0:	10c00a0e 	bge	r2,r3,80092ec <__any_on+0x70>
 80092c4:	1085883a 	add	r2,r2,r2
 80092c8:	1085883a 	add	r2,r2,r2
 80092cc:	294007cc 	andi	r5,r5,31
 80092d0:	2087883a 	add	r3,r4,r2
 80092d4:	283ff026 	beq	r5,zero,8009298 <__alt_data_end+0xfc009298>
 80092d8:	19800017 	ldw	r6,0(r3)
 80092dc:	3144d83a 	srl	r2,r6,r5
 80092e0:	114a983a 	sll	r5,r2,r5
 80092e4:	317ff41e 	bne	r6,r5,80092b8 <__alt_data_end+0xfc0092b8>
 80092e8:	003feb06 	br	8009298 <__alt_data_end+0xfc009298>
 80092ec:	1085883a 	add	r2,r2,r2
 80092f0:	1085883a 	add	r2,r2,r2
 80092f4:	2087883a 	add	r3,r4,r2
 80092f8:	003fe706 	br	8009298 <__alt_data_end+0xfc009298>
 80092fc:	f800283a 	ret
 8009300:	0005883a 	mov	r2,zero
 8009304:	f800283a 	ret

08009308 <_realloc_r>:
 8009308:	defff604 	addi	sp,sp,-40
 800930c:	dc800215 	stw	r18,8(sp)
 8009310:	dfc00915 	stw	ra,36(sp)
 8009314:	df000815 	stw	fp,32(sp)
 8009318:	ddc00715 	stw	r23,28(sp)
 800931c:	dd800615 	stw	r22,24(sp)
 8009320:	dd400515 	stw	r21,20(sp)
 8009324:	dd000415 	stw	r20,16(sp)
 8009328:	dcc00315 	stw	r19,12(sp)
 800932c:	dc400115 	stw	r17,4(sp)
 8009330:	dc000015 	stw	r16,0(sp)
 8009334:	3025883a 	mov	r18,r6
 8009338:	2800b726 	beq	r5,zero,8009618 <_realloc_r+0x310>
 800933c:	282b883a 	mov	r21,r5
 8009340:	2029883a 	mov	r20,r4
 8009344:	800f76c0 	call	800f76c <__malloc_lock>
 8009348:	a8bfff17 	ldw	r2,-4(r21)
 800934c:	043fff04 	movi	r16,-4
 8009350:	90c002c4 	addi	r3,r18,11
 8009354:	01000584 	movi	r4,22
 8009358:	acfffe04 	addi	r19,r21,-8
 800935c:	1420703a 	and	r16,r2,r16
 8009360:	20c0332e 	bgeu	r4,r3,8009430 <_realloc_r+0x128>
 8009364:	047ffe04 	movi	r17,-8
 8009368:	1c62703a 	and	r17,r3,r17
 800936c:	8807883a 	mov	r3,r17
 8009370:	88005816 	blt	r17,zero,80094d4 <_realloc_r+0x1cc>
 8009374:	8c805736 	bltu	r17,r18,80094d4 <_realloc_r+0x1cc>
 8009378:	80c0300e 	bge	r16,r3,800943c <_realloc_r+0x134>
 800937c:	07020074 	movhi	fp,2049
 8009380:	e70a4104 	addi	fp,fp,10500
 8009384:	e1c00217 	ldw	r7,8(fp)
 8009388:	9c09883a 	add	r4,r19,r16
 800938c:	22000117 	ldw	r8,4(r4)
 8009390:	21c06326 	beq	r4,r7,8009520 <_realloc_r+0x218>
 8009394:	017fff84 	movi	r5,-2
 8009398:	414a703a 	and	r5,r8,r5
 800939c:	214b883a 	add	r5,r4,r5
 80093a0:	29800117 	ldw	r6,4(r5)
 80093a4:	3180004c 	andi	r6,r6,1
 80093a8:	30003f26 	beq	r6,zero,80094a8 <_realloc_r+0x1a0>
 80093ac:	1080004c 	andi	r2,r2,1
 80093b0:	10008326 	beq	r2,zero,80095c0 <_realloc_r+0x2b8>
 80093b4:	900b883a 	mov	r5,r18
 80093b8:	a009883a 	mov	r4,r20
 80093bc:	80075940 	call	8007594 <_malloc_r>
 80093c0:	1025883a 	mov	r18,r2
 80093c4:	10011e26 	beq	r2,zero,8009840 <_realloc_r+0x538>
 80093c8:	a93fff17 	ldw	r4,-4(r21)
 80093cc:	10fffe04 	addi	r3,r2,-8
 80093d0:	00bfff84 	movi	r2,-2
 80093d4:	2084703a 	and	r2,r4,r2
 80093d8:	9885883a 	add	r2,r19,r2
 80093dc:	1880ee26 	beq	r3,r2,8009798 <_realloc_r+0x490>
 80093e0:	81bfff04 	addi	r6,r16,-4
 80093e4:	00800904 	movi	r2,36
 80093e8:	1180b836 	bltu	r2,r6,80096cc <_realloc_r+0x3c4>
 80093ec:	00c004c4 	movi	r3,19
 80093f0:	19809636 	bltu	r3,r6,800964c <_realloc_r+0x344>
 80093f4:	9005883a 	mov	r2,r18
 80093f8:	a807883a 	mov	r3,r21
 80093fc:	19000017 	ldw	r4,0(r3)
 8009400:	11000015 	stw	r4,0(r2)
 8009404:	19000117 	ldw	r4,4(r3)
 8009408:	11000115 	stw	r4,4(r2)
 800940c:	18c00217 	ldw	r3,8(r3)
 8009410:	10c00215 	stw	r3,8(r2)
 8009414:	a80b883a 	mov	r5,r21
 8009418:	a009883a 	mov	r4,r20
 800941c:	800699c0 	call	800699c <_free_r>
 8009420:	a009883a 	mov	r4,r20
 8009424:	800f7900 	call	800f790 <__malloc_unlock>
 8009428:	9005883a 	mov	r2,r18
 800942c:	00001206 	br	8009478 <_realloc_r+0x170>
 8009430:	00c00404 	movi	r3,16
 8009434:	1823883a 	mov	r17,r3
 8009438:	003fce06 	br	8009374 <__alt_data_end+0xfc009374>
 800943c:	a825883a 	mov	r18,r21
 8009440:	8445c83a 	sub	r2,r16,r17
 8009444:	00c003c4 	movi	r3,15
 8009448:	18802636 	bltu	r3,r2,80094e4 <_realloc_r+0x1dc>
 800944c:	99800117 	ldw	r6,4(r19)
 8009450:	9c07883a 	add	r3,r19,r16
 8009454:	3180004c 	andi	r6,r6,1
 8009458:	3420b03a 	or	r16,r6,r16
 800945c:	9c000115 	stw	r16,4(r19)
 8009460:	18800117 	ldw	r2,4(r3)
 8009464:	10800054 	ori	r2,r2,1
 8009468:	18800115 	stw	r2,4(r3)
 800946c:	a009883a 	mov	r4,r20
 8009470:	800f7900 	call	800f790 <__malloc_unlock>
 8009474:	9005883a 	mov	r2,r18
 8009478:	dfc00917 	ldw	ra,36(sp)
 800947c:	df000817 	ldw	fp,32(sp)
 8009480:	ddc00717 	ldw	r23,28(sp)
 8009484:	dd800617 	ldw	r22,24(sp)
 8009488:	dd400517 	ldw	r21,20(sp)
 800948c:	dd000417 	ldw	r20,16(sp)
 8009490:	dcc00317 	ldw	r19,12(sp)
 8009494:	dc800217 	ldw	r18,8(sp)
 8009498:	dc400117 	ldw	r17,4(sp)
 800949c:	dc000017 	ldw	r16,0(sp)
 80094a0:	dec00a04 	addi	sp,sp,40
 80094a4:	f800283a 	ret
 80094a8:	017fff04 	movi	r5,-4
 80094ac:	414a703a 	and	r5,r8,r5
 80094b0:	814d883a 	add	r6,r16,r5
 80094b4:	30c01f16 	blt	r6,r3,8009534 <_realloc_r+0x22c>
 80094b8:	20800317 	ldw	r2,12(r4)
 80094bc:	20c00217 	ldw	r3,8(r4)
 80094c0:	a825883a 	mov	r18,r21
 80094c4:	3021883a 	mov	r16,r6
 80094c8:	18800315 	stw	r2,12(r3)
 80094cc:	10c00215 	stw	r3,8(r2)
 80094d0:	003fdb06 	br	8009440 <__alt_data_end+0xfc009440>
 80094d4:	00800304 	movi	r2,12
 80094d8:	a0800015 	stw	r2,0(r20)
 80094dc:	0005883a 	mov	r2,zero
 80094e0:	003fe506 	br	8009478 <__alt_data_end+0xfc009478>
 80094e4:	98c00117 	ldw	r3,4(r19)
 80094e8:	9c4b883a 	add	r5,r19,r17
 80094ec:	11000054 	ori	r4,r2,1
 80094f0:	18c0004c 	andi	r3,r3,1
 80094f4:	1c62b03a 	or	r17,r3,r17
 80094f8:	9c400115 	stw	r17,4(r19)
 80094fc:	29000115 	stw	r4,4(r5)
 8009500:	2885883a 	add	r2,r5,r2
 8009504:	10c00117 	ldw	r3,4(r2)
 8009508:	29400204 	addi	r5,r5,8
 800950c:	a009883a 	mov	r4,r20
 8009510:	18c00054 	ori	r3,r3,1
 8009514:	10c00115 	stw	r3,4(r2)
 8009518:	800699c0 	call	800699c <_free_r>
 800951c:	003fd306 	br	800946c <__alt_data_end+0xfc00946c>
 8009520:	017fff04 	movi	r5,-4
 8009524:	414a703a 	and	r5,r8,r5
 8009528:	89800404 	addi	r6,r17,16
 800952c:	8151883a 	add	r8,r16,r5
 8009530:	4180590e 	bge	r8,r6,8009698 <_realloc_r+0x390>
 8009534:	1080004c 	andi	r2,r2,1
 8009538:	103f9e1e 	bne	r2,zero,80093b4 <__alt_data_end+0xfc0093b4>
 800953c:	adbffe17 	ldw	r22,-8(r21)
 8009540:	00bfff04 	movi	r2,-4
 8009544:	9dadc83a 	sub	r22,r19,r22
 8009548:	b1800117 	ldw	r6,4(r22)
 800954c:	3084703a 	and	r2,r6,r2
 8009550:	20002026 	beq	r4,zero,80095d4 <_realloc_r+0x2cc>
 8009554:	80af883a 	add	r23,r16,r2
 8009558:	b96f883a 	add	r23,r23,r5
 800955c:	21c05f26 	beq	r4,r7,80096dc <_realloc_r+0x3d4>
 8009560:	b8c01c16 	blt	r23,r3,80095d4 <_realloc_r+0x2cc>
 8009564:	20800317 	ldw	r2,12(r4)
 8009568:	20c00217 	ldw	r3,8(r4)
 800956c:	81bfff04 	addi	r6,r16,-4
 8009570:	01000904 	movi	r4,36
 8009574:	18800315 	stw	r2,12(r3)
 8009578:	10c00215 	stw	r3,8(r2)
 800957c:	b0c00217 	ldw	r3,8(r22)
 8009580:	b0800317 	ldw	r2,12(r22)
 8009584:	b4800204 	addi	r18,r22,8
 8009588:	18800315 	stw	r2,12(r3)
 800958c:	10c00215 	stw	r3,8(r2)
 8009590:	21801b36 	bltu	r4,r6,8009600 <_realloc_r+0x2f8>
 8009594:	008004c4 	movi	r2,19
 8009598:	1180352e 	bgeu	r2,r6,8009670 <_realloc_r+0x368>
 800959c:	a8800017 	ldw	r2,0(r21)
 80095a0:	b0800215 	stw	r2,8(r22)
 80095a4:	a8800117 	ldw	r2,4(r21)
 80095a8:	b0800315 	stw	r2,12(r22)
 80095ac:	008006c4 	movi	r2,27
 80095b0:	11807f36 	bltu	r2,r6,80097b0 <_realloc_r+0x4a8>
 80095b4:	b0800404 	addi	r2,r22,16
 80095b8:	ad400204 	addi	r21,r21,8
 80095bc:	00002d06 	br	8009674 <_realloc_r+0x36c>
 80095c0:	adbffe17 	ldw	r22,-8(r21)
 80095c4:	00bfff04 	movi	r2,-4
 80095c8:	9dadc83a 	sub	r22,r19,r22
 80095cc:	b1000117 	ldw	r4,4(r22)
 80095d0:	2084703a 	and	r2,r4,r2
 80095d4:	b03f7726 	beq	r22,zero,80093b4 <__alt_data_end+0xfc0093b4>
 80095d8:	80af883a 	add	r23,r16,r2
 80095dc:	b8ff7516 	blt	r23,r3,80093b4 <__alt_data_end+0xfc0093b4>
 80095e0:	b0800317 	ldw	r2,12(r22)
 80095e4:	b0c00217 	ldw	r3,8(r22)
 80095e8:	81bfff04 	addi	r6,r16,-4
 80095ec:	01000904 	movi	r4,36
 80095f0:	18800315 	stw	r2,12(r3)
 80095f4:	10c00215 	stw	r3,8(r2)
 80095f8:	b4800204 	addi	r18,r22,8
 80095fc:	21bfe52e 	bgeu	r4,r6,8009594 <__alt_data_end+0xfc009594>
 8009600:	a80b883a 	mov	r5,r21
 8009604:	9009883a 	mov	r4,r18
 8009608:	8007fcc0 	call	8007fcc <memmove>
 800960c:	b821883a 	mov	r16,r23
 8009610:	b027883a 	mov	r19,r22
 8009614:	003f8a06 	br	8009440 <__alt_data_end+0xfc009440>
 8009618:	300b883a 	mov	r5,r6
 800961c:	dfc00917 	ldw	ra,36(sp)
 8009620:	df000817 	ldw	fp,32(sp)
 8009624:	ddc00717 	ldw	r23,28(sp)
 8009628:	dd800617 	ldw	r22,24(sp)
 800962c:	dd400517 	ldw	r21,20(sp)
 8009630:	dd000417 	ldw	r20,16(sp)
 8009634:	dcc00317 	ldw	r19,12(sp)
 8009638:	dc800217 	ldw	r18,8(sp)
 800963c:	dc400117 	ldw	r17,4(sp)
 8009640:	dc000017 	ldw	r16,0(sp)
 8009644:	dec00a04 	addi	sp,sp,40
 8009648:	80075941 	jmpi	8007594 <_malloc_r>
 800964c:	a8c00017 	ldw	r3,0(r21)
 8009650:	90c00015 	stw	r3,0(r18)
 8009654:	a8c00117 	ldw	r3,4(r21)
 8009658:	90c00115 	stw	r3,4(r18)
 800965c:	00c006c4 	movi	r3,27
 8009660:	19804536 	bltu	r3,r6,8009778 <_realloc_r+0x470>
 8009664:	90800204 	addi	r2,r18,8
 8009668:	a8c00204 	addi	r3,r21,8
 800966c:	003f6306 	br	80093fc <__alt_data_end+0xfc0093fc>
 8009670:	9005883a 	mov	r2,r18
 8009674:	a8c00017 	ldw	r3,0(r21)
 8009678:	b821883a 	mov	r16,r23
 800967c:	b027883a 	mov	r19,r22
 8009680:	10c00015 	stw	r3,0(r2)
 8009684:	a8c00117 	ldw	r3,4(r21)
 8009688:	10c00115 	stw	r3,4(r2)
 800968c:	a8c00217 	ldw	r3,8(r21)
 8009690:	10c00215 	stw	r3,8(r2)
 8009694:	003f6a06 	br	8009440 <__alt_data_end+0xfc009440>
 8009698:	9c67883a 	add	r19,r19,r17
 800969c:	4445c83a 	sub	r2,r8,r17
 80096a0:	e4c00215 	stw	r19,8(fp)
 80096a4:	10800054 	ori	r2,r2,1
 80096a8:	98800115 	stw	r2,4(r19)
 80096ac:	a8bfff17 	ldw	r2,-4(r21)
 80096b0:	a009883a 	mov	r4,r20
 80096b4:	1080004c 	andi	r2,r2,1
 80096b8:	1462b03a 	or	r17,r2,r17
 80096bc:	ac7fff15 	stw	r17,-4(r21)
 80096c0:	800f7900 	call	800f790 <__malloc_unlock>
 80096c4:	a805883a 	mov	r2,r21
 80096c8:	003f6b06 	br	8009478 <__alt_data_end+0xfc009478>
 80096cc:	a80b883a 	mov	r5,r21
 80096d0:	9009883a 	mov	r4,r18
 80096d4:	8007fcc0 	call	8007fcc <memmove>
 80096d8:	003f4e06 	br	8009414 <__alt_data_end+0xfc009414>
 80096dc:	89000404 	addi	r4,r17,16
 80096e0:	b93fbc16 	blt	r23,r4,80095d4 <__alt_data_end+0xfc0095d4>
 80096e4:	b0800317 	ldw	r2,12(r22)
 80096e8:	b0c00217 	ldw	r3,8(r22)
 80096ec:	81bfff04 	addi	r6,r16,-4
 80096f0:	01000904 	movi	r4,36
 80096f4:	18800315 	stw	r2,12(r3)
 80096f8:	10c00215 	stw	r3,8(r2)
 80096fc:	b4800204 	addi	r18,r22,8
 8009700:	21804336 	bltu	r4,r6,8009810 <_realloc_r+0x508>
 8009704:	008004c4 	movi	r2,19
 8009708:	11803f2e 	bgeu	r2,r6,8009808 <_realloc_r+0x500>
 800970c:	a8800017 	ldw	r2,0(r21)
 8009710:	b0800215 	stw	r2,8(r22)
 8009714:	a8800117 	ldw	r2,4(r21)
 8009718:	b0800315 	stw	r2,12(r22)
 800971c:	008006c4 	movi	r2,27
 8009720:	11803f36 	bltu	r2,r6,8009820 <_realloc_r+0x518>
 8009724:	b0800404 	addi	r2,r22,16
 8009728:	ad400204 	addi	r21,r21,8
 800972c:	a8c00017 	ldw	r3,0(r21)
 8009730:	10c00015 	stw	r3,0(r2)
 8009734:	a8c00117 	ldw	r3,4(r21)
 8009738:	10c00115 	stw	r3,4(r2)
 800973c:	a8c00217 	ldw	r3,8(r21)
 8009740:	10c00215 	stw	r3,8(r2)
 8009744:	b447883a 	add	r3,r22,r17
 8009748:	bc45c83a 	sub	r2,r23,r17
 800974c:	e0c00215 	stw	r3,8(fp)
 8009750:	10800054 	ori	r2,r2,1
 8009754:	18800115 	stw	r2,4(r3)
 8009758:	b0800117 	ldw	r2,4(r22)
 800975c:	a009883a 	mov	r4,r20
 8009760:	1080004c 	andi	r2,r2,1
 8009764:	1462b03a 	or	r17,r2,r17
 8009768:	b4400115 	stw	r17,4(r22)
 800976c:	800f7900 	call	800f790 <__malloc_unlock>
 8009770:	9005883a 	mov	r2,r18
 8009774:	003f4006 	br	8009478 <__alt_data_end+0xfc009478>
 8009778:	a8c00217 	ldw	r3,8(r21)
 800977c:	90c00215 	stw	r3,8(r18)
 8009780:	a8c00317 	ldw	r3,12(r21)
 8009784:	90c00315 	stw	r3,12(r18)
 8009788:	30801126 	beq	r6,r2,80097d0 <_realloc_r+0x4c8>
 800978c:	90800404 	addi	r2,r18,16
 8009790:	a8c00404 	addi	r3,r21,16
 8009794:	003f1906 	br	80093fc <__alt_data_end+0xfc0093fc>
 8009798:	90ffff17 	ldw	r3,-4(r18)
 800979c:	00bfff04 	movi	r2,-4
 80097a0:	a825883a 	mov	r18,r21
 80097a4:	1884703a 	and	r2,r3,r2
 80097a8:	80a1883a 	add	r16,r16,r2
 80097ac:	003f2406 	br	8009440 <__alt_data_end+0xfc009440>
 80097b0:	a8800217 	ldw	r2,8(r21)
 80097b4:	b0800415 	stw	r2,16(r22)
 80097b8:	a8800317 	ldw	r2,12(r21)
 80097bc:	b0800515 	stw	r2,20(r22)
 80097c0:	31000a26 	beq	r6,r4,80097ec <_realloc_r+0x4e4>
 80097c4:	b0800604 	addi	r2,r22,24
 80097c8:	ad400404 	addi	r21,r21,16
 80097cc:	003fa906 	br	8009674 <__alt_data_end+0xfc009674>
 80097d0:	a9000417 	ldw	r4,16(r21)
 80097d4:	90800604 	addi	r2,r18,24
 80097d8:	a8c00604 	addi	r3,r21,24
 80097dc:	91000415 	stw	r4,16(r18)
 80097e0:	a9000517 	ldw	r4,20(r21)
 80097e4:	91000515 	stw	r4,20(r18)
 80097e8:	003f0406 	br	80093fc <__alt_data_end+0xfc0093fc>
 80097ec:	a8c00417 	ldw	r3,16(r21)
 80097f0:	ad400604 	addi	r21,r21,24
 80097f4:	b0800804 	addi	r2,r22,32
 80097f8:	b0c00615 	stw	r3,24(r22)
 80097fc:	a8ffff17 	ldw	r3,-4(r21)
 8009800:	b0c00715 	stw	r3,28(r22)
 8009804:	003f9b06 	br	8009674 <__alt_data_end+0xfc009674>
 8009808:	9005883a 	mov	r2,r18
 800980c:	003fc706 	br	800972c <__alt_data_end+0xfc00972c>
 8009810:	a80b883a 	mov	r5,r21
 8009814:	9009883a 	mov	r4,r18
 8009818:	8007fcc0 	call	8007fcc <memmove>
 800981c:	003fc906 	br	8009744 <__alt_data_end+0xfc009744>
 8009820:	a8800217 	ldw	r2,8(r21)
 8009824:	b0800415 	stw	r2,16(r22)
 8009828:	a8800317 	ldw	r2,12(r21)
 800982c:	b0800515 	stw	r2,20(r22)
 8009830:	31000726 	beq	r6,r4,8009850 <_realloc_r+0x548>
 8009834:	b0800604 	addi	r2,r22,24
 8009838:	ad400404 	addi	r21,r21,16
 800983c:	003fbb06 	br	800972c <__alt_data_end+0xfc00972c>
 8009840:	a009883a 	mov	r4,r20
 8009844:	800f7900 	call	800f790 <__malloc_unlock>
 8009848:	0005883a 	mov	r2,zero
 800984c:	003f0a06 	br	8009478 <__alt_data_end+0xfc009478>
 8009850:	a8c00417 	ldw	r3,16(r21)
 8009854:	ad400604 	addi	r21,r21,24
 8009858:	b0800804 	addi	r2,r22,32
 800985c:	b0c00615 	stw	r3,24(r22)
 8009860:	a8ffff17 	ldw	r3,-4(r21)
 8009864:	b0c00715 	stw	r3,28(r22)
 8009868:	003fb006 	br	800972c <__alt_data_end+0xfc00972c>

0800986c <__fpclassifyd>:
 800986c:	00a00034 	movhi	r2,32768
 8009870:	10bfffc4 	addi	r2,r2,-1
 8009874:	2884703a 	and	r2,r5,r2
 8009878:	10000726 	beq	r2,zero,8009898 <__fpclassifyd+0x2c>
 800987c:	00fffc34 	movhi	r3,65520
 8009880:	019ff834 	movhi	r6,32736
 8009884:	28c7883a 	add	r3,r5,r3
 8009888:	31bfffc4 	addi	r6,r6,-1
 800988c:	30c00536 	bltu	r6,r3,80098a4 <__fpclassifyd+0x38>
 8009890:	00800104 	movi	r2,4
 8009894:	f800283a 	ret
 8009898:	2000021e 	bne	r4,zero,80098a4 <__fpclassifyd+0x38>
 800989c:	00800084 	movi	r2,2
 80098a0:	f800283a 	ret
 80098a4:	00dffc34 	movhi	r3,32752
 80098a8:	019ff834 	movhi	r6,32736
 80098ac:	28cb883a 	add	r5,r5,r3
 80098b0:	31bfffc4 	addi	r6,r6,-1
 80098b4:	317ff62e 	bgeu	r6,r5,8009890 <__alt_data_end+0xfc009890>
 80098b8:	01400434 	movhi	r5,16
 80098bc:	297fffc4 	addi	r5,r5,-1
 80098c0:	28800236 	bltu	r5,r2,80098cc <__fpclassifyd+0x60>
 80098c4:	008000c4 	movi	r2,3
 80098c8:	f800283a 	ret
 80098cc:	10c00226 	beq	r2,r3,80098d8 <__fpclassifyd+0x6c>
 80098d0:	0005883a 	mov	r2,zero
 80098d4:	f800283a 	ret
 80098d8:	2005003a 	cmpeq	r2,r4,zero
 80098dc:	f800283a 	ret

080098e0 <_sbrk_r>:
 80098e0:	defffd04 	addi	sp,sp,-12
 80098e4:	dc000015 	stw	r16,0(sp)
 80098e8:	04020074 	movhi	r16,2049
 80098ec:	dc400115 	stw	r17,4(sp)
 80098f0:	84169704 	addi	r16,r16,23132
 80098f4:	2023883a 	mov	r17,r4
 80098f8:	2809883a 	mov	r4,r5
 80098fc:	dfc00215 	stw	ra,8(sp)
 8009900:	80000015 	stw	zero,0(r16)
 8009904:	800f9780 	call	800f978 <sbrk>
 8009908:	00ffffc4 	movi	r3,-1
 800990c:	10c00526 	beq	r2,r3,8009924 <_sbrk_r+0x44>
 8009910:	dfc00217 	ldw	ra,8(sp)
 8009914:	dc400117 	ldw	r17,4(sp)
 8009918:	dc000017 	ldw	r16,0(sp)
 800991c:	dec00304 	addi	sp,sp,12
 8009920:	f800283a 	ret
 8009924:	80c00017 	ldw	r3,0(r16)
 8009928:	183ff926 	beq	r3,zero,8009910 <__alt_data_end+0xfc009910>
 800992c:	88c00015 	stw	r3,0(r17)
 8009930:	003ff706 	br	8009910 <__alt_data_end+0xfc009910>

08009934 <__sread>:
 8009934:	defffe04 	addi	sp,sp,-8
 8009938:	dc000015 	stw	r16,0(sp)
 800993c:	2821883a 	mov	r16,r5
 8009940:	2940038f 	ldh	r5,14(r5)
 8009944:	dfc00115 	stw	ra,4(sp)
 8009948:	800b7f00 	call	800b7f0 <_read_r>
 800994c:	10000716 	blt	r2,zero,800996c <__sread+0x38>
 8009950:	80c01417 	ldw	r3,80(r16)
 8009954:	1887883a 	add	r3,r3,r2
 8009958:	80c01415 	stw	r3,80(r16)
 800995c:	dfc00117 	ldw	ra,4(sp)
 8009960:	dc000017 	ldw	r16,0(sp)
 8009964:	dec00204 	addi	sp,sp,8
 8009968:	f800283a 	ret
 800996c:	80c0030b 	ldhu	r3,12(r16)
 8009970:	18fbffcc 	andi	r3,r3,61439
 8009974:	80c0030d 	sth	r3,12(r16)
 8009978:	dfc00117 	ldw	ra,4(sp)
 800997c:	dc000017 	ldw	r16,0(sp)
 8009980:	dec00204 	addi	sp,sp,8
 8009984:	f800283a 	ret

08009988 <__seofread>:
 8009988:	0005883a 	mov	r2,zero
 800998c:	f800283a 	ret

08009990 <__swrite>:
 8009990:	2880030b 	ldhu	r2,12(r5)
 8009994:	defffb04 	addi	sp,sp,-20
 8009998:	dcc00315 	stw	r19,12(sp)
 800999c:	dc800215 	stw	r18,8(sp)
 80099a0:	dc400115 	stw	r17,4(sp)
 80099a4:	dc000015 	stw	r16,0(sp)
 80099a8:	dfc00415 	stw	ra,16(sp)
 80099ac:	10c0400c 	andi	r3,r2,256
 80099b0:	2821883a 	mov	r16,r5
 80099b4:	2023883a 	mov	r17,r4
 80099b8:	3025883a 	mov	r18,r6
 80099bc:	3827883a 	mov	r19,r7
 80099c0:	18000526 	beq	r3,zero,80099d8 <__swrite+0x48>
 80099c4:	2940038f 	ldh	r5,14(r5)
 80099c8:	01c00084 	movi	r7,2
 80099cc:	000d883a 	mov	r6,zero
 80099d0:	800b7900 	call	800b790 <_lseek_r>
 80099d4:	8080030b 	ldhu	r2,12(r16)
 80099d8:	8140038f 	ldh	r5,14(r16)
 80099dc:	10bbffcc 	andi	r2,r2,61439
 80099e0:	980f883a 	mov	r7,r19
 80099e4:	900d883a 	mov	r6,r18
 80099e8:	8809883a 	mov	r4,r17
 80099ec:	8080030d 	sth	r2,12(r16)
 80099f0:	dfc00417 	ldw	ra,16(sp)
 80099f4:	dcc00317 	ldw	r19,12(sp)
 80099f8:	dc800217 	ldw	r18,8(sp)
 80099fc:	dc400117 	ldw	r17,4(sp)
 8009a00:	dc000017 	ldw	r16,0(sp)
 8009a04:	dec00504 	addi	sp,sp,20
 8009a08:	800b2441 	jmpi	800b244 <_write_r>

08009a0c <__sseek>:
 8009a0c:	defffe04 	addi	sp,sp,-8
 8009a10:	dc000015 	stw	r16,0(sp)
 8009a14:	2821883a 	mov	r16,r5
 8009a18:	2940038f 	ldh	r5,14(r5)
 8009a1c:	dfc00115 	stw	ra,4(sp)
 8009a20:	800b7900 	call	800b790 <_lseek_r>
 8009a24:	00ffffc4 	movi	r3,-1
 8009a28:	10c00826 	beq	r2,r3,8009a4c <__sseek+0x40>
 8009a2c:	80c0030b 	ldhu	r3,12(r16)
 8009a30:	80801415 	stw	r2,80(r16)
 8009a34:	18c40014 	ori	r3,r3,4096
 8009a38:	80c0030d 	sth	r3,12(r16)
 8009a3c:	dfc00117 	ldw	ra,4(sp)
 8009a40:	dc000017 	ldw	r16,0(sp)
 8009a44:	dec00204 	addi	sp,sp,8
 8009a48:	f800283a 	ret
 8009a4c:	80c0030b 	ldhu	r3,12(r16)
 8009a50:	18fbffcc 	andi	r3,r3,61439
 8009a54:	80c0030d 	sth	r3,12(r16)
 8009a58:	dfc00117 	ldw	ra,4(sp)
 8009a5c:	dc000017 	ldw	r16,0(sp)
 8009a60:	dec00204 	addi	sp,sp,8
 8009a64:	f800283a 	ret

08009a68 <__sclose>:
 8009a68:	2940038f 	ldh	r5,14(r5)
 8009a6c:	800b2a41 	jmpi	800b2a4 <_close_r>

08009a70 <strcmp>:
 8009a70:	2144b03a 	or	r2,r4,r5
 8009a74:	108000cc 	andi	r2,r2,3
 8009a78:	1000171e 	bne	r2,zero,8009ad8 <strcmp+0x68>
 8009a7c:	20800017 	ldw	r2,0(r4)
 8009a80:	28c00017 	ldw	r3,0(r5)
 8009a84:	10c0141e 	bne	r2,r3,8009ad8 <strcmp+0x68>
 8009a88:	027fbff4 	movhi	r9,65279
 8009a8c:	4a7fbfc4 	addi	r9,r9,-257
 8009a90:	0086303a 	nor	r3,zero,r2
 8009a94:	02202074 	movhi	r8,32897
 8009a98:	1245883a 	add	r2,r2,r9
 8009a9c:	42202004 	addi	r8,r8,-32640
 8009aa0:	10c4703a 	and	r2,r2,r3
 8009aa4:	1204703a 	and	r2,r2,r8
 8009aa8:	10000226 	beq	r2,zero,8009ab4 <strcmp+0x44>
 8009aac:	00002306 	br	8009b3c <strcmp+0xcc>
 8009ab0:	1000221e 	bne	r2,zero,8009b3c <strcmp+0xcc>
 8009ab4:	21000104 	addi	r4,r4,4
 8009ab8:	20c00017 	ldw	r3,0(r4)
 8009abc:	29400104 	addi	r5,r5,4
 8009ac0:	29800017 	ldw	r6,0(r5)
 8009ac4:	1a4f883a 	add	r7,r3,r9
 8009ac8:	00c4303a 	nor	r2,zero,r3
 8009acc:	3884703a 	and	r2,r7,r2
 8009ad0:	1204703a 	and	r2,r2,r8
 8009ad4:	19bff626 	beq	r3,r6,8009ab0 <__alt_data_end+0xfc009ab0>
 8009ad8:	20800003 	ldbu	r2,0(r4)
 8009adc:	10c03fcc 	andi	r3,r2,255
 8009ae0:	18c0201c 	xori	r3,r3,128
 8009ae4:	18ffe004 	addi	r3,r3,-128
 8009ae8:	18000c26 	beq	r3,zero,8009b1c <strcmp+0xac>
 8009aec:	29800007 	ldb	r6,0(r5)
 8009af0:	19800326 	beq	r3,r6,8009b00 <strcmp+0x90>
 8009af4:	00001306 	br	8009b44 <strcmp+0xd4>
 8009af8:	29800007 	ldb	r6,0(r5)
 8009afc:	11800b1e 	bne	r2,r6,8009b2c <strcmp+0xbc>
 8009b00:	21000044 	addi	r4,r4,1
 8009b04:	20c00003 	ldbu	r3,0(r4)
 8009b08:	29400044 	addi	r5,r5,1
 8009b0c:	18803fcc 	andi	r2,r3,255
 8009b10:	1080201c 	xori	r2,r2,128
 8009b14:	10bfe004 	addi	r2,r2,-128
 8009b18:	103ff71e 	bne	r2,zero,8009af8 <__alt_data_end+0xfc009af8>
 8009b1c:	0007883a 	mov	r3,zero
 8009b20:	28800003 	ldbu	r2,0(r5)
 8009b24:	1885c83a 	sub	r2,r3,r2
 8009b28:	f800283a 	ret
 8009b2c:	28800003 	ldbu	r2,0(r5)
 8009b30:	18c03fcc 	andi	r3,r3,255
 8009b34:	1885c83a 	sub	r2,r3,r2
 8009b38:	f800283a 	ret
 8009b3c:	0005883a 	mov	r2,zero
 8009b40:	f800283a 	ret
 8009b44:	10c03fcc 	andi	r3,r2,255
 8009b48:	003ff506 	br	8009b20 <__alt_data_end+0xfc009b20>

08009b4c <__sprint_r.part.0>:
 8009b4c:	28801917 	ldw	r2,100(r5)
 8009b50:	defff604 	addi	sp,sp,-40
 8009b54:	dd400515 	stw	r21,20(sp)
 8009b58:	dfc00915 	stw	ra,36(sp)
 8009b5c:	df000815 	stw	fp,32(sp)
 8009b60:	ddc00715 	stw	r23,28(sp)
 8009b64:	dd800615 	stw	r22,24(sp)
 8009b68:	dd000415 	stw	r20,16(sp)
 8009b6c:	dcc00315 	stw	r19,12(sp)
 8009b70:	dc800215 	stw	r18,8(sp)
 8009b74:	dc400115 	stw	r17,4(sp)
 8009b78:	dc000015 	stw	r16,0(sp)
 8009b7c:	1088000c 	andi	r2,r2,8192
 8009b80:	302b883a 	mov	r21,r6
 8009b84:	10002e26 	beq	r2,zero,8009c40 <__sprint_r.part.0+0xf4>
 8009b88:	30800217 	ldw	r2,8(r6)
 8009b8c:	35800017 	ldw	r22,0(r6)
 8009b90:	10002926 	beq	r2,zero,8009c38 <__sprint_r.part.0+0xec>
 8009b94:	2827883a 	mov	r19,r5
 8009b98:	2029883a 	mov	r20,r4
 8009b9c:	b5c00104 	addi	r23,r22,4
 8009ba0:	04bfffc4 	movi	r18,-1
 8009ba4:	bc400017 	ldw	r17,0(r23)
 8009ba8:	b4000017 	ldw	r16,0(r22)
 8009bac:	0039883a 	mov	fp,zero
 8009bb0:	8822d0ba 	srli	r17,r17,2
 8009bb4:	8800031e 	bne	r17,zero,8009bc4 <__sprint_r.part.0+0x78>
 8009bb8:	00001806 	br	8009c1c <__sprint_r.part.0+0xd0>
 8009bbc:	84000104 	addi	r16,r16,4
 8009bc0:	8f001526 	beq	r17,fp,8009c18 <__sprint_r.part.0+0xcc>
 8009bc4:	81400017 	ldw	r5,0(r16)
 8009bc8:	980d883a 	mov	r6,r19
 8009bcc:	a009883a 	mov	r4,r20
 8009bd0:	800b63c0 	call	800b63c <_fputwc_r>
 8009bd4:	e7000044 	addi	fp,fp,1
 8009bd8:	14bff81e 	bne	r2,r18,8009bbc <__alt_data_end+0xfc009bbc>
 8009bdc:	9005883a 	mov	r2,r18
 8009be0:	a8000215 	stw	zero,8(r21)
 8009be4:	a8000115 	stw	zero,4(r21)
 8009be8:	dfc00917 	ldw	ra,36(sp)
 8009bec:	df000817 	ldw	fp,32(sp)
 8009bf0:	ddc00717 	ldw	r23,28(sp)
 8009bf4:	dd800617 	ldw	r22,24(sp)
 8009bf8:	dd400517 	ldw	r21,20(sp)
 8009bfc:	dd000417 	ldw	r20,16(sp)
 8009c00:	dcc00317 	ldw	r19,12(sp)
 8009c04:	dc800217 	ldw	r18,8(sp)
 8009c08:	dc400117 	ldw	r17,4(sp)
 8009c0c:	dc000017 	ldw	r16,0(sp)
 8009c10:	dec00a04 	addi	sp,sp,40
 8009c14:	f800283a 	ret
 8009c18:	a8800217 	ldw	r2,8(r21)
 8009c1c:	8c63883a 	add	r17,r17,r17
 8009c20:	8c63883a 	add	r17,r17,r17
 8009c24:	1445c83a 	sub	r2,r2,r17
 8009c28:	a8800215 	stw	r2,8(r21)
 8009c2c:	b5800204 	addi	r22,r22,8
 8009c30:	bdc00204 	addi	r23,r23,8
 8009c34:	103fdb1e 	bne	r2,zero,8009ba4 <__alt_data_end+0xfc009ba4>
 8009c38:	0005883a 	mov	r2,zero
 8009c3c:	003fe806 	br	8009be0 <__alt_data_end+0xfc009be0>
 8009c40:	8006cac0 	call	8006cac <__sfvwrite_r>
 8009c44:	003fe606 	br	8009be0 <__alt_data_end+0xfc009be0>

08009c48 <__sprint_r>:
 8009c48:	30c00217 	ldw	r3,8(r6)
 8009c4c:	18000126 	beq	r3,zero,8009c54 <__sprint_r+0xc>
 8009c50:	8009b4c1 	jmpi	8009b4c <__sprint_r.part.0>
 8009c54:	30000115 	stw	zero,4(r6)
 8009c58:	0005883a 	mov	r2,zero
 8009c5c:	f800283a 	ret

08009c60 <___vfiprintf_internal_r>:
 8009c60:	deffca04 	addi	sp,sp,-216
 8009c64:	dd403115 	stw	r21,196(sp)
 8009c68:	dfc03515 	stw	ra,212(sp)
 8009c6c:	df003415 	stw	fp,208(sp)
 8009c70:	ddc03315 	stw	r23,204(sp)
 8009c74:	dd803215 	stw	r22,200(sp)
 8009c78:	dd003015 	stw	r20,192(sp)
 8009c7c:	dcc02f15 	stw	r19,188(sp)
 8009c80:	dc802e15 	stw	r18,184(sp)
 8009c84:	dc402d15 	stw	r17,180(sp)
 8009c88:	dc002c15 	stw	r16,176(sp)
 8009c8c:	d9002115 	stw	r4,132(sp)
 8009c90:	d9402015 	stw	r5,128(sp)
 8009c94:	d9c02215 	stw	r7,136(sp)
 8009c98:	302b883a 	mov	r21,r6
 8009c9c:	20000226 	beq	r4,zero,8009ca8 <___vfiprintf_internal_r+0x48>
 8009ca0:	20800e17 	ldw	r2,56(r4)
 8009ca4:	1000cf26 	beq	r2,zero,8009fe4 <___vfiprintf_internal_r+0x384>
 8009ca8:	d8c02017 	ldw	r3,128(sp)
 8009cac:	1880030b 	ldhu	r2,12(r3)
 8009cb0:	10c8000c 	andi	r3,r2,8192
 8009cb4:	1800071e 	bne	r3,zero,8009cd4 <___vfiprintf_internal_r+0x74>
 8009cb8:	d9402017 	ldw	r5,128(sp)
 8009cbc:	00f7ffc4 	movi	r3,-8193
 8009cc0:	10880014 	ori	r2,r2,8192
 8009cc4:	29001917 	ldw	r4,100(r5)
 8009cc8:	2880030d 	sth	r2,12(r5)
 8009ccc:	20c6703a 	and	r3,r4,r3
 8009cd0:	28c01915 	stw	r3,100(r5)
 8009cd4:	10c0020c 	andi	r3,r2,8
 8009cd8:	1800a526 	beq	r3,zero,8009f70 <___vfiprintf_internal_r+0x310>
 8009cdc:	d9002017 	ldw	r4,128(sp)
 8009ce0:	20c00417 	ldw	r3,16(r4)
 8009ce4:	1800a226 	beq	r3,zero,8009f70 <___vfiprintf_internal_r+0x310>
 8009ce8:	1080068c 	andi	r2,r2,26
 8009cec:	00c00284 	movi	r3,10
 8009cf0:	10c0a826 	beq	r2,r3,8009f94 <___vfiprintf_internal_r+0x334>
 8009cf4:	d9001a04 	addi	r4,sp,104
 8009cf8:	d94019c4 	addi	r5,sp,103
 8009cfc:	04820074 	movhi	r18,2049
 8009d00:	2145c83a 	sub	r2,r4,r5
 8009d04:	9488c504 	addi	r18,r18,8980
 8009d08:	d9001e15 	stw	r4,120(sp)
 8009d0c:	d9401f15 	stw	r5,124(sp)
 8009d10:	dec01a15 	stw	sp,104(sp)
 8009d14:	d8001c15 	stw	zero,112(sp)
 8009d18:	d8001b15 	stw	zero,108(sp)
 8009d1c:	d811883a 	mov	r8,sp
 8009d20:	d8002615 	stw	zero,152(sp)
 8009d24:	d8002415 	stw	zero,144(sp)
 8009d28:	d8802815 	stw	r2,160(sp)
 8009d2c:	a82d883a 	mov	r22,r21
 8009d30:	b0800007 	ldb	r2,0(r22)
 8009d34:	10040d26 	beq	r2,zero,800ad6c <___vfiprintf_internal_r+0x110c>
 8009d38:	00c00944 	movi	r3,37
 8009d3c:	b029883a 	mov	r20,r22
 8009d40:	10c0021e 	bne	r2,r3,8009d4c <___vfiprintf_internal_r+0xec>
 8009d44:	00001606 	br	8009da0 <___vfiprintf_internal_r+0x140>
 8009d48:	10c00326 	beq	r2,r3,8009d58 <___vfiprintf_internal_r+0xf8>
 8009d4c:	a5000044 	addi	r20,r20,1
 8009d50:	a0800007 	ldb	r2,0(r20)
 8009d54:	103ffc1e 	bne	r2,zero,8009d48 <__alt_data_end+0xfc009d48>
 8009d58:	a5a1c83a 	sub	r16,r20,r22
 8009d5c:	80001026 	beq	r16,zero,8009da0 <___vfiprintf_internal_r+0x140>
 8009d60:	d8c01c17 	ldw	r3,112(sp)
 8009d64:	d8801b17 	ldw	r2,108(sp)
 8009d68:	45800015 	stw	r22,0(r8)
 8009d6c:	80c7883a 	add	r3,r16,r3
 8009d70:	10800044 	addi	r2,r2,1
 8009d74:	44000115 	stw	r16,4(r8)
 8009d78:	d8c01c15 	stw	r3,112(sp)
 8009d7c:	d8801b15 	stw	r2,108(sp)
 8009d80:	010001c4 	movi	r4,7
 8009d84:	2080750e 	bge	r4,r2,8009f5c <___vfiprintf_internal_r+0x2fc>
 8009d88:	1803951e 	bne	r3,zero,800abe0 <___vfiprintf_internal_r+0xf80>
 8009d8c:	d8c02417 	ldw	r3,144(sp)
 8009d90:	d8001b15 	stw	zero,108(sp)
 8009d94:	d811883a 	mov	r8,sp
 8009d98:	1c07883a 	add	r3,r3,r16
 8009d9c:	d8c02415 	stw	r3,144(sp)
 8009da0:	a0800007 	ldb	r2,0(r20)
 8009da4:	1002e026 	beq	r2,zero,800a928 <___vfiprintf_internal_r+0xcc8>
 8009da8:	a5800044 	addi	r22,r20,1
 8009dac:	a0c00047 	ldb	r3,1(r20)
 8009db0:	d8001d85 	stb	zero,118(sp)
 8009db4:	0027883a 	mov	r19,zero
 8009db8:	d8002305 	stb	zero,140(sp)
 8009dbc:	043fffc4 	movi	r16,-1
 8009dc0:	d8002515 	stw	zero,148(sp)
 8009dc4:	0023883a 	mov	r17,zero
 8009dc8:	05001604 	movi	r20,88
 8009dcc:	05400244 	movi	r21,9
 8009dd0:	402f883a 	mov	r23,r8
 8009dd4:	b5800044 	addi	r22,r22,1
 8009dd8:	18bff804 	addi	r2,r3,-32
 8009ddc:	a0827736 	bltu	r20,r2,800a7bc <___vfiprintf_internal_r+0xb5c>
 8009de0:	100490ba 	slli	r2,r2,2
 8009de4:	01020074 	movhi	r4,2049
 8009de8:	21277e04 	addi	r4,r4,-25096
 8009dec:	1105883a 	add	r2,r2,r4
 8009df0:	10800017 	ldw	r2,0(r2)
 8009df4:	1000683a 	jmp	r2
 8009df8:	0800a4bc 	xorhi	zero,at,658
 8009dfc:	0800a7bc 	xorhi	zero,at,670
 8009e00:	0800a7bc 	xorhi	zero,at,670
 8009e04:	0800a4d8 	cmpnei	zero,at,659
 8009e08:	0800a7bc 	xorhi	zero,at,670
 8009e0c:	0800a7bc 	xorhi	zero,at,670
 8009e10:	0800a7bc 	xorhi	zero,at,670
 8009e14:	0800a7bc 	xorhi	zero,at,670
 8009e18:	0800a7bc 	xorhi	zero,at,670
 8009e1c:	0800a7bc 	xorhi	zero,at,670
 8009e20:	0800a6e0 	cmpeqi	zero,at,667
 8009e24:	0800a704 	addi	zero,at,668
 8009e28:	0800a7bc 	xorhi	zero,at,670
 8009e2c:	08009ffc 	xorhi	zero,at,639
 8009e30:	0800a718 	cmpnei	zero,at,668
 8009e34:	0800a7bc 	xorhi	zero,at,670
 8009e38:	0800a4e4 	muli	zero,at,659
 8009e3c:	0800a4f0 	cmpltui	zero,at,659
 8009e40:	0800a4f0 	cmpltui	zero,at,659
 8009e44:	0800a4f0 	cmpltui	zero,at,659
 8009e48:	0800a4f0 	cmpltui	zero,at,659
 8009e4c:	0800a4f0 	cmpltui	zero,at,659
 8009e50:	0800a4f0 	cmpltui	zero,at,659
 8009e54:	0800a4f0 	cmpltui	zero,at,659
 8009e58:	0800a4f0 	cmpltui	zero,at,659
 8009e5c:	0800a4f0 	cmpltui	zero,at,659
 8009e60:	0800a7bc 	xorhi	zero,at,670
 8009e64:	0800a7bc 	xorhi	zero,at,670
 8009e68:	0800a7bc 	xorhi	zero,at,670
 8009e6c:	0800a7bc 	xorhi	zero,at,670
 8009e70:	0800a7bc 	xorhi	zero,at,670
 8009e74:	0800a7bc 	xorhi	zero,at,670
 8009e78:	0800a7bc 	xorhi	zero,at,670
 8009e7c:	0800a7bc 	xorhi	zero,at,670
 8009e80:	0800a7bc 	xorhi	zero,at,670
 8009e84:	0800a7bc 	xorhi	zero,at,670
 8009e88:	0800a530 	cmpltui	zero,at,660
 8009e8c:	0800a7bc 	xorhi	zero,at,670
 8009e90:	0800a7bc 	xorhi	zero,at,670
 8009e94:	0800a7bc 	xorhi	zero,at,670
 8009e98:	0800a7bc 	xorhi	zero,at,670
 8009e9c:	0800a7bc 	xorhi	zero,at,670
 8009ea0:	0800a7bc 	xorhi	zero,at,670
 8009ea4:	0800a7bc 	xorhi	zero,at,670
 8009ea8:	0800a7bc 	xorhi	zero,at,670
 8009eac:	0800a7bc 	xorhi	zero,at,670
 8009eb0:	0800a7bc 	xorhi	zero,at,670
 8009eb4:	0800a56c 	andhi	zero,at,661
 8009eb8:	0800a7bc 	xorhi	zero,at,670
 8009ebc:	0800a7bc 	xorhi	zero,at,670
 8009ec0:	0800a7bc 	xorhi	zero,at,670
 8009ec4:	0800a7bc 	xorhi	zero,at,670
 8009ec8:	0800a7bc 	xorhi	zero,at,670
 8009ecc:	0800a5c8 	cmpgei	zero,at,663
 8009ed0:	0800a7bc 	xorhi	zero,at,670
 8009ed4:	0800a7bc 	xorhi	zero,at,670
 8009ed8:	0800a63c 	xorhi	zero,at,664
 8009edc:	0800a7bc 	xorhi	zero,at,670
 8009ee0:	0800a7bc 	xorhi	zero,at,670
 8009ee4:	0800a7bc 	xorhi	zero,at,670
 8009ee8:	0800a7bc 	xorhi	zero,at,670
 8009eec:	0800a7bc 	xorhi	zero,at,670
 8009ef0:	0800a7bc 	xorhi	zero,at,670
 8009ef4:	0800a7bc 	xorhi	zero,at,670
 8009ef8:	0800a7bc 	xorhi	zero,at,670
 8009efc:	0800a7bc 	xorhi	zero,at,670
 8009f00:	0800a7bc 	xorhi	zero,at,670
 8009f04:	0800a3e4 	muli	zero,at,655
 8009f08:	0800a414 	ori	zero,at,656
 8009f0c:	0800a7bc 	xorhi	zero,at,670
 8009f10:	0800a7bc 	xorhi	zero,at,670
 8009f14:	0800a7bc 	xorhi	zero,at,670
 8009f18:	0800a764 	muli	zero,at,669
 8009f1c:	0800a414 	ori	zero,at,656
 8009f20:	0800a7bc 	xorhi	zero,at,670
 8009f24:	0800a7bc 	xorhi	zero,at,670
 8009f28:	0800a2bc 	xorhi	zero,at,650
 8009f2c:	0800a7bc 	xorhi	zero,at,670
 8009f30:	0800a2d0 	cmplti	zero,at,651
 8009f34:	0800a308 	cmpgei	zero,at,652
 8009f38:	0800a008 	cmpgei	zero,at,640
 8009f3c:	0800a2b0 	cmpltui	zero,at,650
 8009f40:	0800a7bc 	xorhi	zero,at,670
 8009f44:	0800a67c 	xorhi	zero,at,665
 8009f48:	0800a7bc 	xorhi	zero,at,670
 8009f4c:	0800a6c8 	cmpgei	zero,at,667
 8009f50:	0800a7bc 	xorhi	zero,at,670
 8009f54:	0800a7bc 	xorhi	zero,at,670
 8009f58:	0800a38c 	andi	zero,at,654
 8009f5c:	42000204 	addi	r8,r8,8
 8009f60:	d8c02417 	ldw	r3,144(sp)
 8009f64:	1c07883a 	add	r3,r3,r16
 8009f68:	d8c02415 	stw	r3,144(sp)
 8009f6c:	003f8c06 	br	8009da0 <__alt_data_end+0xfc009da0>
 8009f70:	d9402017 	ldw	r5,128(sp)
 8009f74:	d9002117 	ldw	r4,132(sp)
 8009f78:	800481c0 	call	800481c <__swsetup_r>
 8009f7c:	1003c11e 	bne	r2,zero,800ae84 <___vfiprintf_internal_r+0x1224>
 8009f80:	d9402017 	ldw	r5,128(sp)
 8009f84:	00c00284 	movi	r3,10
 8009f88:	2880030b 	ldhu	r2,12(r5)
 8009f8c:	1080068c 	andi	r2,r2,26
 8009f90:	10ff581e 	bne	r2,r3,8009cf4 <__alt_data_end+0xfc009cf4>
 8009f94:	d8c02017 	ldw	r3,128(sp)
 8009f98:	1880038f 	ldh	r2,14(r3)
 8009f9c:	103f5516 	blt	r2,zero,8009cf4 <__alt_data_end+0xfc009cf4>
 8009fa0:	d9c02217 	ldw	r7,136(sp)
 8009fa4:	d9002117 	ldw	r4,132(sp)
 8009fa8:	a80d883a 	mov	r6,r21
 8009fac:	180b883a 	mov	r5,r3
 8009fb0:	800b1880 	call	800b188 <__sbprintf>
 8009fb4:	dfc03517 	ldw	ra,212(sp)
 8009fb8:	df003417 	ldw	fp,208(sp)
 8009fbc:	ddc03317 	ldw	r23,204(sp)
 8009fc0:	dd803217 	ldw	r22,200(sp)
 8009fc4:	dd403117 	ldw	r21,196(sp)
 8009fc8:	dd003017 	ldw	r20,192(sp)
 8009fcc:	dcc02f17 	ldw	r19,188(sp)
 8009fd0:	dc802e17 	ldw	r18,184(sp)
 8009fd4:	dc402d17 	ldw	r17,180(sp)
 8009fd8:	dc002c17 	ldw	r16,176(sp)
 8009fdc:	dec03604 	addi	sp,sp,216
 8009fe0:	f800283a 	ret
 8009fe4:	80068280 	call	8006828 <__sinit>
 8009fe8:	003f2f06 	br	8009ca8 <__alt_data_end+0xfc009ca8>
 8009fec:	d8c02517 	ldw	r3,148(sp)
 8009ff0:	d8802215 	stw	r2,136(sp)
 8009ff4:	00c7c83a 	sub	r3,zero,r3
 8009ff8:	d8c02515 	stw	r3,148(sp)
 8009ffc:	8c400114 	ori	r17,r17,4
 800a000:	b0c00007 	ldb	r3,0(r22)
 800a004:	003f7306 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a008:	00800c04 	movi	r2,48
 800a00c:	d9402217 	ldw	r5,136(sp)
 800a010:	d8801d05 	stb	r2,116(sp)
 800a014:	00801e04 	movi	r2,120
 800a018:	d8801d45 	stb	r2,117(sp)
 800a01c:	d8001d85 	stb	zero,118(sp)
 800a020:	b811883a 	mov	r8,r23
 800a024:	28c00104 	addi	r3,r5,4
 800a028:	2cc00017 	ldw	r19,0(r5)
 800a02c:	0029883a 	mov	r20,zero
 800a030:	88800094 	ori	r2,r17,2
 800a034:	80032516 	blt	r16,zero,800accc <___vfiprintf_internal_r+0x106c>
 800a038:	00bfdfc4 	movi	r2,-129
 800a03c:	88a2703a 	and	r17,r17,r2
 800a040:	d8c02215 	stw	r3,136(sp)
 800a044:	8c400094 	ori	r17,r17,2
 800a048:	98032a1e 	bne	r19,zero,800acf4 <___vfiprintf_internal_r+0x1094>
 800a04c:	00820074 	movhi	r2,2049
 800a050:	10886404 	addi	r2,r2,8592
 800a054:	d8802615 	stw	r2,152(sp)
 800a058:	002b883a 	mov	r21,zero
 800a05c:	8001741e 	bne	r16,zero,800a630 <___vfiprintf_internal_r+0x9d0>
 800a060:	0021883a 	mov	r16,zero
 800a064:	0029883a 	mov	r20,zero
 800a068:	ddc01a04 	addi	r23,sp,104
 800a06c:	8027883a 	mov	r19,r16
 800a070:	8500010e 	bge	r16,r20,800a078 <___vfiprintf_internal_r+0x418>
 800a074:	a027883a 	mov	r19,r20
 800a078:	ad403fcc 	andi	r21,r21,255
 800a07c:	ad40201c 	xori	r21,r21,128
 800a080:	ad7fe004 	addi	r21,r21,-128
 800a084:	a8000126 	beq	r21,zero,800a08c <___vfiprintf_internal_r+0x42c>
 800a088:	9cc00044 	addi	r19,r19,1
 800a08c:	89c0008c 	andi	r7,r17,2
 800a090:	38000126 	beq	r7,zero,800a098 <___vfiprintf_internal_r+0x438>
 800a094:	9cc00084 	addi	r19,r19,2
 800a098:	88c0210c 	andi	r3,r17,132
 800a09c:	1801dd1e 	bne	r3,zero,800a814 <___vfiprintf_internal_r+0xbb4>
 800a0a0:	d9402517 	ldw	r5,148(sp)
 800a0a4:	2cebc83a 	sub	r21,r5,r19
 800a0a8:	0541da0e 	bge	zero,r21,800a814 <___vfiprintf_internal_r+0xbb4>
 800a0ac:	07000404 	movi	fp,16
 800a0b0:	d8801c17 	ldw	r2,112(sp)
 800a0b4:	e543be0e 	bge	fp,r21,800afb0 <___vfiprintf_internal_r+0x1350>
 800a0b8:	01420074 	movhi	r5,2049
 800a0bc:	2948c904 	addi	r5,r5,8996
 800a0c0:	dc002715 	stw	r16,156(sp)
 800a0c4:	d9801b17 	ldw	r6,108(sp)
 800a0c8:	a821883a 	mov	r16,r21
 800a0cc:	d9402315 	stw	r5,140(sp)
 800a0d0:	028001c4 	movi	r10,7
 800a0d4:	d9c02915 	stw	r7,164(sp)
 800a0d8:	182b883a 	mov	r21,r3
 800a0dc:	00000506 	br	800a0f4 <___vfiprintf_internal_r+0x494>
 800a0e0:	31000084 	addi	r4,r6,2
 800a0e4:	42000204 	addi	r8,r8,8
 800a0e8:	180d883a 	mov	r6,r3
 800a0ec:	843ffc04 	addi	r16,r16,-16
 800a0f0:	e4000f0e 	bge	fp,r16,800a130 <___vfiprintf_internal_r+0x4d0>
 800a0f4:	01020074 	movhi	r4,2049
 800a0f8:	10800404 	addi	r2,r2,16
 800a0fc:	30c00044 	addi	r3,r6,1
 800a100:	2108c904 	addi	r4,r4,8996
 800a104:	41000015 	stw	r4,0(r8)
 800a108:	47000115 	stw	fp,4(r8)
 800a10c:	d8801c15 	stw	r2,112(sp)
 800a110:	d8c01b15 	stw	r3,108(sp)
 800a114:	50fff20e 	bge	r10,r3,800a0e0 <__alt_data_end+0xfc00a0e0>
 800a118:	1001b21e 	bne	r2,zero,800a7e4 <___vfiprintf_internal_r+0xb84>
 800a11c:	843ffc04 	addi	r16,r16,-16
 800a120:	000d883a 	mov	r6,zero
 800a124:	01000044 	movi	r4,1
 800a128:	d811883a 	mov	r8,sp
 800a12c:	e43ff116 	blt	fp,r16,800a0f4 <__alt_data_end+0xfc00a0f4>
 800a130:	a807883a 	mov	r3,r21
 800a134:	d9c02917 	ldw	r7,164(sp)
 800a138:	802b883a 	mov	r21,r16
 800a13c:	dc002717 	ldw	r16,156(sp)
 800a140:	d9402317 	ldw	r5,140(sp)
 800a144:	a885883a 	add	r2,r21,r2
 800a148:	45400115 	stw	r21,4(r8)
 800a14c:	41400015 	stw	r5,0(r8)
 800a150:	d8801c15 	stw	r2,112(sp)
 800a154:	d9001b15 	stw	r4,108(sp)
 800a158:	014001c4 	movi	r5,7
 800a15c:	29026216 	blt	r5,r4,800aae8 <___vfiprintf_internal_r+0xe88>
 800a160:	d9801d87 	ldb	r6,118(sp)
 800a164:	42000204 	addi	r8,r8,8
 800a168:	21400044 	addi	r5,r4,1
 800a16c:	3001ae1e 	bne	r6,zero,800a828 <___vfiprintf_internal_r+0xbc8>
 800a170:	3801bb26 	beq	r7,zero,800a860 <___vfiprintf_internal_r+0xc00>
 800a174:	d9001d04 	addi	r4,sp,116
 800a178:	10800084 	addi	r2,r2,2
 800a17c:	41000015 	stw	r4,0(r8)
 800a180:	01000084 	movi	r4,2
 800a184:	41000115 	stw	r4,4(r8)
 800a188:	d8801c15 	stw	r2,112(sp)
 800a18c:	d9401b15 	stw	r5,108(sp)
 800a190:	010001c4 	movi	r4,7
 800a194:	2142680e 	bge	r4,r5,800ab38 <___vfiprintf_internal_r+0xed8>
 800a198:	1002b11e 	bne	r2,zero,800ac60 <___vfiprintf_internal_r+0x1000>
 800a19c:	01802004 	movi	r6,128
 800a1a0:	01400044 	movi	r5,1
 800a1a4:	0009883a 	mov	r4,zero
 800a1a8:	d811883a 	mov	r8,sp
 800a1ac:	1981ae1e 	bne	r3,r6,800a868 <___vfiprintf_internal_r+0xc08>
 800a1b0:	d8c02517 	ldw	r3,148(sp)
 800a1b4:	1cf9c83a 	sub	fp,r3,r19
 800a1b8:	0701ab0e 	bge	zero,fp,800a868 <___vfiprintf_internal_r+0xc08>
 800a1bc:	05400404 	movi	r21,16
 800a1c0:	af03a90e 	bge	r21,fp,800b068 <___vfiprintf_internal_r+0x1408>
 800a1c4:	01420074 	movhi	r5,2049
 800a1c8:	2948c504 	addi	r5,r5,8980
 800a1cc:	d9402315 	stw	r5,140(sp)
 800a1d0:	01c001c4 	movi	r7,7
 800a1d4:	00000506 	br	800a1ec <___vfiprintf_internal_r+0x58c>
 800a1d8:	21800084 	addi	r6,r4,2
 800a1dc:	42000204 	addi	r8,r8,8
 800a1e0:	1809883a 	mov	r4,r3
 800a1e4:	e73ffc04 	addi	fp,fp,-16
 800a1e8:	af000d0e 	bge	r21,fp,800a220 <___vfiprintf_internal_r+0x5c0>
 800a1ec:	10800404 	addi	r2,r2,16
 800a1f0:	20c00044 	addi	r3,r4,1
 800a1f4:	44800015 	stw	r18,0(r8)
 800a1f8:	45400115 	stw	r21,4(r8)
 800a1fc:	d8801c15 	stw	r2,112(sp)
 800a200:	d8c01b15 	stw	r3,108(sp)
 800a204:	38fff40e 	bge	r7,r3,800a1d8 <__alt_data_end+0xfc00a1d8>
 800a208:	10022b1e 	bne	r2,zero,800aab8 <___vfiprintf_internal_r+0xe58>
 800a20c:	e73ffc04 	addi	fp,fp,-16
 800a210:	01800044 	movi	r6,1
 800a214:	0009883a 	mov	r4,zero
 800a218:	d811883a 	mov	r8,sp
 800a21c:	af3ff316 	blt	r21,fp,800a1ec <__alt_data_end+0xfc00a1ec>
 800a220:	d8c02317 	ldw	r3,140(sp)
 800a224:	1705883a 	add	r2,r2,fp
 800a228:	47000115 	stw	fp,4(r8)
 800a22c:	40c00015 	stw	r3,0(r8)
 800a230:	d8801c15 	stw	r2,112(sp)
 800a234:	d9801b15 	stw	r6,108(sp)
 800a238:	00c001c4 	movi	r3,7
 800a23c:	19829416 	blt	r3,r6,800ac90 <___vfiprintf_internal_r+0x1030>
 800a240:	8521c83a 	sub	r16,r16,r20
 800a244:	42000204 	addi	r8,r8,8
 800a248:	31400044 	addi	r5,r6,1
 800a24c:	3009883a 	mov	r4,r6
 800a250:	04018716 	blt	zero,r16,800a870 <___vfiprintf_internal_r+0xc10>
 800a254:	a085883a 	add	r2,r20,r2
 800a258:	45c00015 	stw	r23,0(r8)
 800a25c:	45000115 	stw	r20,4(r8)
 800a260:	d8801c15 	stw	r2,112(sp)
 800a264:	d9401b15 	stw	r5,108(sp)
 800a268:	00c001c4 	movi	r3,7
 800a26c:	1941c20e 	bge	r3,r5,800a978 <___vfiprintf_internal_r+0xd18>
 800a270:	1002531e 	bne	r2,zero,800abc0 <___vfiprintf_internal_r+0xf60>
 800a274:	d8001b15 	stw	zero,108(sp)
 800a278:	8c40010c 	andi	r17,r17,4
 800a27c:	88023226 	beq	r17,zero,800ab48 <___vfiprintf_internal_r+0xee8>
 800a280:	d9002517 	ldw	r4,148(sp)
 800a284:	24e3c83a 	sub	r17,r4,r19
 800a288:	04432916 	blt	zero,r17,800af30 <___vfiprintf_internal_r+0x12d0>
 800a28c:	d8802517 	ldw	r2,148(sp)
 800a290:	14c0010e 	bge	r2,r19,800a298 <___vfiprintf_internal_r+0x638>
 800a294:	9805883a 	mov	r2,r19
 800a298:	d8c02417 	ldw	r3,144(sp)
 800a29c:	1887883a 	add	r3,r3,r2
 800a2a0:	d8c02415 	stw	r3,144(sp)
 800a2a4:	d8001b15 	stw	zero,108(sp)
 800a2a8:	d811883a 	mov	r8,sp
 800a2ac:	003ea006 	br	8009d30 <__alt_data_end+0xfc009d30>
 800a2b0:	8c400814 	ori	r17,r17,32
 800a2b4:	b0c00007 	ldb	r3,0(r22)
 800a2b8:	003ec606 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a2bc:	b0c00007 	ldb	r3,0(r22)
 800a2c0:	00801b04 	movi	r2,108
 800a2c4:	18832026 	beq	r3,r2,800af48 <___vfiprintf_internal_r+0x12e8>
 800a2c8:	8c400414 	ori	r17,r17,16
 800a2cc:	003ec106 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a2d0:	9cc03fcc 	andi	r19,r19,255
 800a2d4:	b811883a 	mov	r8,r23
 800a2d8:	9803981e 	bne	r19,zero,800b13c <___vfiprintf_internal_r+0x14dc>
 800a2dc:	8880080c 	andi	r2,r17,32
 800a2e0:	1002be26 	beq	r2,zero,800addc <___vfiprintf_internal_r+0x117c>
 800a2e4:	d9002217 	ldw	r4,136(sp)
 800a2e8:	d9402417 	ldw	r5,144(sp)
 800a2ec:	20800017 	ldw	r2,0(r4)
 800a2f0:	2807d7fa 	srai	r3,r5,31
 800a2f4:	21000104 	addi	r4,r4,4
 800a2f8:	d9002215 	stw	r4,136(sp)
 800a2fc:	11400015 	stw	r5,0(r2)
 800a300:	10c00115 	stw	r3,4(r2)
 800a304:	003e8a06 	br	8009d30 <__alt_data_end+0xfc009d30>
 800a308:	9cc03fcc 	andi	r19,r19,255
 800a30c:	b811883a 	mov	r8,r23
 800a310:	9803871e 	bne	r19,zero,800b130 <___vfiprintf_internal_r+0x14d0>
 800a314:	8880080c 	andi	r2,r17,32
 800a318:	10009a26 	beq	r2,zero,800a584 <___vfiprintf_internal_r+0x924>
 800a31c:	d9002217 	ldw	r4,136(sp)
 800a320:	d8001d85 	stb	zero,118(sp)
 800a324:	20800204 	addi	r2,r4,8
 800a328:	24c00017 	ldw	r19,0(r4)
 800a32c:	25000117 	ldw	r20,4(r4)
 800a330:	8002a416 	blt	r16,zero,800adc4 <___vfiprintf_internal_r+0x1164>
 800a334:	013fdfc4 	movi	r4,-129
 800a338:	9d06b03a 	or	r3,r19,r20
 800a33c:	d8802215 	stw	r2,136(sp)
 800a340:	8922703a 	and	r17,r17,r4
 800a344:	18009b26 	beq	r3,zero,800a5b4 <___vfiprintf_internal_r+0x954>
 800a348:	002b883a 	mov	r21,zero
 800a34c:	ddc01a04 	addi	r23,sp,104
 800a350:	9806d0fa 	srli	r3,r19,3
 800a354:	a008977a 	slli	r4,r20,29
 800a358:	a028d0fa 	srli	r20,r20,3
 800a35c:	9cc001cc 	andi	r19,r19,7
 800a360:	98800c04 	addi	r2,r19,48
 800a364:	bdffffc4 	addi	r23,r23,-1
 800a368:	20e6b03a 	or	r19,r4,r3
 800a36c:	b8800005 	stb	r2,0(r23)
 800a370:	9d06b03a 	or	r3,r19,r20
 800a374:	183ff61e 	bne	r3,zero,800a350 <__alt_data_end+0xfc00a350>
 800a378:	88c0004c 	andi	r3,r17,1
 800a37c:	18021f1e 	bne	r3,zero,800abfc <___vfiprintf_internal_r+0xf9c>
 800a380:	d9401e17 	ldw	r5,120(sp)
 800a384:	2de9c83a 	sub	r20,r5,r23
 800a388:	003f3806 	br	800a06c <__alt_data_end+0xfc00a06c>
 800a38c:	9cc03fcc 	andi	r19,r19,255
 800a390:	b811883a 	mov	r8,r23
 800a394:	98034f1e 	bne	r19,zero,800b0d4 <___vfiprintf_internal_r+0x1474>
 800a398:	00820074 	movhi	r2,2049
 800a39c:	10886404 	addi	r2,r2,8592
 800a3a0:	d8802615 	stw	r2,152(sp)
 800a3a4:	8880080c 	andi	r2,r17,32
 800a3a8:	1000ac26 	beq	r2,zero,800a65c <___vfiprintf_internal_r+0x9fc>
 800a3ac:	d9002217 	ldw	r4,136(sp)
 800a3b0:	24c00017 	ldw	r19,0(r4)
 800a3b4:	25000117 	ldw	r20,4(r4)
 800a3b8:	21000204 	addi	r4,r4,8
 800a3bc:	d9002215 	stw	r4,136(sp)
 800a3c0:	8880004c 	andi	r2,r17,1
 800a3c4:	1001e726 	beq	r2,zero,800ab64 <___vfiprintf_internal_r+0xf04>
 800a3c8:	9d04b03a 	or	r2,r19,r20
 800a3cc:	10025c1e 	bne	r2,zero,800ad40 <___vfiprintf_internal_r+0x10e0>
 800a3d0:	d8001d85 	stb	zero,118(sp)
 800a3d4:	80024416 	blt	r16,zero,800ace8 <___vfiprintf_internal_r+0x1088>
 800a3d8:	00bfdfc4 	movi	r2,-129
 800a3dc:	88a2703a 	and	r17,r17,r2
 800a3e0:	003f1d06 	br	800a058 <__alt_data_end+0xfc00a058>
 800a3e4:	d8c02217 	ldw	r3,136(sp)
 800a3e8:	04c00044 	movi	r19,1
 800a3ec:	b811883a 	mov	r8,r23
 800a3f0:	18800017 	ldw	r2,0(r3)
 800a3f4:	18c00104 	addi	r3,r3,4
 800a3f8:	d8001d85 	stb	zero,118(sp)
 800a3fc:	d8801005 	stb	r2,64(sp)
 800a400:	d8c02215 	stw	r3,136(sp)
 800a404:	9829883a 	mov	r20,r19
 800a408:	ddc01004 	addi	r23,sp,64
 800a40c:	0021883a 	mov	r16,zero
 800a410:	003f1e06 	br	800a08c <__alt_data_end+0xfc00a08c>
 800a414:	9cc03fcc 	andi	r19,r19,255
 800a418:	b811883a 	mov	r8,r23
 800a41c:	9803331e 	bne	r19,zero,800b0ec <___vfiprintf_internal_r+0x148c>
 800a420:	8880080c 	andi	r2,r17,32
 800a424:	10004826 	beq	r2,zero,800a548 <___vfiprintf_internal_r+0x8e8>
 800a428:	d9002217 	ldw	r4,136(sp)
 800a42c:	20800117 	ldw	r2,4(r4)
 800a430:	24c00017 	ldw	r19,0(r4)
 800a434:	21000204 	addi	r4,r4,8
 800a438:	d9002215 	stw	r4,136(sp)
 800a43c:	1029883a 	mov	r20,r2
 800a440:	10024c16 	blt	r2,zero,800ad74 <___vfiprintf_internal_r+0x1114>
 800a444:	dd401d83 	ldbu	r21,118(sp)
 800a448:	80007116 	blt	r16,zero,800a610 <___vfiprintf_internal_r+0x9b0>
 800a44c:	00ffdfc4 	movi	r3,-129
 800a450:	9d04b03a 	or	r2,r19,r20
 800a454:	88e2703a 	and	r17,r17,r3
 800a458:	1000d126 	beq	r2,zero,800a7a0 <___vfiprintf_internal_r+0xb40>
 800a45c:	a0023526 	beq	r20,zero,800ad34 <___vfiprintf_internal_r+0x10d4>
 800a460:	ddc01a04 	addi	r23,sp,104
 800a464:	4039883a 	mov	fp,r8
 800a468:	9809883a 	mov	r4,r19
 800a46c:	a00b883a 	mov	r5,r20
 800a470:	01800284 	movi	r6,10
 800a474:	000f883a 	mov	r7,zero
 800a478:	800c18c0 	call	800c18c <__umoddi3>
 800a47c:	10800c04 	addi	r2,r2,48
 800a480:	bdffffc4 	addi	r23,r23,-1
 800a484:	9809883a 	mov	r4,r19
 800a488:	a00b883a 	mov	r5,r20
 800a48c:	b8800005 	stb	r2,0(r23)
 800a490:	01800284 	movi	r6,10
 800a494:	000f883a 	mov	r7,zero
 800a498:	800bb900 	call	800bb90 <__udivdi3>
 800a49c:	1027883a 	mov	r19,r2
 800a4a0:	10c4b03a 	or	r2,r2,r3
 800a4a4:	1829883a 	mov	r20,r3
 800a4a8:	103fef1e 	bne	r2,zero,800a468 <__alt_data_end+0xfc00a468>
 800a4ac:	d9001e17 	ldw	r4,120(sp)
 800a4b0:	e011883a 	mov	r8,fp
 800a4b4:	25e9c83a 	sub	r20,r4,r23
 800a4b8:	003eec06 	br	800a06c <__alt_data_end+0xfc00a06c>
 800a4bc:	d8802307 	ldb	r2,140(sp)
 800a4c0:	1002361e 	bne	r2,zero,800ad9c <___vfiprintf_internal_r+0x113c>
 800a4c4:	00c00804 	movi	r3,32
 800a4c8:	d8c02305 	stb	r3,140(sp)
 800a4cc:	04c00044 	movi	r19,1
 800a4d0:	b0c00007 	ldb	r3,0(r22)
 800a4d4:	003e3f06 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a4d8:	8c400054 	ori	r17,r17,1
 800a4dc:	b0c00007 	ldb	r3,0(r22)
 800a4e0:	003e3c06 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a4e4:	8c402014 	ori	r17,r17,128
 800a4e8:	b0c00007 	ldb	r3,0(r22)
 800a4ec:	003e3906 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a4f0:	dc002715 	stw	r16,156(sp)
 800a4f4:	d8002515 	stw	zero,148(sp)
 800a4f8:	1f3ff404 	addi	fp,r3,-48
 800a4fc:	0009883a 	mov	r4,zero
 800a500:	b021883a 	mov	r16,r22
 800a504:	01400284 	movi	r5,10
 800a508:	800c9040 	call	800c904 <__mulsi3>
 800a50c:	80c00007 	ldb	r3,0(r16)
 800a510:	e089883a 	add	r4,fp,r2
 800a514:	b5800044 	addi	r22,r22,1
 800a518:	1f3ff404 	addi	fp,r3,-48
 800a51c:	b021883a 	mov	r16,r22
 800a520:	af3ff82e 	bgeu	r21,fp,800a504 <__alt_data_end+0xfc00a504>
 800a524:	d9002515 	stw	r4,148(sp)
 800a528:	dc002717 	ldw	r16,156(sp)
 800a52c:	003e2a06 	br	8009dd8 <__alt_data_end+0xfc009dd8>
 800a530:	9cc03fcc 	andi	r19,r19,255
 800a534:	b811883a 	mov	r8,r23
 800a538:	9802e91e 	bne	r19,zero,800b0e0 <___vfiprintf_internal_r+0x1480>
 800a53c:	8c400414 	ori	r17,r17,16
 800a540:	8880080c 	andi	r2,r17,32
 800a544:	103fb81e 	bne	r2,zero,800a428 <__alt_data_end+0xfc00a428>
 800a548:	8880040c 	andi	r2,r17,16
 800a54c:	10022e26 	beq	r2,zero,800ae08 <___vfiprintf_internal_r+0x11a8>
 800a550:	d9402217 	ldw	r5,136(sp)
 800a554:	2cc00017 	ldw	r19,0(r5)
 800a558:	29400104 	addi	r5,r5,4
 800a55c:	d9402215 	stw	r5,136(sp)
 800a560:	9829d7fa 	srai	r20,r19,31
 800a564:	a005883a 	mov	r2,r20
 800a568:	003fb506 	br	800a440 <__alt_data_end+0xfc00a440>
 800a56c:	9cc03fcc 	andi	r19,r19,255
 800a570:	b811883a 	mov	r8,r23
 800a574:	9802fa1e 	bne	r19,zero,800b160 <___vfiprintf_internal_r+0x1500>
 800a578:	8c400414 	ori	r17,r17,16
 800a57c:	8880080c 	andi	r2,r17,32
 800a580:	103f661e 	bne	r2,zero,800a31c <__alt_data_end+0xfc00a31c>
 800a584:	8880040c 	andi	r2,r17,16
 800a588:	10020626 	beq	r2,zero,800ada4 <___vfiprintf_internal_r+0x1144>
 800a58c:	d9402217 	ldw	r5,136(sp)
 800a590:	d8001d85 	stb	zero,118(sp)
 800a594:	0029883a 	mov	r20,zero
 800a598:	28800104 	addi	r2,r5,4
 800a59c:	2cc00017 	ldw	r19,0(r5)
 800a5a0:	80020816 	blt	r16,zero,800adc4 <___vfiprintf_internal_r+0x1164>
 800a5a4:	00ffdfc4 	movi	r3,-129
 800a5a8:	d8802215 	stw	r2,136(sp)
 800a5ac:	88e2703a 	and	r17,r17,r3
 800a5b0:	983f651e 	bne	r19,zero,800a348 <__alt_data_end+0xfc00a348>
 800a5b4:	002b883a 	mov	r21,zero
 800a5b8:	8002cf26 	beq	r16,zero,800b0f8 <___vfiprintf_internal_r+0x1498>
 800a5bc:	0027883a 	mov	r19,zero
 800a5c0:	0029883a 	mov	r20,zero
 800a5c4:	003f6106 	br	800a34c <__alt_data_end+0xfc00a34c>
 800a5c8:	9cc03fcc 	andi	r19,r19,255
 800a5cc:	b811883a 	mov	r8,r23
 800a5d0:	9802e01e 	bne	r19,zero,800b154 <___vfiprintf_internal_r+0x14f4>
 800a5d4:	8c400414 	ori	r17,r17,16
 800a5d8:	8880080c 	andi	r2,r17,32
 800a5dc:	1000641e 	bne	r2,zero,800a770 <___vfiprintf_internal_r+0xb10>
 800a5e0:	8880040c 	andi	r2,r17,16
 800a5e4:	1001c81e 	bne	r2,zero,800ad08 <___vfiprintf_internal_r+0x10a8>
 800a5e8:	8880100c 	andi	r2,r17,64
 800a5ec:	d8001d85 	stb	zero,118(sp)
 800a5f0:	1002281e 	bne	r2,zero,800ae94 <___vfiprintf_internal_r+0x1234>
 800a5f4:	d9002217 	ldw	r4,136(sp)
 800a5f8:	0029883a 	mov	r20,zero
 800a5fc:	20800104 	addi	r2,r4,4
 800a600:	24c00017 	ldw	r19,0(r4)
 800a604:	8001c60e 	bge	r16,zero,800ad20 <___vfiprintf_internal_r+0x10c0>
 800a608:	d8802215 	stw	r2,136(sp)
 800a60c:	002b883a 	mov	r21,zero
 800a610:	9d04b03a 	or	r2,r19,r20
 800a614:	103f911e 	bne	r2,zero,800a45c <__alt_data_end+0xfc00a45c>
 800a618:	00800044 	movi	r2,1
 800a61c:	10803fcc 	andi	r2,r2,255
 800a620:	00c00044 	movi	r3,1
 800a624:	10c05f26 	beq	r2,r3,800a7a4 <___vfiprintf_internal_r+0xb44>
 800a628:	00c00084 	movi	r3,2
 800a62c:	10ffe31e 	bne	r2,r3,800a5bc <__alt_data_end+0xfc00a5bc>
 800a630:	0027883a 	mov	r19,zero
 800a634:	0029883a 	mov	r20,zero
 800a638:	00015106 	br	800ab80 <___vfiprintf_internal_r+0xf20>
 800a63c:	9cc03fcc 	andi	r19,r19,255
 800a640:	b811883a 	mov	r8,r23
 800a644:	9802c01e 	bne	r19,zero,800b148 <___vfiprintf_internal_r+0x14e8>
 800a648:	01420074 	movhi	r5,2049
 800a64c:	29485f04 	addi	r5,r5,8572
 800a650:	d9402615 	stw	r5,152(sp)
 800a654:	8880080c 	andi	r2,r17,32
 800a658:	103f541e 	bne	r2,zero,800a3ac <__alt_data_end+0xfc00a3ac>
 800a65c:	8880040c 	andi	r2,r17,16
 800a660:	1001f226 	beq	r2,zero,800ae2c <___vfiprintf_internal_r+0x11cc>
 800a664:	d9402217 	ldw	r5,136(sp)
 800a668:	0029883a 	mov	r20,zero
 800a66c:	2cc00017 	ldw	r19,0(r5)
 800a670:	29400104 	addi	r5,r5,4
 800a674:	d9402215 	stw	r5,136(sp)
 800a678:	003f5106 	br	800a3c0 <__alt_data_end+0xfc00a3c0>
 800a67c:	d8c02217 	ldw	r3,136(sp)
 800a680:	b811883a 	mov	r8,r23
 800a684:	d8001d85 	stb	zero,118(sp)
 800a688:	1dc00017 	ldw	r23,0(r3)
 800a68c:	1f000104 	addi	fp,r3,4
 800a690:	b8025926 	beq	r23,zero,800aff8 <___vfiprintf_internal_r+0x1398>
 800a694:	80023316 	blt	r16,zero,800af64 <___vfiprintf_internal_r+0x1304>
 800a698:	800d883a 	mov	r6,r16
 800a69c:	000b883a 	mov	r5,zero
 800a6a0:	b809883a 	mov	r4,r23
 800a6a4:	da002a15 	stw	r8,168(sp)
 800a6a8:	8007da00 	call	8007da0 <memchr>
 800a6ac:	da002a17 	ldw	r8,168(sp)
 800a6b0:	10026826 	beq	r2,zero,800b054 <___vfiprintf_internal_r+0x13f4>
 800a6b4:	15e9c83a 	sub	r20,r2,r23
 800a6b8:	dd401d83 	ldbu	r21,118(sp)
 800a6bc:	df002215 	stw	fp,136(sp)
 800a6c0:	0021883a 	mov	r16,zero
 800a6c4:	003e6906 	br	800a06c <__alt_data_end+0xfc00a06c>
 800a6c8:	9cc03fcc 	andi	r19,r19,255
 800a6cc:	b811883a 	mov	r8,r23
 800a6d0:	983fc126 	beq	r19,zero,800a5d8 <__alt_data_end+0xfc00a5d8>
 800a6d4:	d8c02303 	ldbu	r3,140(sp)
 800a6d8:	d8c01d85 	stb	r3,118(sp)
 800a6dc:	003fbe06 	br	800a5d8 <__alt_data_end+0xfc00a5d8>
 800a6e0:	d9002217 	ldw	r4,136(sp)
 800a6e4:	d9402217 	ldw	r5,136(sp)
 800a6e8:	21000017 	ldw	r4,0(r4)
 800a6ec:	28800104 	addi	r2,r5,4
 800a6f0:	d9002515 	stw	r4,148(sp)
 800a6f4:	203e3d16 	blt	r4,zero,8009fec <__alt_data_end+0xfc009fec>
 800a6f8:	d8802215 	stw	r2,136(sp)
 800a6fc:	b0c00007 	ldb	r3,0(r22)
 800a700:	003db406 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a704:	00c00ac4 	movi	r3,43
 800a708:	d8c02305 	stb	r3,140(sp)
 800a70c:	04c00044 	movi	r19,1
 800a710:	b0c00007 	ldb	r3,0(r22)
 800a714:	003daf06 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a718:	b0c00007 	ldb	r3,0(r22)
 800a71c:	01000a84 	movi	r4,42
 800a720:	b4000044 	addi	r16,r22,1
 800a724:	19025e26 	beq	r3,r4,800b0a0 <___vfiprintf_internal_r+0x1440>
 800a728:	1f3ff404 	addi	fp,r3,-48
 800a72c:	0009883a 	mov	r4,zero
 800a730:	af025236 	bltu	r21,fp,800b07c <___vfiprintf_internal_r+0x141c>
 800a734:	01400284 	movi	r5,10
 800a738:	800c9040 	call	800c904 <__mulsi3>
 800a73c:	80c00007 	ldb	r3,0(r16)
 800a740:	1709883a 	add	r4,r2,fp
 800a744:	85800044 	addi	r22,r16,1
 800a748:	1f3ff404 	addi	fp,r3,-48
 800a74c:	b021883a 	mov	r16,r22
 800a750:	af3ff82e 	bgeu	r21,fp,800a734 <__alt_data_end+0xfc00a734>
 800a754:	2021883a 	mov	r16,r4
 800a758:	203d9f0e 	bge	r4,zero,8009dd8 <__alt_data_end+0xfc009dd8>
 800a75c:	043fffc4 	movi	r16,-1
 800a760:	003d9d06 	br	8009dd8 <__alt_data_end+0xfc009dd8>
 800a764:	8c401014 	ori	r17,r17,64
 800a768:	b0c00007 	ldb	r3,0(r22)
 800a76c:	003d9906 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a770:	d9002217 	ldw	r4,136(sp)
 800a774:	d8001d85 	stb	zero,118(sp)
 800a778:	20c00204 	addi	r3,r4,8
 800a77c:	24c00017 	ldw	r19,0(r4)
 800a780:	25000117 	ldw	r20,4(r4)
 800a784:	8001e716 	blt	r16,zero,800af24 <___vfiprintf_internal_r+0x12c4>
 800a788:	013fdfc4 	movi	r4,-129
 800a78c:	9d04b03a 	or	r2,r19,r20
 800a790:	d8c02215 	stw	r3,136(sp)
 800a794:	8922703a 	and	r17,r17,r4
 800a798:	002b883a 	mov	r21,zero
 800a79c:	103f2f1e 	bne	r2,zero,800a45c <__alt_data_end+0xfc00a45c>
 800a7a0:	803e2f26 	beq	r16,zero,800a060 <__alt_data_end+0xfc00a060>
 800a7a4:	0027883a 	mov	r19,zero
 800a7a8:	9cc00c04 	addi	r19,r19,48
 800a7ac:	dcc019c5 	stb	r19,103(sp)
 800a7b0:	dd002817 	ldw	r20,160(sp)
 800a7b4:	ddc019c4 	addi	r23,sp,103
 800a7b8:	003e2c06 	br	800a06c <__alt_data_end+0xfc00a06c>
 800a7bc:	9cc03fcc 	andi	r19,r19,255
 800a7c0:	b811883a 	mov	r8,r23
 800a7c4:	9802571e 	bne	r19,zero,800b124 <___vfiprintf_internal_r+0x14c4>
 800a7c8:	18005726 	beq	r3,zero,800a928 <___vfiprintf_internal_r+0xcc8>
 800a7cc:	04c00044 	movi	r19,1
 800a7d0:	d8c01005 	stb	r3,64(sp)
 800a7d4:	d8001d85 	stb	zero,118(sp)
 800a7d8:	9829883a 	mov	r20,r19
 800a7dc:	ddc01004 	addi	r23,sp,64
 800a7e0:	003f0a06 	br	800a40c <__alt_data_end+0xfc00a40c>
 800a7e4:	d9402017 	ldw	r5,128(sp)
 800a7e8:	d9002117 	ldw	r4,132(sp)
 800a7ec:	d9801a04 	addi	r6,sp,104
 800a7f0:	da802a15 	stw	r10,168(sp)
 800a7f4:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800a7f8:	da802a17 	ldw	r10,168(sp)
 800a7fc:	1000501e 	bne	r2,zero,800a940 <___vfiprintf_internal_r+0xce0>
 800a800:	d9801b17 	ldw	r6,108(sp)
 800a804:	d8801c17 	ldw	r2,112(sp)
 800a808:	d811883a 	mov	r8,sp
 800a80c:	31000044 	addi	r4,r6,1
 800a810:	003e3606 	br	800a0ec <__alt_data_end+0xfc00a0ec>
 800a814:	d9001b17 	ldw	r4,108(sp)
 800a818:	d8801c17 	ldw	r2,112(sp)
 800a81c:	21400044 	addi	r5,r4,1
 800a820:	d9801d87 	ldb	r6,118(sp)
 800a824:	303e5226 	beq	r6,zero,800a170 <__alt_data_end+0xfc00a170>
 800a828:	01800044 	movi	r6,1
 800a82c:	d9001d84 	addi	r4,sp,118
 800a830:	1185883a 	add	r2,r2,r6
 800a834:	41000015 	stw	r4,0(r8)
 800a838:	41800115 	stw	r6,4(r8)
 800a83c:	d8801c15 	stw	r2,112(sp)
 800a840:	d9401b15 	stw	r5,108(sp)
 800a844:	010001c4 	movi	r4,7
 800a848:	2140b00e 	bge	r4,r5,800ab0c <___vfiprintf_internal_r+0xeac>
 800a84c:	1000f61e 	bne	r2,zero,800ac28 <___vfiprintf_internal_r+0xfc8>
 800a850:	3800b31e 	bne	r7,zero,800ab20 <___vfiprintf_internal_r+0xec0>
 800a854:	0009883a 	mov	r4,zero
 800a858:	300b883a 	mov	r5,r6
 800a85c:	d811883a 	mov	r8,sp
 800a860:	01802004 	movi	r6,128
 800a864:	19be5226 	beq	r3,r6,800a1b0 <__alt_data_end+0xfc00a1b0>
 800a868:	8521c83a 	sub	r16,r16,r20
 800a86c:	043e790e 	bge	zero,r16,800a254 <__alt_data_end+0xfc00a254>
 800a870:	05400404 	movi	r21,16
 800a874:	ac01b00e 	bge	r21,r16,800af38 <___vfiprintf_internal_r+0x12d8>
 800a878:	01420074 	movhi	r5,2049
 800a87c:	2948c504 	addi	r5,r5,8980
 800a880:	d9402315 	stw	r5,140(sp)
 800a884:	070001c4 	movi	fp,7
 800a888:	00000506 	br	800a8a0 <___vfiprintf_internal_r+0xc40>
 800a88c:	21400084 	addi	r5,r4,2
 800a890:	42000204 	addi	r8,r8,8
 800a894:	1809883a 	mov	r4,r3
 800a898:	843ffc04 	addi	r16,r16,-16
 800a89c:	ac000d0e 	bge	r21,r16,800a8d4 <___vfiprintf_internal_r+0xc74>
 800a8a0:	10800404 	addi	r2,r2,16
 800a8a4:	20c00044 	addi	r3,r4,1
 800a8a8:	44800015 	stw	r18,0(r8)
 800a8ac:	45400115 	stw	r21,4(r8)
 800a8b0:	d8801c15 	stw	r2,112(sp)
 800a8b4:	d8c01b15 	stw	r3,108(sp)
 800a8b8:	e0fff40e 	bge	fp,r3,800a88c <__alt_data_end+0xfc00a88c>
 800a8bc:	1000101e 	bne	r2,zero,800a900 <___vfiprintf_internal_r+0xca0>
 800a8c0:	843ffc04 	addi	r16,r16,-16
 800a8c4:	01400044 	movi	r5,1
 800a8c8:	0009883a 	mov	r4,zero
 800a8cc:	d811883a 	mov	r8,sp
 800a8d0:	ac3ff316 	blt	r21,r16,800a8a0 <__alt_data_end+0xfc00a8a0>
 800a8d4:	d8c02317 	ldw	r3,140(sp)
 800a8d8:	1405883a 	add	r2,r2,r16
 800a8dc:	44000115 	stw	r16,4(r8)
 800a8e0:	40c00015 	stw	r3,0(r8)
 800a8e4:	d8801c15 	stw	r2,112(sp)
 800a8e8:	d9401b15 	stw	r5,108(sp)
 800a8ec:	00c001c4 	movi	r3,7
 800a8f0:	19401916 	blt	r3,r5,800a958 <___vfiprintf_internal_r+0xcf8>
 800a8f4:	42000204 	addi	r8,r8,8
 800a8f8:	29400044 	addi	r5,r5,1
 800a8fc:	003e5506 	br	800a254 <__alt_data_end+0xfc00a254>
 800a900:	d9402017 	ldw	r5,128(sp)
 800a904:	d9002117 	ldw	r4,132(sp)
 800a908:	d9801a04 	addi	r6,sp,104
 800a90c:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800a910:	10000b1e 	bne	r2,zero,800a940 <___vfiprintf_internal_r+0xce0>
 800a914:	d9001b17 	ldw	r4,108(sp)
 800a918:	d8801c17 	ldw	r2,112(sp)
 800a91c:	d811883a 	mov	r8,sp
 800a920:	21400044 	addi	r5,r4,1
 800a924:	003fdc06 	br	800a898 <__alt_data_end+0xfc00a898>
 800a928:	d8801c17 	ldw	r2,112(sp)
 800a92c:	10000426 	beq	r2,zero,800a940 <___vfiprintf_internal_r+0xce0>
 800a930:	d9402017 	ldw	r5,128(sp)
 800a934:	d9002117 	ldw	r4,132(sp)
 800a938:	d9801a04 	addi	r6,sp,104
 800a93c:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800a940:	d9402017 	ldw	r5,128(sp)
 800a944:	2880030b 	ldhu	r2,12(r5)
 800a948:	1080100c 	andi	r2,r2,64
 800a94c:	10014d1e 	bne	r2,zero,800ae84 <___vfiprintf_internal_r+0x1224>
 800a950:	d8802417 	ldw	r2,144(sp)
 800a954:	003d9706 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a958:	1000d21e 	bne	r2,zero,800aca4 <___vfiprintf_internal_r+0x1044>
 800a95c:	00c00044 	movi	r3,1
 800a960:	a005883a 	mov	r2,r20
 800a964:	ddc00015 	stw	r23,0(sp)
 800a968:	dd000115 	stw	r20,4(sp)
 800a96c:	dd001c15 	stw	r20,112(sp)
 800a970:	d8c01b15 	stw	r3,108(sp)
 800a974:	d811883a 	mov	r8,sp
 800a978:	42000204 	addi	r8,r8,8
 800a97c:	8c40010c 	andi	r17,r17,4
 800a980:	88004026 	beq	r17,zero,800aa84 <___vfiprintf_internal_r+0xe24>
 800a984:	d9002517 	ldw	r4,148(sp)
 800a988:	24e3c83a 	sub	r17,r4,r19
 800a98c:	04403d0e 	bge	zero,r17,800aa84 <___vfiprintf_internal_r+0xe24>
 800a990:	04000404 	movi	r16,16
 800a994:	8441a90e 	bge	r16,r17,800b03c <___vfiprintf_internal_r+0x13dc>
 800a998:	00c20074 	movhi	r3,2049
 800a99c:	18c8c904 	addi	r3,r3,8996
 800a9a0:	d9001b17 	ldw	r4,108(sp)
 800a9a4:	d8c02315 	stw	r3,140(sp)
 800a9a8:	050001c4 	movi	r20,7
 800a9ac:	dd402117 	ldw	r21,132(sp)
 800a9b0:	ddc02017 	ldw	r23,128(sp)
 800a9b4:	00000506 	br	800a9cc <___vfiprintf_internal_r+0xd6c>
 800a9b8:	21400084 	addi	r5,r4,2
 800a9bc:	42000204 	addi	r8,r8,8
 800a9c0:	1809883a 	mov	r4,r3
 800a9c4:	8c7ffc04 	addi	r17,r17,-16
 800a9c8:	84400f0e 	bge	r16,r17,800aa08 <___vfiprintf_internal_r+0xda8>
 800a9cc:	01420074 	movhi	r5,2049
 800a9d0:	10800404 	addi	r2,r2,16
 800a9d4:	20c00044 	addi	r3,r4,1
 800a9d8:	2948c904 	addi	r5,r5,8996
 800a9dc:	41400015 	stw	r5,0(r8)
 800a9e0:	44000115 	stw	r16,4(r8)
 800a9e4:	d8801c15 	stw	r2,112(sp)
 800a9e8:	d8c01b15 	stw	r3,108(sp)
 800a9ec:	a0fff20e 	bge	r20,r3,800a9b8 <__alt_data_end+0xfc00a9b8>
 800a9f0:	1000141e 	bne	r2,zero,800aa44 <___vfiprintf_internal_r+0xde4>
 800a9f4:	8c7ffc04 	addi	r17,r17,-16
 800a9f8:	01400044 	movi	r5,1
 800a9fc:	0009883a 	mov	r4,zero
 800aa00:	d811883a 	mov	r8,sp
 800aa04:	847ff116 	blt	r16,r17,800a9cc <__alt_data_end+0xfc00a9cc>
 800aa08:	d8c02317 	ldw	r3,140(sp)
 800aa0c:	1445883a 	add	r2,r2,r17
 800aa10:	44400115 	stw	r17,4(r8)
 800aa14:	40c00015 	stw	r3,0(r8)
 800aa18:	d8801c15 	stw	r2,112(sp)
 800aa1c:	d9401b15 	stw	r5,108(sp)
 800aa20:	00c001c4 	movi	r3,7
 800aa24:	1940170e 	bge	r3,r5,800aa84 <___vfiprintf_internal_r+0xe24>
 800aa28:	1000101e 	bne	r2,zero,800aa6c <___vfiprintf_internal_r+0xe0c>
 800aa2c:	d8802517 	ldw	r2,148(sp)
 800aa30:	14c11616 	blt	r2,r19,800ae8c <___vfiprintf_internal_r+0x122c>
 800aa34:	d9002417 	ldw	r4,144(sp)
 800aa38:	2089883a 	add	r4,r4,r2
 800aa3c:	d9002415 	stw	r4,144(sp)
 800aa40:	003e1806 	br	800a2a4 <__alt_data_end+0xfc00a2a4>
 800aa44:	d9801a04 	addi	r6,sp,104
 800aa48:	b80b883a 	mov	r5,r23
 800aa4c:	a809883a 	mov	r4,r21
 800aa50:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800aa54:	103fba1e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800aa58:	d9001b17 	ldw	r4,108(sp)
 800aa5c:	d8801c17 	ldw	r2,112(sp)
 800aa60:	d811883a 	mov	r8,sp
 800aa64:	21400044 	addi	r5,r4,1
 800aa68:	003fd606 	br	800a9c4 <__alt_data_end+0xfc00a9c4>
 800aa6c:	d9402017 	ldw	r5,128(sp)
 800aa70:	d9002117 	ldw	r4,132(sp)
 800aa74:	d9801a04 	addi	r6,sp,104
 800aa78:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800aa7c:	103fb01e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800aa80:	d8801c17 	ldw	r2,112(sp)
 800aa84:	d8c02517 	ldw	r3,148(sp)
 800aa88:	1cc0010e 	bge	r3,r19,800aa90 <___vfiprintf_internal_r+0xe30>
 800aa8c:	9807883a 	mov	r3,r19
 800aa90:	d9002417 	ldw	r4,144(sp)
 800aa94:	20c9883a 	add	r4,r4,r3
 800aa98:	d9002415 	stw	r4,144(sp)
 800aa9c:	103e0126 	beq	r2,zero,800a2a4 <__alt_data_end+0xfc00a2a4>
 800aaa0:	d9402017 	ldw	r5,128(sp)
 800aaa4:	d9002117 	ldw	r4,132(sp)
 800aaa8:	d9801a04 	addi	r6,sp,104
 800aaac:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800aab0:	103dfc26 	beq	r2,zero,800a2a4 <__alt_data_end+0xfc00a2a4>
 800aab4:	003fa206 	br	800a940 <__alt_data_end+0xfc00a940>
 800aab8:	d9402017 	ldw	r5,128(sp)
 800aabc:	d9002117 	ldw	r4,132(sp)
 800aac0:	d9801a04 	addi	r6,sp,104
 800aac4:	d9c02b15 	stw	r7,172(sp)
 800aac8:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800aacc:	d9c02b17 	ldw	r7,172(sp)
 800aad0:	103f9b1e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800aad4:	d9001b17 	ldw	r4,108(sp)
 800aad8:	d8801c17 	ldw	r2,112(sp)
 800aadc:	d811883a 	mov	r8,sp
 800aae0:	21800044 	addi	r6,r4,1
 800aae4:	003dbf06 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800aae8:	1000d81e 	bne	r2,zero,800ae4c <___vfiprintf_internal_r+0x11ec>
 800aaec:	d9001d87 	ldb	r4,118(sp)
 800aaf0:	20000a26 	beq	r4,zero,800ab1c <___vfiprintf_internal_r+0xebc>
 800aaf4:	00800044 	movi	r2,1
 800aaf8:	d9001d84 	addi	r4,sp,118
 800aafc:	100b883a 	mov	r5,r2
 800ab00:	d9000015 	stw	r4,0(sp)
 800ab04:	d8800115 	stw	r2,4(sp)
 800ab08:	d811883a 	mov	r8,sp
 800ab0c:	2809883a 	mov	r4,r5
 800ab10:	42000204 	addi	r8,r8,8
 800ab14:	29400044 	addi	r5,r5,1
 800ab18:	003d9506 	br	800a170 <__alt_data_end+0xfc00a170>
 800ab1c:	3800fd26 	beq	r7,zero,800af14 <___vfiprintf_internal_r+0x12b4>
 800ab20:	00800084 	movi	r2,2
 800ab24:	d9001d04 	addi	r4,sp,116
 800ab28:	d9000015 	stw	r4,0(sp)
 800ab2c:	d8800115 	stw	r2,4(sp)
 800ab30:	01400044 	movi	r5,1
 800ab34:	d811883a 	mov	r8,sp
 800ab38:	2809883a 	mov	r4,r5
 800ab3c:	42000204 	addi	r8,r8,8
 800ab40:	29400044 	addi	r5,r5,1
 800ab44:	003f4606 	br	800a860 <__alt_data_end+0xfc00a860>
 800ab48:	d8802517 	ldw	r2,148(sp)
 800ab4c:	14c0010e 	bge	r2,r19,800ab54 <___vfiprintf_internal_r+0xef4>
 800ab50:	9805883a 	mov	r2,r19
 800ab54:	d9402417 	ldw	r5,144(sp)
 800ab58:	288b883a 	add	r5,r5,r2
 800ab5c:	d9402415 	stw	r5,144(sp)
 800ab60:	003dd006 	br	800a2a4 <__alt_data_end+0xfc00a2a4>
 800ab64:	d8001d85 	stb	zero,118(sp)
 800ab68:	80005d16 	blt	r16,zero,800ace0 <___vfiprintf_internal_r+0x1080>
 800ab6c:	00ffdfc4 	movi	r3,-129
 800ab70:	9d04b03a 	or	r2,r19,r20
 800ab74:	88e2703a 	and	r17,r17,r3
 800ab78:	103d3726 	beq	r2,zero,800a058 <__alt_data_end+0xfc00a058>
 800ab7c:	002b883a 	mov	r21,zero
 800ab80:	d9002617 	ldw	r4,152(sp)
 800ab84:	ddc01a04 	addi	r23,sp,104
 800ab88:	988003cc 	andi	r2,r19,15
 800ab8c:	a006973a 	slli	r3,r20,28
 800ab90:	2085883a 	add	r2,r4,r2
 800ab94:	9826d13a 	srli	r19,r19,4
 800ab98:	10800003 	ldbu	r2,0(r2)
 800ab9c:	a028d13a 	srli	r20,r20,4
 800aba0:	bdffffc4 	addi	r23,r23,-1
 800aba4:	1ce6b03a 	or	r19,r3,r19
 800aba8:	b8800005 	stb	r2,0(r23)
 800abac:	9d04b03a 	or	r2,r19,r20
 800abb0:	103ff51e 	bne	r2,zero,800ab88 <__alt_data_end+0xfc00ab88>
 800abb4:	d8801e17 	ldw	r2,120(sp)
 800abb8:	15e9c83a 	sub	r20,r2,r23
 800abbc:	003d2b06 	br	800a06c <__alt_data_end+0xfc00a06c>
 800abc0:	d9402017 	ldw	r5,128(sp)
 800abc4:	d9002117 	ldw	r4,132(sp)
 800abc8:	d9801a04 	addi	r6,sp,104
 800abcc:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800abd0:	103f5b1e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800abd4:	d8801c17 	ldw	r2,112(sp)
 800abd8:	d811883a 	mov	r8,sp
 800abdc:	003f6706 	br	800a97c <__alt_data_end+0xfc00a97c>
 800abe0:	d9402017 	ldw	r5,128(sp)
 800abe4:	d9002117 	ldw	r4,132(sp)
 800abe8:	d9801a04 	addi	r6,sp,104
 800abec:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800abf0:	103f531e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800abf4:	d811883a 	mov	r8,sp
 800abf8:	003cd906 	br	8009f60 <__alt_data_end+0xfc009f60>
 800abfc:	10803fcc 	andi	r2,r2,255
 800ac00:	1080201c 	xori	r2,r2,128
 800ac04:	10bfe004 	addi	r2,r2,-128
 800ac08:	00c00c04 	movi	r3,48
 800ac0c:	10ffe926 	beq	r2,r3,800abb4 <__alt_data_end+0xfc00abb4>
 800ac10:	b8ffffc5 	stb	r3,-1(r23)
 800ac14:	d8c01e17 	ldw	r3,120(sp)
 800ac18:	b8bfffc4 	addi	r2,r23,-1
 800ac1c:	102f883a 	mov	r23,r2
 800ac20:	18a9c83a 	sub	r20,r3,r2
 800ac24:	003d1106 	br	800a06c <__alt_data_end+0xfc00a06c>
 800ac28:	d9402017 	ldw	r5,128(sp)
 800ac2c:	d9002117 	ldw	r4,132(sp)
 800ac30:	d9801a04 	addi	r6,sp,104
 800ac34:	d8c02a15 	stw	r3,168(sp)
 800ac38:	d9c02b15 	stw	r7,172(sp)
 800ac3c:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800ac40:	d8c02a17 	ldw	r3,168(sp)
 800ac44:	d9c02b17 	ldw	r7,172(sp)
 800ac48:	103f3d1e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800ac4c:	d9001b17 	ldw	r4,108(sp)
 800ac50:	d8801c17 	ldw	r2,112(sp)
 800ac54:	d811883a 	mov	r8,sp
 800ac58:	21400044 	addi	r5,r4,1
 800ac5c:	003d4406 	br	800a170 <__alt_data_end+0xfc00a170>
 800ac60:	d9402017 	ldw	r5,128(sp)
 800ac64:	d9002117 	ldw	r4,132(sp)
 800ac68:	d9801a04 	addi	r6,sp,104
 800ac6c:	d8c02a15 	stw	r3,168(sp)
 800ac70:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800ac74:	d8c02a17 	ldw	r3,168(sp)
 800ac78:	103f311e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800ac7c:	d9001b17 	ldw	r4,108(sp)
 800ac80:	d8801c17 	ldw	r2,112(sp)
 800ac84:	d811883a 	mov	r8,sp
 800ac88:	21400044 	addi	r5,r4,1
 800ac8c:	003ef406 	br	800a860 <__alt_data_end+0xfc00a860>
 800ac90:	1000bd1e 	bne	r2,zero,800af88 <___vfiprintf_internal_r+0x1328>
 800ac94:	01400044 	movi	r5,1
 800ac98:	0009883a 	mov	r4,zero
 800ac9c:	d811883a 	mov	r8,sp
 800aca0:	003ef106 	br	800a868 <__alt_data_end+0xfc00a868>
 800aca4:	d9402017 	ldw	r5,128(sp)
 800aca8:	d9002117 	ldw	r4,132(sp)
 800acac:	d9801a04 	addi	r6,sp,104
 800acb0:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800acb4:	103f221e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800acb8:	d9401b17 	ldw	r5,108(sp)
 800acbc:	d8801c17 	ldw	r2,112(sp)
 800acc0:	d811883a 	mov	r8,sp
 800acc4:	29400044 	addi	r5,r5,1
 800acc8:	003d6206 	br	800a254 <__alt_data_end+0xfc00a254>
 800accc:	01420074 	movhi	r5,2049
 800acd0:	29486404 	addi	r5,r5,8592
 800acd4:	d9402615 	stw	r5,152(sp)
 800acd8:	d8c02215 	stw	r3,136(sp)
 800acdc:	1023883a 	mov	r17,r2
 800ace0:	9d04b03a 	or	r2,r19,r20
 800ace4:	103fa51e 	bne	r2,zero,800ab7c <__alt_data_end+0xfc00ab7c>
 800ace8:	002b883a 	mov	r21,zero
 800acec:	00800084 	movi	r2,2
 800acf0:	003e4a06 	br	800a61c <__alt_data_end+0xfc00a61c>
 800acf4:	01420074 	movhi	r5,2049
 800acf8:	29486404 	addi	r5,r5,8592
 800acfc:	002b883a 	mov	r21,zero
 800ad00:	d9402615 	stw	r5,152(sp)
 800ad04:	003f9e06 	br	800ab80 <__alt_data_end+0xfc00ab80>
 800ad08:	d9402217 	ldw	r5,136(sp)
 800ad0c:	d8001d85 	stb	zero,118(sp)
 800ad10:	0029883a 	mov	r20,zero
 800ad14:	28800104 	addi	r2,r5,4
 800ad18:	2cc00017 	ldw	r19,0(r5)
 800ad1c:	803e3a16 	blt	r16,zero,800a608 <__alt_data_end+0xfc00a608>
 800ad20:	00ffdfc4 	movi	r3,-129
 800ad24:	d8802215 	stw	r2,136(sp)
 800ad28:	88e2703a 	and	r17,r17,r3
 800ad2c:	002b883a 	mov	r21,zero
 800ad30:	983e9b26 	beq	r19,zero,800a7a0 <__alt_data_end+0xfc00a7a0>
 800ad34:	00800244 	movi	r2,9
 800ad38:	14fdc936 	bltu	r2,r19,800a460 <__alt_data_end+0xfc00a460>
 800ad3c:	003e9a06 	br	800a7a8 <__alt_data_end+0xfc00a7a8>
 800ad40:	00800c04 	movi	r2,48
 800ad44:	d8c01d45 	stb	r3,117(sp)
 800ad48:	d8801d05 	stb	r2,116(sp)
 800ad4c:	d8001d85 	stb	zero,118(sp)
 800ad50:	88c00094 	ori	r3,r17,2
 800ad54:	80009c16 	blt	r16,zero,800afc8 <___vfiprintf_internal_r+0x1368>
 800ad58:	00bfdfc4 	movi	r2,-129
 800ad5c:	88a2703a 	and	r17,r17,r2
 800ad60:	8c400094 	ori	r17,r17,2
 800ad64:	002b883a 	mov	r21,zero
 800ad68:	003f8506 	br	800ab80 <__alt_data_end+0xfc00ab80>
 800ad6c:	b029883a 	mov	r20,r22
 800ad70:	003c0b06 	br	8009da0 <__alt_data_end+0xfc009da0>
 800ad74:	04e7c83a 	sub	r19,zero,r19
 800ad78:	05400b44 	movi	r21,45
 800ad7c:	9804c03a 	cmpne	r2,r19,zero
 800ad80:	0529c83a 	sub	r20,zero,r20
 800ad84:	dd401d85 	stb	r21,118(sp)
 800ad88:	a0a9c83a 	sub	r20,r20,r2
 800ad8c:	80009716 	blt	r16,zero,800afec <___vfiprintf_internal_r+0x138c>
 800ad90:	00bfdfc4 	movi	r2,-129
 800ad94:	88a2703a 	and	r17,r17,r2
 800ad98:	003db006 	br	800a45c <__alt_data_end+0xfc00a45c>
 800ad9c:	b0c00007 	ldb	r3,0(r22)
 800ada0:	003c0c06 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800ada4:	8880100c 	andi	r2,r17,64
 800ada8:	d8001d85 	stb	zero,118(sp)
 800adac:	1000461e 	bne	r2,zero,800aec8 <___vfiprintf_internal_r+0x1268>
 800adb0:	d9002217 	ldw	r4,136(sp)
 800adb4:	0029883a 	mov	r20,zero
 800adb8:	20800104 	addi	r2,r4,4
 800adbc:	24c00017 	ldw	r19,0(r4)
 800adc0:	803df80e 	bge	r16,zero,800a5a4 <__alt_data_end+0xfc00a5a4>
 800adc4:	9d06b03a 	or	r3,r19,r20
 800adc8:	d8802215 	stw	r2,136(sp)
 800adcc:	183d5e1e 	bne	r3,zero,800a348 <__alt_data_end+0xfc00a348>
 800add0:	002b883a 	mov	r21,zero
 800add4:	0005883a 	mov	r2,zero
 800add8:	003e1006 	br	800a61c <__alt_data_end+0xfc00a61c>
 800addc:	8880040c 	andi	r2,r17,16
 800ade0:	1000321e 	bne	r2,zero,800aeac <___vfiprintf_internal_r+0x124c>
 800ade4:	8c40100c 	andi	r17,r17,64
 800ade8:	88008d26 	beq	r17,zero,800b020 <___vfiprintf_internal_r+0x13c0>
 800adec:	d9402217 	ldw	r5,136(sp)
 800adf0:	d8c02417 	ldw	r3,144(sp)
 800adf4:	28800017 	ldw	r2,0(r5)
 800adf8:	29400104 	addi	r5,r5,4
 800adfc:	d9402215 	stw	r5,136(sp)
 800ae00:	10c0000d 	sth	r3,0(r2)
 800ae04:	003bca06 	br	8009d30 <__alt_data_end+0xfc009d30>
 800ae08:	8880100c 	andi	r2,r17,64
 800ae0c:	10003a26 	beq	r2,zero,800aef8 <___vfiprintf_internal_r+0x1298>
 800ae10:	d8802217 	ldw	r2,136(sp)
 800ae14:	14c0000f 	ldh	r19,0(r2)
 800ae18:	10800104 	addi	r2,r2,4
 800ae1c:	d8802215 	stw	r2,136(sp)
 800ae20:	9829d7fa 	srai	r20,r19,31
 800ae24:	a005883a 	mov	r2,r20
 800ae28:	003d8506 	br	800a440 <__alt_data_end+0xfc00a440>
 800ae2c:	8880100c 	andi	r2,r17,64
 800ae30:	10002b26 	beq	r2,zero,800aee0 <___vfiprintf_internal_r+0x1280>
 800ae34:	d8802217 	ldw	r2,136(sp)
 800ae38:	0029883a 	mov	r20,zero
 800ae3c:	14c0000b 	ldhu	r19,0(r2)
 800ae40:	10800104 	addi	r2,r2,4
 800ae44:	d8802215 	stw	r2,136(sp)
 800ae48:	003d5d06 	br	800a3c0 <__alt_data_end+0xfc00a3c0>
 800ae4c:	d9402017 	ldw	r5,128(sp)
 800ae50:	d9002117 	ldw	r4,132(sp)
 800ae54:	d9801a04 	addi	r6,sp,104
 800ae58:	d8c02a15 	stw	r3,168(sp)
 800ae5c:	d9c02b15 	stw	r7,172(sp)
 800ae60:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800ae64:	d8c02a17 	ldw	r3,168(sp)
 800ae68:	d9c02b17 	ldw	r7,172(sp)
 800ae6c:	103eb41e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800ae70:	d9001b17 	ldw	r4,108(sp)
 800ae74:	d8801c17 	ldw	r2,112(sp)
 800ae78:	d811883a 	mov	r8,sp
 800ae7c:	21400044 	addi	r5,r4,1
 800ae80:	003e6706 	br	800a820 <__alt_data_end+0xfc00a820>
 800ae84:	00bfffc4 	movi	r2,-1
 800ae88:	003c4a06 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800ae8c:	9805883a 	mov	r2,r19
 800ae90:	003ee806 	br	800aa34 <__alt_data_end+0xfc00aa34>
 800ae94:	d8c02217 	ldw	r3,136(sp)
 800ae98:	0029883a 	mov	r20,zero
 800ae9c:	18800104 	addi	r2,r3,4
 800aea0:	1cc0000b 	ldhu	r19,0(r3)
 800aea4:	803f9e0e 	bge	r16,zero,800ad20 <__alt_data_end+0xfc00ad20>
 800aea8:	003dd706 	br	800a608 <__alt_data_end+0xfc00a608>
 800aeac:	d8c02217 	ldw	r3,136(sp)
 800aeb0:	d9002417 	ldw	r4,144(sp)
 800aeb4:	18800017 	ldw	r2,0(r3)
 800aeb8:	18c00104 	addi	r3,r3,4
 800aebc:	d8c02215 	stw	r3,136(sp)
 800aec0:	11000015 	stw	r4,0(r2)
 800aec4:	003b9a06 	br	8009d30 <__alt_data_end+0xfc009d30>
 800aec8:	d8c02217 	ldw	r3,136(sp)
 800aecc:	0029883a 	mov	r20,zero
 800aed0:	18800104 	addi	r2,r3,4
 800aed4:	1cc0000b 	ldhu	r19,0(r3)
 800aed8:	803db20e 	bge	r16,zero,800a5a4 <__alt_data_end+0xfc00a5a4>
 800aedc:	003fb906 	br	800adc4 <__alt_data_end+0xfc00adc4>
 800aee0:	d9002217 	ldw	r4,136(sp)
 800aee4:	0029883a 	mov	r20,zero
 800aee8:	24c00017 	ldw	r19,0(r4)
 800aeec:	21000104 	addi	r4,r4,4
 800aef0:	d9002215 	stw	r4,136(sp)
 800aef4:	003d3206 	br	800a3c0 <__alt_data_end+0xfc00a3c0>
 800aef8:	d8c02217 	ldw	r3,136(sp)
 800aefc:	1cc00017 	ldw	r19,0(r3)
 800af00:	18c00104 	addi	r3,r3,4
 800af04:	d8c02215 	stw	r3,136(sp)
 800af08:	9829d7fa 	srai	r20,r19,31
 800af0c:	a005883a 	mov	r2,r20
 800af10:	003d4b06 	br	800a440 <__alt_data_end+0xfc00a440>
 800af14:	0009883a 	mov	r4,zero
 800af18:	01400044 	movi	r5,1
 800af1c:	d811883a 	mov	r8,sp
 800af20:	003e4f06 	br	800a860 <__alt_data_end+0xfc00a860>
 800af24:	d8c02215 	stw	r3,136(sp)
 800af28:	002b883a 	mov	r21,zero
 800af2c:	003db806 	br	800a610 <__alt_data_end+0xfc00a610>
 800af30:	d811883a 	mov	r8,sp
 800af34:	003e9606 	br	800a990 <__alt_data_end+0xfc00a990>
 800af38:	01020074 	movhi	r4,2049
 800af3c:	2108c504 	addi	r4,r4,8980
 800af40:	d9002315 	stw	r4,140(sp)
 800af44:	003e6306 	br	800a8d4 <__alt_data_end+0xfc00a8d4>
 800af48:	b0c00043 	ldbu	r3,1(r22)
 800af4c:	8c400814 	ori	r17,r17,32
 800af50:	b5800044 	addi	r22,r22,1
 800af54:	18c03fcc 	andi	r3,r3,255
 800af58:	18c0201c 	xori	r3,r3,128
 800af5c:	18ffe004 	addi	r3,r3,-128
 800af60:	003b9c06 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800af64:	b809883a 	mov	r4,r23
 800af68:	da002a15 	stw	r8,168(sp)
 800af6c:	80023d00 	call	80023d0 <strlen>
 800af70:	1029883a 	mov	r20,r2
 800af74:	dd401d83 	ldbu	r21,118(sp)
 800af78:	df002215 	stw	fp,136(sp)
 800af7c:	0021883a 	mov	r16,zero
 800af80:	da002a17 	ldw	r8,168(sp)
 800af84:	003c3906 	br	800a06c <__alt_data_end+0xfc00a06c>
 800af88:	d9402017 	ldw	r5,128(sp)
 800af8c:	d9002117 	ldw	r4,132(sp)
 800af90:	d9801a04 	addi	r6,sp,104
 800af94:	8009b4c0 	call	8009b4c <__sprint_r.part.0>
 800af98:	103e691e 	bne	r2,zero,800a940 <__alt_data_end+0xfc00a940>
 800af9c:	d9001b17 	ldw	r4,108(sp)
 800afa0:	d8801c17 	ldw	r2,112(sp)
 800afa4:	d811883a 	mov	r8,sp
 800afa8:	21400044 	addi	r5,r4,1
 800afac:	003e2e06 	br	800a868 <__alt_data_end+0xfc00a868>
 800afb0:	01020074 	movhi	r4,2049
 800afb4:	2108c904 	addi	r4,r4,8996
 800afb8:	d9002315 	stw	r4,140(sp)
 800afbc:	d9001b17 	ldw	r4,108(sp)
 800afc0:	21000044 	addi	r4,r4,1
 800afc4:	003c5e06 	br	800a140 <__alt_data_end+0xfc00a140>
 800afc8:	002b883a 	mov	r21,zero
 800afcc:	00800084 	movi	r2,2
 800afd0:	10803fcc 	andi	r2,r2,255
 800afd4:	01000044 	movi	r4,1
 800afd8:	11002b26 	beq	r2,r4,800b088 <___vfiprintf_internal_r+0x1428>
 800afdc:	01000084 	movi	r4,2
 800afe0:	11002b1e 	bne	r2,r4,800b090 <___vfiprintf_internal_r+0x1430>
 800afe4:	1823883a 	mov	r17,r3
 800afe8:	003ee506 	br	800ab80 <__alt_data_end+0xfc00ab80>
 800afec:	8807883a 	mov	r3,r17
 800aff0:	00800044 	movi	r2,1
 800aff4:	003ff606 	br	800afd0 <__alt_data_end+0xfc00afd0>
 800aff8:	00800184 	movi	r2,6
 800affc:	1400012e 	bgeu	r2,r16,800b004 <___vfiprintf_internal_r+0x13a4>
 800b000:	1021883a 	mov	r16,r2
 800b004:	8029883a 	mov	r20,r16
 800b008:	8027883a 	mov	r19,r16
 800b00c:	80002216 	blt	r16,zero,800b098 <___vfiprintf_internal_r+0x1438>
 800b010:	05c20074 	movhi	r23,2049
 800b014:	df002215 	stw	fp,136(sp)
 800b018:	bdc86904 	addi	r23,r23,8612
 800b01c:	003cfb06 	br	800a40c <__alt_data_end+0xfc00a40c>
 800b020:	d9002217 	ldw	r4,136(sp)
 800b024:	d9402417 	ldw	r5,144(sp)
 800b028:	20800017 	ldw	r2,0(r4)
 800b02c:	21000104 	addi	r4,r4,4
 800b030:	d9002215 	stw	r4,136(sp)
 800b034:	11400015 	stw	r5,0(r2)
 800b038:	003b3d06 	br	8009d30 <__alt_data_end+0xfc009d30>
 800b03c:	01420074 	movhi	r5,2049
 800b040:	2948c904 	addi	r5,r5,8996
 800b044:	d9402315 	stw	r5,140(sp)
 800b048:	d9401b17 	ldw	r5,108(sp)
 800b04c:	29400044 	addi	r5,r5,1
 800b050:	003e6d06 	br	800aa08 <__alt_data_end+0xfc00aa08>
 800b054:	8029883a 	mov	r20,r16
 800b058:	dd401d83 	ldbu	r21,118(sp)
 800b05c:	df002215 	stw	fp,136(sp)
 800b060:	0021883a 	mov	r16,zero
 800b064:	003c0106 	br	800a06c <__alt_data_end+0xfc00a06c>
 800b068:	00c20074 	movhi	r3,2049
 800b06c:	18c8c504 	addi	r3,r3,8980
 800b070:	d8c02315 	stw	r3,140(sp)
 800b074:	280d883a 	mov	r6,r5
 800b078:	003c6906 	br	800a220 <__alt_data_end+0xfc00a220>
 800b07c:	802d883a 	mov	r22,r16
 800b080:	0021883a 	mov	r16,zero
 800b084:	003b5406 	br	8009dd8 <__alt_data_end+0xfc009dd8>
 800b088:	1823883a 	mov	r17,r3
 800b08c:	003cf306 	br	800a45c <__alt_data_end+0xfc00a45c>
 800b090:	1823883a 	mov	r17,r3
 800b094:	003cad06 	br	800a34c <__alt_data_end+0xfc00a34c>
 800b098:	0027883a 	mov	r19,zero
 800b09c:	003fdc06 	br	800b010 <__alt_data_end+0xfc00b010>
 800b0a0:	d9402217 	ldw	r5,136(sp)
 800b0a4:	8005883a 	mov	r2,r16
 800b0a8:	b0c00043 	ldbu	r3,1(r22)
 800b0ac:	2c000017 	ldw	r16,0(r5)
 800b0b0:	29000104 	addi	r4,r5,4
 800b0b4:	d9002215 	stw	r4,136(sp)
 800b0b8:	102d883a 	mov	r22,r2
 800b0bc:	803fa50e 	bge	r16,zero,800af54 <__alt_data_end+0xfc00af54>
 800b0c0:	18c03fcc 	andi	r3,r3,255
 800b0c4:	18c0201c 	xori	r3,r3,128
 800b0c8:	043fffc4 	movi	r16,-1
 800b0cc:	18ffe004 	addi	r3,r3,-128
 800b0d0:	003b4006 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800b0d4:	d9402303 	ldbu	r5,140(sp)
 800b0d8:	d9401d85 	stb	r5,118(sp)
 800b0dc:	003cae06 	br	800a398 <__alt_data_end+0xfc00a398>
 800b0e0:	d8c02303 	ldbu	r3,140(sp)
 800b0e4:	d8c01d85 	stb	r3,118(sp)
 800b0e8:	003d1406 	br	800a53c <__alt_data_end+0xfc00a53c>
 800b0ec:	d8c02303 	ldbu	r3,140(sp)
 800b0f0:	d8c01d85 	stb	r3,118(sp)
 800b0f4:	003cca06 	br	800a420 <__alt_data_end+0xfc00a420>
 800b0f8:	8880004c 	andi	r2,r17,1
 800b0fc:	002b883a 	mov	r21,zero
 800b100:	10000526 	beq	r2,zero,800b118 <___vfiprintf_internal_r+0x14b8>
 800b104:	00800c04 	movi	r2,48
 800b108:	d88019c5 	stb	r2,103(sp)
 800b10c:	dd002817 	ldw	r20,160(sp)
 800b110:	ddc019c4 	addi	r23,sp,103
 800b114:	003bd506 	br	800a06c <__alt_data_end+0xfc00a06c>
 800b118:	0029883a 	mov	r20,zero
 800b11c:	ddc01a04 	addi	r23,sp,104
 800b120:	003bd206 	br	800a06c <__alt_data_end+0xfc00a06c>
 800b124:	d9002303 	ldbu	r4,140(sp)
 800b128:	d9001d85 	stb	r4,118(sp)
 800b12c:	003da606 	br	800a7c8 <__alt_data_end+0xfc00a7c8>
 800b130:	d8c02303 	ldbu	r3,140(sp)
 800b134:	d8c01d85 	stb	r3,118(sp)
 800b138:	003c7606 	br	800a314 <__alt_data_end+0xfc00a314>
 800b13c:	d8c02303 	ldbu	r3,140(sp)
 800b140:	d8c01d85 	stb	r3,118(sp)
 800b144:	003c6506 	br	800a2dc <__alt_data_end+0xfc00a2dc>
 800b148:	d9002303 	ldbu	r4,140(sp)
 800b14c:	d9001d85 	stb	r4,118(sp)
 800b150:	003d3d06 	br	800a648 <__alt_data_end+0xfc00a648>
 800b154:	d8c02303 	ldbu	r3,140(sp)
 800b158:	d8c01d85 	stb	r3,118(sp)
 800b15c:	003d1d06 	br	800a5d4 <__alt_data_end+0xfc00a5d4>
 800b160:	d8c02303 	ldbu	r3,140(sp)
 800b164:	d8c01d85 	stb	r3,118(sp)
 800b168:	003d0306 	br	800a578 <__alt_data_end+0xfc00a578>

0800b16c <__vfiprintf_internal>:
 800b16c:	00820074 	movhi	r2,2049
 800b170:	108fc604 	addi	r2,r2,16152
 800b174:	300f883a 	mov	r7,r6
 800b178:	280d883a 	mov	r6,r5
 800b17c:	200b883a 	mov	r5,r4
 800b180:	11000017 	ldw	r4,0(r2)
 800b184:	8009c601 	jmpi	8009c60 <___vfiprintf_internal_r>

0800b188 <__sbprintf>:
 800b188:	2880030b 	ldhu	r2,12(r5)
 800b18c:	2ac01917 	ldw	r11,100(r5)
 800b190:	2a80038b 	ldhu	r10,14(r5)
 800b194:	2a400717 	ldw	r9,28(r5)
 800b198:	2a000917 	ldw	r8,36(r5)
 800b19c:	defee204 	addi	sp,sp,-1144
 800b1a0:	00c10004 	movi	r3,1024
 800b1a4:	dc011a15 	stw	r16,1128(sp)
 800b1a8:	10bfff4c 	andi	r2,r2,65533
 800b1ac:	2821883a 	mov	r16,r5
 800b1b0:	d8cb883a 	add	r5,sp,r3
 800b1b4:	dc811c15 	stw	r18,1136(sp)
 800b1b8:	dc411b15 	stw	r17,1132(sp)
 800b1bc:	dfc11d15 	stw	ra,1140(sp)
 800b1c0:	2025883a 	mov	r18,r4
 800b1c4:	d881030d 	sth	r2,1036(sp)
 800b1c8:	dac11915 	stw	r11,1124(sp)
 800b1cc:	da81038d 	sth	r10,1038(sp)
 800b1d0:	da410715 	stw	r9,1052(sp)
 800b1d4:	da010915 	stw	r8,1060(sp)
 800b1d8:	dec10015 	stw	sp,1024(sp)
 800b1dc:	dec10415 	stw	sp,1040(sp)
 800b1e0:	d8c10215 	stw	r3,1032(sp)
 800b1e4:	d8c10515 	stw	r3,1044(sp)
 800b1e8:	d8010615 	stw	zero,1048(sp)
 800b1ec:	8009c600 	call	8009c60 <___vfiprintf_internal_r>
 800b1f0:	1023883a 	mov	r17,r2
 800b1f4:	10000416 	blt	r2,zero,800b208 <__sbprintf+0x80>
 800b1f8:	d9410004 	addi	r5,sp,1024
 800b1fc:	9009883a 	mov	r4,r18
 800b200:	800643c0 	call	800643c <_fflush_r>
 800b204:	10000d1e 	bne	r2,zero,800b23c <__sbprintf+0xb4>
 800b208:	d881030b 	ldhu	r2,1036(sp)
 800b20c:	1080100c 	andi	r2,r2,64
 800b210:	10000326 	beq	r2,zero,800b220 <__sbprintf+0x98>
 800b214:	8080030b 	ldhu	r2,12(r16)
 800b218:	10801014 	ori	r2,r2,64
 800b21c:	8080030d 	sth	r2,12(r16)
 800b220:	8805883a 	mov	r2,r17
 800b224:	dfc11d17 	ldw	ra,1140(sp)
 800b228:	dc811c17 	ldw	r18,1136(sp)
 800b22c:	dc411b17 	ldw	r17,1132(sp)
 800b230:	dc011a17 	ldw	r16,1128(sp)
 800b234:	dec11e04 	addi	sp,sp,1144
 800b238:	f800283a 	ret
 800b23c:	047fffc4 	movi	r17,-1
 800b240:	003ff106 	br	800b208 <__alt_data_end+0xfc00b208>

0800b244 <_write_r>:
 800b244:	defffd04 	addi	sp,sp,-12
 800b248:	2805883a 	mov	r2,r5
 800b24c:	dc000015 	stw	r16,0(sp)
 800b250:	04020074 	movhi	r16,2049
 800b254:	dc400115 	stw	r17,4(sp)
 800b258:	300b883a 	mov	r5,r6
 800b25c:	84169704 	addi	r16,r16,23132
 800b260:	2023883a 	mov	r17,r4
 800b264:	380d883a 	mov	r6,r7
 800b268:	1009883a 	mov	r4,r2
 800b26c:	dfc00215 	stw	ra,8(sp)
 800b270:	80000015 	stw	zero,0(r16)
 800b274:	800fa940 	call	800fa94 <write>
 800b278:	00ffffc4 	movi	r3,-1
 800b27c:	10c00526 	beq	r2,r3,800b294 <_write_r+0x50>
 800b280:	dfc00217 	ldw	ra,8(sp)
 800b284:	dc400117 	ldw	r17,4(sp)
 800b288:	dc000017 	ldw	r16,0(sp)
 800b28c:	dec00304 	addi	sp,sp,12
 800b290:	f800283a 	ret
 800b294:	80c00017 	ldw	r3,0(r16)
 800b298:	183ff926 	beq	r3,zero,800b280 <__alt_data_end+0xfc00b280>
 800b29c:	88c00015 	stw	r3,0(r17)
 800b2a0:	003ff706 	br	800b280 <__alt_data_end+0xfc00b280>

0800b2a4 <_close_r>:
 800b2a4:	defffd04 	addi	sp,sp,-12
 800b2a8:	dc000015 	stw	r16,0(sp)
 800b2ac:	04020074 	movhi	r16,2049
 800b2b0:	dc400115 	stw	r17,4(sp)
 800b2b4:	84169704 	addi	r16,r16,23132
 800b2b8:	2023883a 	mov	r17,r4
 800b2bc:	2809883a 	mov	r4,r5
 800b2c0:	dfc00215 	stw	ra,8(sp)
 800b2c4:	80000015 	stw	zero,0(r16)
 800b2c8:	800f20c0 	call	800f20c <close>
 800b2cc:	00ffffc4 	movi	r3,-1
 800b2d0:	10c00526 	beq	r2,r3,800b2e8 <_close_r+0x44>
 800b2d4:	dfc00217 	ldw	ra,8(sp)
 800b2d8:	dc400117 	ldw	r17,4(sp)
 800b2dc:	dc000017 	ldw	r16,0(sp)
 800b2e0:	dec00304 	addi	sp,sp,12
 800b2e4:	f800283a 	ret
 800b2e8:	80c00017 	ldw	r3,0(r16)
 800b2ec:	183ff926 	beq	r3,zero,800b2d4 <__alt_data_end+0xfc00b2d4>
 800b2f0:	88c00015 	stw	r3,0(r17)
 800b2f4:	003ff706 	br	800b2d4 <__alt_data_end+0xfc00b2d4>

0800b2f8 <_calloc_r>:
 800b2f8:	defffe04 	addi	sp,sp,-8
 800b2fc:	2805883a 	mov	r2,r5
 800b300:	dc000015 	stw	r16,0(sp)
 800b304:	300b883a 	mov	r5,r6
 800b308:	2021883a 	mov	r16,r4
 800b30c:	1009883a 	mov	r4,r2
 800b310:	dfc00115 	stw	ra,4(sp)
 800b314:	800c9040 	call	800c904 <__mulsi3>
 800b318:	100b883a 	mov	r5,r2
 800b31c:	8009883a 	mov	r4,r16
 800b320:	80075940 	call	8007594 <_malloc_r>
 800b324:	10002926 	beq	r2,zero,800b3cc <_calloc_r+0xd4>
 800b328:	11bfff17 	ldw	r6,-4(r2)
 800b32c:	1021883a 	mov	r16,r2
 800b330:	00bfff04 	movi	r2,-4
 800b334:	308c703a 	and	r6,r6,r2
 800b338:	00c00904 	movi	r3,36
 800b33c:	308d883a 	add	r6,r6,r2
 800b340:	19801636 	bltu	r3,r6,800b39c <_calloc_r+0xa4>
 800b344:	008004c4 	movi	r2,19
 800b348:	11800b2e 	bgeu	r2,r6,800b378 <_calloc_r+0x80>
 800b34c:	80000015 	stw	zero,0(r16)
 800b350:	80000115 	stw	zero,4(r16)
 800b354:	008006c4 	movi	r2,27
 800b358:	11801a2e 	bgeu	r2,r6,800b3c4 <_calloc_r+0xcc>
 800b35c:	80000215 	stw	zero,8(r16)
 800b360:	80000315 	stw	zero,12(r16)
 800b364:	30c0151e 	bne	r6,r3,800b3bc <_calloc_r+0xc4>
 800b368:	80000415 	stw	zero,16(r16)
 800b36c:	80800604 	addi	r2,r16,24
 800b370:	80000515 	stw	zero,20(r16)
 800b374:	00000106 	br	800b37c <_calloc_r+0x84>
 800b378:	8005883a 	mov	r2,r16
 800b37c:	10000015 	stw	zero,0(r2)
 800b380:	10000115 	stw	zero,4(r2)
 800b384:	10000215 	stw	zero,8(r2)
 800b388:	8005883a 	mov	r2,r16
 800b38c:	dfc00117 	ldw	ra,4(sp)
 800b390:	dc000017 	ldw	r16,0(sp)
 800b394:	dec00204 	addi	sp,sp,8
 800b398:	f800283a 	ret
 800b39c:	000b883a 	mov	r5,zero
 800b3a0:	8009883a 	mov	r4,r16
 800b3a4:	80081280 	call	8008128 <memset>
 800b3a8:	8005883a 	mov	r2,r16
 800b3ac:	dfc00117 	ldw	ra,4(sp)
 800b3b0:	dc000017 	ldw	r16,0(sp)
 800b3b4:	dec00204 	addi	sp,sp,8
 800b3b8:	f800283a 	ret
 800b3bc:	80800404 	addi	r2,r16,16
 800b3c0:	003fee06 	br	800b37c <__alt_data_end+0xfc00b37c>
 800b3c4:	80800204 	addi	r2,r16,8
 800b3c8:	003fec06 	br	800b37c <__alt_data_end+0xfc00b37c>
 800b3cc:	0005883a 	mov	r2,zero
 800b3d0:	003fee06 	br	800b38c <__alt_data_end+0xfc00b38c>

0800b3d4 <_fclose_r>:
 800b3d4:	28003926 	beq	r5,zero,800b4bc <_fclose_r+0xe8>
 800b3d8:	defffc04 	addi	sp,sp,-16
 800b3dc:	dc400115 	stw	r17,4(sp)
 800b3e0:	dc000015 	stw	r16,0(sp)
 800b3e4:	dfc00315 	stw	ra,12(sp)
 800b3e8:	dc800215 	stw	r18,8(sp)
 800b3ec:	2023883a 	mov	r17,r4
 800b3f0:	2821883a 	mov	r16,r5
 800b3f4:	20000226 	beq	r4,zero,800b400 <_fclose_r+0x2c>
 800b3f8:	20800e17 	ldw	r2,56(r4)
 800b3fc:	10002726 	beq	r2,zero,800b49c <_fclose_r+0xc8>
 800b400:	8080030f 	ldh	r2,12(r16)
 800b404:	1000071e 	bne	r2,zero,800b424 <_fclose_r+0x50>
 800b408:	0005883a 	mov	r2,zero
 800b40c:	dfc00317 	ldw	ra,12(sp)
 800b410:	dc800217 	ldw	r18,8(sp)
 800b414:	dc400117 	ldw	r17,4(sp)
 800b418:	dc000017 	ldw	r16,0(sp)
 800b41c:	dec00404 	addi	sp,sp,16
 800b420:	f800283a 	ret
 800b424:	800b883a 	mov	r5,r16
 800b428:	8809883a 	mov	r4,r17
 800b42c:	80062200 	call	8006220 <__sflush_r>
 800b430:	1025883a 	mov	r18,r2
 800b434:	80800b17 	ldw	r2,44(r16)
 800b438:	10000426 	beq	r2,zero,800b44c <_fclose_r+0x78>
 800b43c:	81400717 	ldw	r5,28(r16)
 800b440:	8809883a 	mov	r4,r17
 800b444:	103ee83a 	callr	r2
 800b448:	10001616 	blt	r2,zero,800b4a4 <_fclose_r+0xd0>
 800b44c:	8080030b 	ldhu	r2,12(r16)
 800b450:	1080200c 	andi	r2,r2,128
 800b454:	1000151e 	bne	r2,zero,800b4ac <_fclose_r+0xd8>
 800b458:	81400c17 	ldw	r5,48(r16)
 800b45c:	28000526 	beq	r5,zero,800b474 <_fclose_r+0xa0>
 800b460:	80801004 	addi	r2,r16,64
 800b464:	28800226 	beq	r5,r2,800b470 <_fclose_r+0x9c>
 800b468:	8809883a 	mov	r4,r17
 800b46c:	800699c0 	call	800699c <_free_r>
 800b470:	80000c15 	stw	zero,48(r16)
 800b474:	81401117 	ldw	r5,68(r16)
 800b478:	28000326 	beq	r5,zero,800b488 <_fclose_r+0xb4>
 800b47c:	8809883a 	mov	r4,r17
 800b480:	800699c0 	call	800699c <_free_r>
 800b484:	80001115 	stw	zero,68(r16)
 800b488:	80068380 	call	8006838 <__sfp_lock_acquire>
 800b48c:	8000030d 	sth	zero,12(r16)
 800b490:	800683c0 	call	800683c <__sfp_lock_release>
 800b494:	9005883a 	mov	r2,r18
 800b498:	003fdc06 	br	800b40c <__alt_data_end+0xfc00b40c>
 800b49c:	80068280 	call	8006828 <__sinit>
 800b4a0:	003fd706 	br	800b400 <__alt_data_end+0xfc00b400>
 800b4a4:	04bfffc4 	movi	r18,-1
 800b4a8:	003fe806 	br	800b44c <__alt_data_end+0xfc00b44c>
 800b4ac:	81400417 	ldw	r5,16(r16)
 800b4b0:	8809883a 	mov	r4,r17
 800b4b4:	800699c0 	call	800699c <_free_r>
 800b4b8:	003fe706 	br	800b458 <__alt_data_end+0xfc00b458>
 800b4bc:	0005883a 	mov	r2,zero
 800b4c0:	f800283a 	ret

0800b4c4 <fclose>:
 800b4c4:	00820074 	movhi	r2,2049
 800b4c8:	108fc604 	addi	r2,r2,16152
 800b4cc:	200b883a 	mov	r5,r4
 800b4d0:	11000017 	ldw	r4,0(r2)
 800b4d4:	800b3d41 	jmpi	800b3d4 <_fclose_r>

0800b4d8 <__fputwc>:
 800b4d8:	defff804 	addi	sp,sp,-32
 800b4dc:	dcc00415 	stw	r19,16(sp)
 800b4e0:	dc800315 	stw	r18,12(sp)
 800b4e4:	dc000115 	stw	r16,4(sp)
 800b4e8:	dfc00715 	stw	ra,28(sp)
 800b4ec:	dd400615 	stw	r21,24(sp)
 800b4f0:	dd000515 	stw	r20,20(sp)
 800b4f4:	dc400215 	stw	r17,8(sp)
 800b4f8:	2027883a 	mov	r19,r4
 800b4fc:	2825883a 	mov	r18,r5
 800b500:	3021883a 	mov	r16,r6
 800b504:	80073840 	call	8007384 <__locale_mb_cur_max>
 800b508:	00c00044 	movi	r3,1
 800b50c:	10c03e26 	beq	r2,r3,800b608 <__fputwc+0x130>
 800b510:	81c01704 	addi	r7,r16,92
 800b514:	900d883a 	mov	r6,r18
 800b518:	d80b883a 	mov	r5,sp
 800b51c:	9809883a 	mov	r4,r19
 800b520:	800b9a80 	call	800b9a8 <_wcrtomb_r>
 800b524:	1029883a 	mov	r20,r2
 800b528:	00bfffc4 	movi	r2,-1
 800b52c:	a0802026 	beq	r20,r2,800b5b0 <__fputwc+0xd8>
 800b530:	d9400003 	ldbu	r5,0(sp)
 800b534:	a0001c26 	beq	r20,zero,800b5a8 <__fputwc+0xd0>
 800b538:	0023883a 	mov	r17,zero
 800b53c:	05400284 	movi	r21,10
 800b540:	00000906 	br	800b568 <__fputwc+0x90>
 800b544:	80800017 	ldw	r2,0(r16)
 800b548:	11400005 	stb	r5,0(r2)
 800b54c:	80c00017 	ldw	r3,0(r16)
 800b550:	18c00044 	addi	r3,r3,1
 800b554:	80c00015 	stw	r3,0(r16)
 800b558:	8c400044 	addi	r17,r17,1
 800b55c:	dc45883a 	add	r2,sp,r17
 800b560:	8d00112e 	bgeu	r17,r20,800b5a8 <__fputwc+0xd0>
 800b564:	11400003 	ldbu	r5,0(r2)
 800b568:	80c00217 	ldw	r3,8(r16)
 800b56c:	18ffffc4 	addi	r3,r3,-1
 800b570:	80c00215 	stw	r3,8(r16)
 800b574:	183ff30e 	bge	r3,zero,800b544 <__alt_data_end+0xfc00b544>
 800b578:	80800617 	ldw	r2,24(r16)
 800b57c:	18801916 	blt	r3,r2,800b5e4 <__fputwc+0x10c>
 800b580:	80800017 	ldw	r2,0(r16)
 800b584:	11400005 	stb	r5,0(r2)
 800b588:	80800017 	ldw	r2,0(r16)
 800b58c:	10c00003 	ldbu	r3,0(r2)
 800b590:	10800044 	addi	r2,r2,1
 800b594:	1d402326 	beq	r3,r21,800b624 <__fputwc+0x14c>
 800b598:	80800015 	stw	r2,0(r16)
 800b59c:	8c400044 	addi	r17,r17,1
 800b5a0:	dc45883a 	add	r2,sp,r17
 800b5a4:	8d3fef36 	bltu	r17,r20,800b564 <__alt_data_end+0xfc00b564>
 800b5a8:	9005883a 	mov	r2,r18
 800b5ac:	00000406 	br	800b5c0 <__fputwc+0xe8>
 800b5b0:	80c0030b 	ldhu	r3,12(r16)
 800b5b4:	a005883a 	mov	r2,r20
 800b5b8:	18c01014 	ori	r3,r3,64
 800b5bc:	80c0030d 	sth	r3,12(r16)
 800b5c0:	dfc00717 	ldw	ra,28(sp)
 800b5c4:	dd400617 	ldw	r21,24(sp)
 800b5c8:	dd000517 	ldw	r20,20(sp)
 800b5cc:	dcc00417 	ldw	r19,16(sp)
 800b5d0:	dc800317 	ldw	r18,12(sp)
 800b5d4:	dc400217 	ldw	r17,8(sp)
 800b5d8:	dc000117 	ldw	r16,4(sp)
 800b5dc:	dec00804 	addi	sp,sp,32
 800b5e0:	f800283a 	ret
 800b5e4:	800d883a 	mov	r6,r16
 800b5e8:	29403fcc 	andi	r5,r5,255
 800b5ec:	9809883a 	mov	r4,r19
 800b5f0:	800b8500 	call	800b850 <__swbuf_r>
 800b5f4:	10bfffe0 	cmpeqi	r2,r2,-1
 800b5f8:	10803fcc 	andi	r2,r2,255
 800b5fc:	103fd626 	beq	r2,zero,800b558 <__alt_data_end+0xfc00b558>
 800b600:	00bfffc4 	movi	r2,-1
 800b604:	003fee06 	br	800b5c0 <__alt_data_end+0xfc00b5c0>
 800b608:	90ffffc4 	addi	r3,r18,-1
 800b60c:	01003f84 	movi	r4,254
 800b610:	20ffbf36 	bltu	r4,r3,800b510 <__alt_data_end+0xfc00b510>
 800b614:	900b883a 	mov	r5,r18
 800b618:	dc800005 	stb	r18,0(sp)
 800b61c:	1029883a 	mov	r20,r2
 800b620:	003fc506 	br	800b538 <__alt_data_end+0xfc00b538>
 800b624:	800d883a 	mov	r6,r16
 800b628:	a80b883a 	mov	r5,r21
 800b62c:	9809883a 	mov	r4,r19
 800b630:	800b8500 	call	800b850 <__swbuf_r>
 800b634:	10bfffe0 	cmpeqi	r2,r2,-1
 800b638:	003fef06 	br	800b5f8 <__alt_data_end+0xfc00b5f8>

0800b63c <_fputwc_r>:
 800b63c:	3080030b 	ldhu	r2,12(r6)
 800b640:	10c8000c 	andi	r3,r2,8192
 800b644:	1800051e 	bne	r3,zero,800b65c <_fputwc_r+0x20>
 800b648:	30c01917 	ldw	r3,100(r6)
 800b64c:	10880014 	ori	r2,r2,8192
 800b650:	3080030d 	sth	r2,12(r6)
 800b654:	18880014 	ori	r2,r3,8192
 800b658:	30801915 	stw	r2,100(r6)
 800b65c:	800b4d81 	jmpi	800b4d8 <__fputwc>

0800b660 <fputwc>:
 800b660:	00820074 	movhi	r2,2049
 800b664:	defffc04 	addi	sp,sp,-16
 800b668:	108fc604 	addi	r2,r2,16152
 800b66c:	dc000115 	stw	r16,4(sp)
 800b670:	14000017 	ldw	r16,0(r2)
 800b674:	dc400215 	stw	r17,8(sp)
 800b678:	dfc00315 	stw	ra,12(sp)
 800b67c:	2023883a 	mov	r17,r4
 800b680:	80000226 	beq	r16,zero,800b68c <fputwc+0x2c>
 800b684:	80800e17 	ldw	r2,56(r16)
 800b688:	10001026 	beq	r2,zero,800b6cc <fputwc+0x6c>
 800b68c:	2880030b 	ldhu	r2,12(r5)
 800b690:	10c8000c 	andi	r3,r2,8192
 800b694:	1800051e 	bne	r3,zero,800b6ac <fputwc+0x4c>
 800b698:	28c01917 	ldw	r3,100(r5)
 800b69c:	10880014 	ori	r2,r2,8192
 800b6a0:	2880030d 	sth	r2,12(r5)
 800b6a4:	18880014 	ori	r2,r3,8192
 800b6a8:	28801915 	stw	r2,100(r5)
 800b6ac:	280d883a 	mov	r6,r5
 800b6b0:	8009883a 	mov	r4,r16
 800b6b4:	880b883a 	mov	r5,r17
 800b6b8:	dfc00317 	ldw	ra,12(sp)
 800b6bc:	dc400217 	ldw	r17,8(sp)
 800b6c0:	dc000117 	ldw	r16,4(sp)
 800b6c4:	dec00404 	addi	sp,sp,16
 800b6c8:	800b4d81 	jmpi	800b4d8 <__fputwc>
 800b6cc:	8009883a 	mov	r4,r16
 800b6d0:	d9400015 	stw	r5,0(sp)
 800b6d4:	80068280 	call	8006828 <__sinit>
 800b6d8:	d9400017 	ldw	r5,0(sp)
 800b6dc:	003feb06 	br	800b68c <__alt_data_end+0xfc00b68c>

0800b6e0 <_fstat_r>:
 800b6e0:	defffd04 	addi	sp,sp,-12
 800b6e4:	2805883a 	mov	r2,r5
 800b6e8:	dc000015 	stw	r16,0(sp)
 800b6ec:	04020074 	movhi	r16,2049
 800b6f0:	dc400115 	stw	r17,4(sp)
 800b6f4:	84169704 	addi	r16,r16,23132
 800b6f8:	2023883a 	mov	r17,r4
 800b6fc:	300b883a 	mov	r5,r6
 800b700:	1009883a 	mov	r4,r2
 800b704:	dfc00215 	stw	ra,8(sp)
 800b708:	80000015 	stw	zero,0(r16)
 800b70c:	800f34c0 	call	800f34c <fstat>
 800b710:	00ffffc4 	movi	r3,-1
 800b714:	10c00526 	beq	r2,r3,800b72c <_fstat_r+0x4c>
 800b718:	dfc00217 	ldw	ra,8(sp)
 800b71c:	dc400117 	ldw	r17,4(sp)
 800b720:	dc000017 	ldw	r16,0(sp)
 800b724:	dec00304 	addi	sp,sp,12
 800b728:	f800283a 	ret
 800b72c:	80c00017 	ldw	r3,0(r16)
 800b730:	183ff926 	beq	r3,zero,800b718 <__alt_data_end+0xfc00b718>
 800b734:	88c00015 	stw	r3,0(r17)
 800b738:	003ff706 	br	800b718 <__alt_data_end+0xfc00b718>

0800b73c <_isatty_r>:
 800b73c:	defffd04 	addi	sp,sp,-12
 800b740:	dc000015 	stw	r16,0(sp)
 800b744:	04020074 	movhi	r16,2049
 800b748:	dc400115 	stw	r17,4(sp)
 800b74c:	84169704 	addi	r16,r16,23132
 800b750:	2023883a 	mov	r17,r4
 800b754:	2809883a 	mov	r4,r5
 800b758:	dfc00215 	stw	ra,8(sp)
 800b75c:	80000015 	stw	zero,0(r16)
 800b760:	800f4400 	call	800f440 <isatty>
 800b764:	00ffffc4 	movi	r3,-1
 800b768:	10c00526 	beq	r2,r3,800b780 <_isatty_r+0x44>
 800b76c:	dfc00217 	ldw	ra,8(sp)
 800b770:	dc400117 	ldw	r17,4(sp)
 800b774:	dc000017 	ldw	r16,0(sp)
 800b778:	dec00304 	addi	sp,sp,12
 800b77c:	f800283a 	ret
 800b780:	80c00017 	ldw	r3,0(r16)
 800b784:	183ff926 	beq	r3,zero,800b76c <__alt_data_end+0xfc00b76c>
 800b788:	88c00015 	stw	r3,0(r17)
 800b78c:	003ff706 	br	800b76c <__alt_data_end+0xfc00b76c>

0800b790 <_lseek_r>:
 800b790:	defffd04 	addi	sp,sp,-12
 800b794:	2805883a 	mov	r2,r5
 800b798:	dc000015 	stw	r16,0(sp)
 800b79c:	04020074 	movhi	r16,2049
 800b7a0:	dc400115 	stw	r17,4(sp)
 800b7a4:	300b883a 	mov	r5,r6
 800b7a8:	84169704 	addi	r16,r16,23132
 800b7ac:	2023883a 	mov	r17,r4
 800b7b0:	380d883a 	mov	r6,r7
 800b7b4:	1009883a 	mov	r4,r2
 800b7b8:	dfc00215 	stw	ra,8(sp)
 800b7bc:	80000015 	stw	zero,0(r16)
 800b7c0:	800f6140 	call	800f614 <lseek>
 800b7c4:	00ffffc4 	movi	r3,-1
 800b7c8:	10c00526 	beq	r2,r3,800b7e0 <_lseek_r+0x50>
 800b7cc:	dfc00217 	ldw	ra,8(sp)
 800b7d0:	dc400117 	ldw	r17,4(sp)
 800b7d4:	dc000017 	ldw	r16,0(sp)
 800b7d8:	dec00304 	addi	sp,sp,12
 800b7dc:	f800283a 	ret
 800b7e0:	80c00017 	ldw	r3,0(r16)
 800b7e4:	183ff926 	beq	r3,zero,800b7cc <__alt_data_end+0xfc00b7cc>
 800b7e8:	88c00015 	stw	r3,0(r17)
 800b7ec:	003ff706 	br	800b7cc <__alt_data_end+0xfc00b7cc>

0800b7f0 <_read_r>:
 800b7f0:	defffd04 	addi	sp,sp,-12
 800b7f4:	2805883a 	mov	r2,r5
 800b7f8:	dc000015 	stw	r16,0(sp)
 800b7fc:	04020074 	movhi	r16,2049
 800b800:	dc400115 	stw	r17,4(sp)
 800b804:	300b883a 	mov	r5,r6
 800b808:	84169704 	addi	r16,r16,23132
 800b80c:	2023883a 	mov	r17,r4
 800b810:	380d883a 	mov	r6,r7
 800b814:	1009883a 	mov	r4,r2
 800b818:	dfc00215 	stw	ra,8(sp)
 800b81c:	80000015 	stw	zero,0(r16)
 800b820:	800f7f00 	call	800f7f0 <read>
 800b824:	00ffffc4 	movi	r3,-1
 800b828:	10c00526 	beq	r2,r3,800b840 <_read_r+0x50>
 800b82c:	dfc00217 	ldw	ra,8(sp)
 800b830:	dc400117 	ldw	r17,4(sp)
 800b834:	dc000017 	ldw	r16,0(sp)
 800b838:	dec00304 	addi	sp,sp,12
 800b83c:	f800283a 	ret
 800b840:	80c00017 	ldw	r3,0(r16)
 800b844:	183ff926 	beq	r3,zero,800b82c <__alt_data_end+0xfc00b82c>
 800b848:	88c00015 	stw	r3,0(r17)
 800b84c:	003ff706 	br	800b82c <__alt_data_end+0xfc00b82c>

0800b850 <__swbuf_r>:
 800b850:	defffb04 	addi	sp,sp,-20
 800b854:	dcc00315 	stw	r19,12(sp)
 800b858:	dc800215 	stw	r18,8(sp)
 800b85c:	dc000015 	stw	r16,0(sp)
 800b860:	dfc00415 	stw	ra,16(sp)
 800b864:	dc400115 	stw	r17,4(sp)
 800b868:	2025883a 	mov	r18,r4
 800b86c:	2827883a 	mov	r19,r5
 800b870:	3021883a 	mov	r16,r6
 800b874:	20000226 	beq	r4,zero,800b880 <__swbuf_r+0x30>
 800b878:	20800e17 	ldw	r2,56(r4)
 800b87c:	10004226 	beq	r2,zero,800b988 <__swbuf_r+0x138>
 800b880:	80800617 	ldw	r2,24(r16)
 800b884:	8100030b 	ldhu	r4,12(r16)
 800b888:	80800215 	stw	r2,8(r16)
 800b88c:	2080020c 	andi	r2,r4,8
 800b890:	10003626 	beq	r2,zero,800b96c <__swbuf_r+0x11c>
 800b894:	80c00417 	ldw	r3,16(r16)
 800b898:	18003426 	beq	r3,zero,800b96c <__swbuf_r+0x11c>
 800b89c:	2088000c 	andi	r2,r4,8192
 800b8a0:	9c403fcc 	andi	r17,r19,255
 800b8a4:	10001a26 	beq	r2,zero,800b910 <__swbuf_r+0xc0>
 800b8a8:	80800017 	ldw	r2,0(r16)
 800b8ac:	81000517 	ldw	r4,20(r16)
 800b8b0:	10c7c83a 	sub	r3,r2,r3
 800b8b4:	1900200e 	bge	r3,r4,800b938 <__swbuf_r+0xe8>
 800b8b8:	18c00044 	addi	r3,r3,1
 800b8bc:	81000217 	ldw	r4,8(r16)
 800b8c0:	11400044 	addi	r5,r2,1
 800b8c4:	81400015 	stw	r5,0(r16)
 800b8c8:	213fffc4 	addi	r4,r4,-1
 800b8cc:	81000215 	stw	r4,8(r16)
 800b8d0:	14c00005 	stb	r19,0(r2)
 800b8d4:	80800517 	ldw	r2,20(r16)
 800b8d8:	10c01e26 	beq	r2,r3,800b954 <__swbuf_r+0x104>
 800b8dc:	8080030b 	ldhu	r2,12(r16)
 800b8e0:	1080004c 	andi	r2,r2,1
 800b8e4:	10000226 	beq	r2,zero,800b8f0 <__swbuf_r+0xa0>
 800b8e8:	00800284 	movi	r2,10
 800b8ec:	88801926 	beq	r17,r2,800b954 <__swbuf_r+0x104>
 800b8f0:	8805883a 	mov	r2,r17
 800b8f4:	dfc00417 	ldw	ra,16(sp)
 800b8f8:	dcc00317 	ldw	r19,12(sp)
 800b8fc:	dc800217 	ldw	r18,8(sp)
 800b900:	dc400117 	ldw	r17,4(sp)
 800b904:	dc000017 	ldw	r16,0(sp)
 800b908:	dec00504 	addi	sp,sp,20
 800b90c:	f800283a 	ret
 800b910:	81401917 	ldw	r5,100(r16)
 800b914:	00b7ffc4 	movi	r2,-8193
 800b918:	21080014 	ori	r4,r4,8192
 800b91c:	2884703a 	and	r2,r5,r2
 800b920:	80801915 	stw	r2,100(r16)
 800b924:	80800017 	ldw	r2,0(r16)
 800b928:	8100030d 	sth	r4,12(r16)
 800b92c:	81000517 	ldw	r4,20(r16)
 800b930:	10c7c83a 	sub	r3,r2,r3
 800b934:	193fe016 	blt	r3,r4,800b8b8 <__alt_data_end+0xfc00b8b8>
 800b938:	800b883a 	mov	r5,r16
 800b93c:	9009883a 	mov	r4,r18
 800b940:	800643c0 	call	800643c <_fflush_r>
 800b944:	1000071e 	bne	r2,zero,800b964 <__swbuf_r+0x114>
 800b948:	80800017 	ldw	r2,0(r16)
 800b94c:	00c00044 	movi	r3,1
 800b950:	003fda06 	br	800b8bc <__alt_data_end+0xfc00b8bc>
 800b954:	800b883a 	mov	r5,r16
 800b958:	9009883a 	mov	r4,r18
 800b95c:	800643c0 	call	800643c <_fflush_r>
 800b960:	103fe326 	beq	r2,zero,800b8f0 <__alt_data_end+0xfc00b8f0>
 800b964:	00bfffc4 	movi	r2,-1
 800b968:	003fe206 	br	800b8f4 <__alt_data_end+0xfc00b8f4>
 800b96c:	800b883a 	mov	r5,r16
 800b970:	9009883a 	mov	r4,r18
 800b974:	800481c0 	call	800481c <__swsetup_r>
 800b978:	103ffa1e 	bne	r2,zero,800b964 <__alt_data_end+0xfc00b964>
 800b97c:	8100030b 	ldhu	r4,12(r16)
 800b980:	80c00417 	ldw	r3,16(r16)
 800b984:	003fc506 	br	800b89c <__alt_data_end+0xfc00b89c>
 800b988:	80068280 	call	8006828 <__sinit>
 800b98c:	003fbc06 	br	800b880 <__alt_data_end+0xfc00b880>

0800b990 <__swbuf>:
 800b990:	00820074 	movhi	r2,2049
 800b994:	108fc604 	addi	r2,r2,16152
 800b998:	280d883a 	mov	r6,r5
 800b99c:	200b883a 	mov	r5,r4
 800b9a0:	11000017 	ldw	r4,0(r2)
 800b9a4:	800b8501 	jmpi	800b850 <__swbuf_r>

0800b9a8 <_wcrtomb_r>:
 800b9a8:	defff604 	addi	sp,sp,-40
 800b9ac:	00820074 	movhi	r2,2049
 800b9b0:	dc800815 	stw	r18,32(sp)
 800b9b4:	dc400715 	stw	r17,28(sp)
 800b9b8:	dc000615 	stw	r16,24(sp)
 800b9bc:	108fca04 	addi	r2,r2,16168
 800b9c0:	dfc00915 	stw	ra,36(sp)
 800b9c4:	2021883a 	mov	r16,r4
 800b9c8:	3823883a 	mov	r17,r7
 800b9cc:	14800017 	ldw	r18,0(r2)
 800b9d0:	28001426 	beq	r5,zero,800ba24 <_wcrtomb_r+0x7c>
 800b9d4:	d9400415 	stw	r5,16(sp)
 800b9d8:	d9800515 	stw	r6,20(sp)
 800b9dc:	80073780 	call	8007378 <__locale_charset>
 800b9e0:	d9800517 	ldw	r6,20(sp)
 800b9e4:	d9400417 	ldw	r5,16(sp)
 800b9e8:	100f883a 	mov	r7,r2
 800b9ec:	dc400015 	stw	r17,0(sp)
 800b9f0:	8009883a 	mov	r4,r16
 800b9f4:	903ee83a 	callr	r18
 800b9f8:	00ffffc4 	movi	r3,-1
 800b9fc:	10c0031e 	bne	r2,r3,800ba0c <_wcrtomb_r+0x64>
 800ba00:	88000015 	stw	zero,0(r17)
 800ba04:	00c02284 	movi	r3,138
 800ba08:	80c00015 	stw	r3,0(r16)
 800ba0c:	dfc00917 	ldw	ra,36(sp)
 800ba10:	dc800817 	ldw	r18,32(sp)
 800ba14:	dc400717 	ldw	r17,28(sp)
 800ba18:	dc000617 	ldw	r16,24(sp)
 800ba1c:	dec00a04 	addi	sp,sp,40
 800ba20:	f800283a 	ret
 800ba24:	80073780 	call	8007378 <__locale_charset>
 800ba28:	100f883a 	mov	r7,r2
 800ba2c:	dc400015 	stw	r17,0(sp)
 800ba30:	000d883a 	mov	r6,zero
 800ba34:	d9400104 	addi	r5,sp,4
 800ba38:	8009883a 	mov	r4,r16
 800ba3c:	903ee83a 	callr	r18
 800ba40:	003fed06 	br	800b9f8 <__alt_data_end+0xfc00b9f8>

0800ba44 <wcrtomb>:
 800ba44:	defff604 	addi	sp,sp,-40
 800ba48:	00820074 	movhi	r2,2049
 800ba4c:	dc800615 	stw	r18,24(sp)
 800ba50:	dc400515 	stw	r17,20(sp)
 800ba54:	108fc604 	addi	r2,r2,16152
 800ba58:	dfc00915 	stw	ra,36(sp)
 800ba5c:	dd000815 	stw	r20,32(sp)
 800ba60:	dcc00715 	stw	r19,28(sp)
 800ba64:	dc000415 	stw	r16,16(sp)
 800ba68:	3025883a 	mov	r18,r6
 800ba6c:	14400017 	ldw	r17,0(r2)
 800ba70:	20001926 	beq	r4,zero,800bad8 <wcrtomb+0x94>
 800ba74:	00820074 	movhi	r2,2049
 800ba78:	108fca04 	addi	r2,r2,16168
 800ba7c:	15000017 	ldw	r20,0(r2)
 800ba80:	2021883a 	mov	r16,r4
 800ba84:	2827883a 	mov	r19,r5
 800ba88:	80073780 	call	8007378 <__locale_charset>
 800ba8c:	100f883a 	mov	r7,r2
 800ba90:	dc800015 	stw	r18,0(sp)
 800ba94:	980d883a 	mov	r6,r19
 800ba98:	800b883a 	mov	r5,r16
 800ba9c:	8809883a 	mov	r4,r17
 800baa0:	a03ee83a 	callr	r20
 800baa4:	00ffffc4 	movi	r3,-1
 800baa8:	10c0031e 	bne	r2,r3,800bab8 <wcrtomb+0x74>
 800baac:	90000015 	stw	zero,0(r18)
 800bab0:	00c02284 	movi	r3,138
 800bab4:	88c00015 	stw	r3,0(r17)
 800bab8:	dfc00917 	ldw	ra,36(sp)
 800babc:	dd000817 	ldw	r20,32(sp)
 800bac0:	dcc00717 	ldw	r19,28(sp)
 800bac4:	dc800617 	ldw	r18,24(sp)
 800bac8:	dc400517 	ldw	r17,20(sp)
 800bacc:	dc000417 	ldw	r16,16(sp)
 800bad0:	dec00a04 	addi	sp,sp,40
 800bad4:	f800283a 	ret
 800bad8:	00820074 	movhi	r2,2049
 800badc:	108fca04 	addi	r2,r2,16168
 800bae0:	14000017 	ldw	r16,0(r2)
 800bae4:	80073780 	call	8007378 <__locale_charset>
 800bae8:	100f883a 	mov	r7,r2
 800baec:	dc800015 	stw	r18,0(sp)
 800baf0:	000d883a 	mov	r6,zero
 800baf4:	d9400104 	addi	r5,sp,4
 800baf8:	8809883a 	mov	r4,r17
 800bafc:	803ee83a 	callr	r16
 800bb00:	003fe806 	br	800baa4 <__alt_data_end+0xfc00baa4>

0800bb04 <__ascii_wctomb>:
 800bb04:	28000526 	beq	r5,zero,800bb1c <__ascii_wctomb+0x18>
 800bb08:	00803fc4 	movi	r2,255
 800bb0c:	11800536 	bltu	r2,r6,800bb24 <__ascii_wctomb+0x20>
 800bb10:	29800005 	stb	r6,0(r5)
 800bb14:	00800044 	movi	r2,1
 800bb18:	f800283a 	ret
 800bb1c:	0005883a 	mov	r2,zero
 800bb20:	f800283a 	ret
 800bb24:	00802284 	movi	r2,138
 800bb28:	20800015 	stw	r2,0(r4)
 800bb2c:	00bfffc4 	movi	r2,-1
 800bb30:	f800283a 	ret

0800bb34 <_wctomb_r>:
 800bb34:	00820074 	movhi	r2,2049
 800bb38:	defff904 	addi	sp,sp,-28
 800bb3c:	108fca04 	addi	r2,r2,16168
 800bb40:	dfc00615 	stw	ra,24(sp)
 800bb44:	dc400515 	stw	r17,20(sp)
 800bb48:	dc000415 	stw	r16,16(sp)
 800bb4c:	3823883a 	mov	r17,r7
 800bb50:	14000017 	ldw	r16,0(r2)
 800bb54:	d9000115 	stw	r4,4(sp)
 800bb58:	d9400215 	stw	r5,8(sp)
 800bb5c:	d9800315 	stw	r6,12(sp)
 800bb60:	80073780 	call	8007378 <__locale_charset>
 800bb64:	d9800317 	ldw	r6,12(sp)
 800bb68:	d9400217 	ldw	r5,8(sp)
 800bb6c:	d9000117 	ldw	r4,4(sp)
 800bb70:	100f883a 	mov	r7,r2
 800bb74:	dc400015 	stw	r17,0(sp)
 800bb78:	803ee83a 	callr	r16
 800bb7c:	dfc00617 	ldw	ra,24(sp)
 800bb80:	dc400517 	ldw	r17,20(sp)
 800bb84:	dc000417 	ldw	r16,16(sp)
 800bb88:	dec00704 	addi	sp,sp,28
 800bb8c:	f800283a 	ret

0800bb90 <__udivdi3>:
 800bb90:	defff404 	addi	sp,sp,-48
 800bb94:	dcc00515 	stw	r19,20(sp)
 800bb98:	dc000215 	stw	r16,8(sp)
 800bb9c:	dfc00b15 	stw	ra,44(sp)
 800bba0:	df000a15 	stw	fp,40(sp)
 800bba4:	ddc00915 	stw	r23,36(sp)
 800bba8:	dd800815 	stw	r22,32(sp)
 800bbac:	dd400715 	stw	r21,28(sp)
 800bbb0:	dd000615 	stw	r20,24(sp)
 800bbb4:	dc800415 	stw	r18,16(sp)
 800bbb8:	dc400315 	stw	r17,12(sp)
 800bbbc:	2027883a 	mov	r19,r4
 800bbc0:	2821883a 	mov	r16,r5
 800bbc4:	3800461e 	bne	r7,zero,800bce0 <__udivdi3+0x150>
 800bbc8:	3023883a 	mov	r17,r6
 800bbcc:	2025883a 	mov	r18,r4
 800bbd0:	2980572e 	bgeu	r5,r6,800bd30 <__udivdi3+0x1a0>
 800bbd4:	00bfffd4 	movui	r2,65535
 800bbd8:	282d883a 	mov	r22,r5
 800bbdc:	1180b236 	bltu	r2,r6,800bea8 <__udivdi3+0x318>
 800bbe0:	00803fc4 	movi	r2,255
 800bbe4:	1185803a 	cmpltu	r2,r2,r6
 800bbe8:	100490fa 	slli	r2,r2,3
 800bbec:	3086d83a 	srl	r3,r6,r2
 800bbf0:	01020074 	movhi	r4,2049
 800bbf4:	2108cd04 	addi	r4,r4,9012
 800bbf8:	20c7883a 	add	r3,r4,r3
 800bbfc:	18c00003 	ldbu	r3,0(r3)
 800bc00:	1885883a 	add	r2,r3,r2
 800bc04:	00c00804 	movi	r3,32
 800bc08:	1887c83a 	sub	r3,r3,r2
 800bc0c:	18000526 	beq	r3,zero,800bc24 <__udivdi3+0x94>
 800bc10:	80e0983a 	sll	r16,r16,r3
 800bc14:	9884d83a 	srl	r2,r19,r2
 800bc18:	30e2983a 	sll	r17,r6,r3
 800bc1c:	98e4983a 	sll	r18,r19,r3
 800bc20:	142cb03a 	or	r22,r2,r16
 800bc24:	882ad43a 	srli	r21,r17,16
 800bc28:	b009883a 	mov	r4,r22
 800bc2c:	8d3fffcc 	andi	r20,r17,65535
 800bc30:	a80b883a 	mov	r5,r21
 800bc34:	800c8ac0 	call	800c8ac <__umodsi3>
 800bc38:	b009883a 	mov	r4,r22
 800bc3c:	a80b883a 	mov	r5,r21
 800bc40:	1027883a 	mov	r19,r2
 800bc44:	800c8480 	call	800c848 <__udivsi3>
 800bc48:	100b883a 	mov	r5,r2
 800bc4c:	a009883a 	mov	r4,r20
 800bc50:	102d883a 	mov	r22,r2
 800bc54:	800c9040 	call	800c904 <__mulsi3>
 800bc58:	9826943a 	slli	r19,r19,16
 800bc5c:	9006d43a 	srli	r3,r18,16
 800bc60:	1cc6b03a 	or	r3,r3,r19
 800bc64:	1880052e 	bgeu	r3,r2,800bc7c <__udivdi3+0xec>
 800bc68:	1c47883a 	add	r3,r3,r17
 800bc6c:	b13fffc4 	addi	r4,r22,-1
 800bc70:	1c400136 	bltu	r3,r17,800bc78 <__udivdi3+0xe8>
 800bc74:	18814236 	bltu	r3,r2,800c180 <__udivdi3+0x5f0>
 800bc78:	202d883a 	mov	r22,r4
 800bc7c:	18a1c83a 	sub	r16,r3,r2
 800bc80:	8009883a 	mov	r4,r16
 800bc84:	a80b883a 	mov	r5,r21
 800bc88:	800c8ac0 	call	800c8ac <__umodsi3>
 800bc8c:	1027883a 	mov	r19,r2
 800bc90:	8009883a 	mov	r4,r16
 800bc94:	a80b883a 	mov	r5,r21
 800bc98:	9826943a 	slli	r19,r19,16
 800bc9c:	800c8480 	call	800c848 <__udivsi3>
 800bca0:	100b883a 	mov	r5,r2
 800bca4:	a009883a 	mov	r4,r20
 800bca8:	94bfffcc 	andi	r18,r18,65535
 800bcac:	1021883a 	mov	r16,r2
 800bcb0:	94e4b03a 	or	r18,r18,r19
 800bcb4:	800c9040 	call	800c904 <__mulsi3>
 800bcb8:	9080052e 	bgeu	r18,r2,800bcd0 <__udivdi3+0x140>
 800bcbc:	8ca5883a 	add	r18,r17,r18
 800bcc0:	80ffffc4 	addi	r3,r16,-1
 800bcc4:	94410c36 	bltu	r18,r17,800c0f8 <__udivdi3+0x568>
 800bcc8:	90810b2e 	bgeu	r18,r2,800c0f8 <__udivdi3+0x568>
 800bccc:	843fff84 	addi	r16,r16,-2
 800bcd0:	b004943a 	slli	r2,r22,16
 800bcd4:	0007883a 	mov	r3,zero
 800bcd8:	1404b03a 	or	r2,r2,r16
 800bcdc:	00005e06 	br	800be58 <__udivdi3+0x2c8>
 800bce0:	29c05b36 	bltu	r5,r7,800be50 <__udivdi3+0x2c0>
 800bce4:	00bfffd4 	movui	r2,65535
 800bce8:	11c0672e 	bgeu	r2,r7,800be88 <__udivdi3+0x2f8>
 800bcec:	00804034 	movhi	r2,256
 800bcf0:	10bfffc4 	addi	r2,r2,-1
 800bcf4:	11c10a36 	bltu	r2,r7,800c120 <__udivdi3+0x590>
 800bcf8:	00800404 	movi	r2,16
 800bcfc:	3886d83a 	srl	r3,r7,r2
 800bd00:	01020074 	movhi	r4,2049
 800bd04:	2108cd04 	addi	r4,r4,9012
 800bd08:	20c7883a 	add	r3,r4,r3
 800bd0c:	18c00003 	ldbu	r3,0(r3)
 800bd10:	05c00804 	movi	r23,32
 800bd14:	1885883a 	add	r2,r3,r2
 800bd18:	b8afc83a 	sub	r23,r23,r2
 800bd1c:	b800671e 	bne	r23,zero,800bebc <__udivdi3+0x32c>
 800bd20:	3c010536 	bltu	r7,r16,800c138 <__udivdi3+0x5a8>
 800bd24:	9985403a 	cmpgeu	r2,r19,r6
 800bd28:	0007883a 	mov	r3,zero
 800bd2c:	00004a06 	br	800be58 <__udivdi3+0x2c8>
 800bd30:	3000041e 	bne	r6,zero,800bd44 <__udivdi3+0x1b4>
 800bd34:	000b883a 	mov	r5,zero
 800bd38:	01000044 	movi	r4,1
 800bd3c:	800c8480 	call	800c848 <__udivsi3>
 800bd40:	1023883a 	mov	r17,r2
 800bd44:	00bfffd4 	movui	r2,65535
 800bd48:	1440532e 	bgeu	r2,r17,800be98 <__udivdi3+0x308>
 800bd4c:	00804034 	movhi	r2,256
 800bd50:	10bfffc4 	addi	r2,r2,-1
 800bd54:	1440f436 	bltu	r2,r17,800c128 <__udivdi3+0x598>
 800bd58:	00800404 	movi	r2,16
 800bd5c:	8886d83a 	srl	r3,r17,r2
 800bd60:	01020074 	movhi	r4,2049
 800bd64:	2108cd04 	addi	r4,r4,9012
 800bd68:	20c7883a 	add	r3,r4,r3
 800bd6c:	18c00003 	ldbu	r3,0(r3)
 800bd70:	1885883a 	add	r2,r3,r2
 800bd74:	00c00804 	movi	r3,32
 800bd78:	1887c83a 	sub	r3,r3,r2
 800bd7c:	1800a51e 	bne	r3,zero,800c014 <__udivdi3+0x484>
 800bd80:	882ad43a 	srli	r21,r17,16
 800bd84:	8461c83a 	sub	r16,r16,r17
 800bd88:	8d3fffcc 	andi	r20,r17,65535
 800bd8c:	00c00044 	movi	r3,1
 800bd90:	a80b883a 	mov	r5,r21
 800bd94:	8009883a 	mov	r4,r16
 800bd98:	d8c00115 	stw	r3,4(sp)
 800bd9c:	800c8ac0 	call	800c8ac <__umodsi3>
 800bda0:	a80b883a 	mov	r5,r21
 800bda4:	8009883a 	mov	r4,r16
 800bda8:	1027883a 	mov	r19,r2
 800bdac:	800c8480 	call	800c848 <__udivsi3>
 800bdb0:	a00b883a 	mov	r5,r20
 800bdb4:	1009883a 	mov	r4,r2
 800bdb8:	102d883a 	mov	r22,r2
 800bdbc:	800c9040 	call	800c904 <__mulsi3>
 800bdc0:	9826943a 	slli	r19,r19,16
 800bdc4:	900ed43a 	srli	r7,r18,16
 800bdc8:	d8c00117 	ldw	r3,4(sp)
 800bdcc:	3cceb03a 	or	r7,r7,r19
 800bdd0:	3880052e 	bgeu	r7,r2,800bde8 <__udivdi3+0x258>
 800bdd4:	3c4f883a 	add	r7,r7,r17
 800bdd8:	b13fffc4 	addi	r4,r22,-1
 800bddc:	3c400136 	bltu	r7,r17,800bde4 <__udivdi3+0x254>
 800bde0:	3880e436 	bltu	r7,r2,800c174 <__udivdi3+0x5e4>
 800bde4:	202d883a 	mov	r22,r4
 800bde8:	38a1c83a 	sub	r16,r7,r2
 800bdec:	8009883a 	mov	r4,r16
 800bdf0:	a80b883a 	mov	r5,r21
 800bdf4:	d8c00115 	stw	r3,4(sp)
 800bdf8:	800c8ac0 	call	800c8ac <__umodsi3>
 800bdfc:	1027883a 	mov	r19,r2
 800be00:	8009883a 	mov	r4,r16
 800be04:	a80b883a 	mov	r5,r21
 800be08:	9826943a 	slli	r19,r19,16
 800be0c:	800c8480 	call	800c848 <__udivsi3>
 800be10:	a00b883a 	mov	r5,r20
 800be14:	1009883a 	mov	r4,r2
 800be18:	94bfffcc 	andi	r18,r18,65535
 800be1c:	1021883a 	mov	r16,r2
 800be20:	94e4b03a 	or	r18,r18,r19
 800be24:	800c9040 	call	800c904 <__mulsi3>
 800be28:	d8c00117 	ldw	r3,4(sp)
 800be2c:	9080052e 	bgeu	r18,r2,800be44 <__udivdi3+0x2b4>
 800be30:	8ca5883a 	add	r18,r17,r18
 800be34:	813fffc4 	addi	r4,r16,-1
 800be38:	9440ad36 	bltu	r18,r17,800c0f0 <__udivdi3+0x560>
 800be3c:	9080ac2e 	bgeu	r18,r2,800c0f0 <__udivdi3+0x560>
 800be40:	843fff84 	addi	r16,r16,-2
 800be44:	b004943a 	slli	r2,r22,16
 800be48:	1404b03a 	or	r2,r2,r16
 800be4c:	00000206 	br	800be58 <__udivdi3+0x2c8>
 800be50:	0007883a 	mov	r3,zero
 800be54:	0005883a 	mov	r2,zero
 800be58:	dfc00b17 	ldw	ra,44(sp)
 800be5c:	df000a17 	ldw	fp,40(sp)
 800be60:	ddc00917 	ldw	r23,36(sp)
 800be64:	dd800817 	ldw	r22,32(sp)
 800be68:	dd400717 	ldw	r21,28(sp)
 800be6c:	dd000617 	ldw	r20,24(sp)
 800be70:	dcc00517 	ldw	r19,20(sp)
 800be74:	dc800417 	ldw	r18,16(sp)
 800be78:	dc400317 	ldw	r17,12(sp)
 800be7c:	dc000217 	ldw	r16,8(sp)
 800be80:	dec00c04 	addi	sp,sp,48
 800be84:	f800283a 	ret
 800be88:	00803fc4 	movi	r2,255
 800be8c:	11c5803a 	cmpltu	r2,r2,r7
 800be90:	100490fa 	slli	r2,r2,3
 800be94:	003f9906 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800be98:	00803fc4 	movi	r2,255
 800be9c:	1445803a 	cmpltu	r2,r2,r17
 800bea0:	100490fa 	slli	r2,r2,3
 800bea4:	003fad06 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800bea8:	00804034 	movhi	r2,256
 800beac:	10bfffc4 	addi	r2,r2,-1
 800beb0:	11809f36 	bltu	r2,r6,800c130 <__udivdi3+0x5a0>
 800beb4:	00800404 	movi	r2,16
 800beb8:	003f4c06 	br	800bbec <__alt_data_end+0xfc00bbec>
 800bebc:	3dce983a 	sll	r7,r7,r23
 800bec0:	30b8d83a 	srl	fp,r6,r2
 800bec4:	80a2d83a 	srl	r17,r16,r2
 800bec8:	35cc983a 	sll	r6,r6,r23
 800becc:	3f38b03a 	or	fp,r7,fp
 800bed0:	e024d43a 	srli	r18,fp,16
 800bed4:	9884d83a 	srl	r2,r19,r2
 800bed8:	85e0983a 	sll	r16,r16,r23
 800bedc:	8809883a 	mov	r4,r17
 800bee0:	900b883a 	mov	r5,r18
 800bee4:	d9800015 	stw	r6,0(sp)
 800bee8:	1420b03a 	or	r16,r2,r16
 800beec:	800c8ac0 	call	800c8ac <__umodsi3>
 800bef0:	900b883a 	mov	r5,r18
 800bef4:	8809883a 	mov	r4,r17
 800bef8:	1029883a 	mov	r20,r2
 800befc:	e5bfffcc 	andi	r22,fp,65535
 800bf00:	800c8480 	call	800c848 <__udivsi3>
 800bf04:	100b883a 	mov	r5,r2
 800bf08:	b009883a 	mov	r4,r22
 800bf0c:	102b883a 	mov	r21,r2
 800bf10:	800c9040 	call	800c904 <__mulsi3>
 800bf14:	a028943a 	slli	r20,r20,16
 800bf18:	8006d43a 	srli	r3,r16,16
 800bf1c:	1d06b03a 	or	r3,r3,r20
 800bf20:	1880042e 	bgeu	r3,r2,800bf34 <__udivdi3+0x3a4>
 800bf24:	1f07883a 	add	r3,r3,fp
 800bf28:	a93fffc4 	addi	r4,r21,-1
 800bf2c:	1f00892e 	bgeu	r3,fp,800c154 <__udivdi3+0x5c4>
 800bf30:	202b883a 	mov	r21,r4
 800bf34:	18a3c83a 	sub	r17,r3,r2
 800bf38:	8809883a 	mov	r4,r17
 800bf3c:	900b883a 	mov	r5,r18
 800bf40:	800c8ac0 	call	800c8ac <__umodsi3>
 800bf44:	1029883a 	mov	r20,r2
 800bf48:	8809883a 	mov	r4,r17
 800bf4c:	900b883a 	mov	r5,r18
 800bf50:	a028943a 	slli	r20,r20,16
 800bf54:	800c8480 	call	800c848 <__udivsi3>
 800bf58:	100b883a 	mov	r5,r2
 800bf5c:	b009883a 	mov	r4,r22
 800bf60:	843fffcc 	andi	r16,r16,65535
 800bf64:	1023883a 	mov	r17,r2
 800bf68:	8520b03a 	or	r16,r16,r20
 800bf6c:	800c9040 	call	800c904 <__mulsi3>
 800bf70:	8080042e 	bgeu	r16,r2,800bf84 <__udivdi3+0x3f4>
 800bf74:	8721883a 	add	r16,r16,fp
 800bf78:	88ffffc4 	addi	r3,r17,-1
 800bf7c:	8700712e 	bgeu	r16,fp,800c144 <__udivdi3+0x5b4>
 800bf80:	1823883a 	mov	r17,r3
 800bf84:	a80e943a 	slli	r7,r21,16
 800bf88:	d8c00017 	ldw	r3,0(sp)
 800bf8c:	80a1c83a 	sub	r16,r16,r2
 800bf90:	3c64b03a 	or	r18,r7,r17
 800bf94:	1d3fffcc 	andi	r20,r3,65535
 800bf98:	9022d43a 	srli	r17,r18,16
 800bf9c:	95bfffcc 	andi	r22,r18,65535
 800bfa0:	a00b883a 	mov	r5,r20
 800bfa4:	b009883a 	mov	r4,r22
 800bfa8:	182ad43a 	srli	r21,r3,16
 800bfac:	800c9040 	call	800c904 <__mulsi3>
 800bfb0:	a00b883a 	mov	r5,r20
 800bfb4:	8809883a 	mov	r4,r17
 800bfb8:	1039883a 	mov	fp,r2
 800bfbc:	800c9040 	call	800c904 <__mulsi3>
 800bfc0:	8809883a 	mov	r4,r17
 800bfc4:	a80b883a 	mov	r5,r21
 800bfc8:	1029883a 	mov	r20,r2
 800bfcc:	800c9040 	call	800c904 <__mulsi3>
 800bfd0:	a80b883a 	mov	r5,r21
 800bfd4:	b009883a 	mov	r4,r22
 800bfd8:	1023883a 	mov	r17,r2
 800bfdc:	800c9040 	call	800c904 <__mulsi3>
 800bfe0:	e006d43a 	srli	r3,fp,16
 800bfe4:	1505883a 	add	r2,r2,r20
 800bfe8:	1887883a 	add	r3,r3,r2
 800bfec:	1d00022e 	bgeu	r3,r20,800bff8 <__udivdi3+0x468>
 800bff0:	00800074 	movhi	r2,1
 800bff4:	88a3883a 	add	r17,r17,r2
 800bff8:	1804d43a 	srli	r2,r3,16
 800bffc:	1463883a 	add	r17,r2,r17
 800c000:	84404436 	bltu	r16,r17,800c114 <__udivdi3+0x584>
 800c004:	84403e26 	beq	r16,r17,800c100 <__udivdi3+0x570>
 800c008:	9005883a 	mov	r2,r18
 800c00c:	0007883a 	mov	r3,zero
 800c010:	003f9106 	br	800be58 <__alt_data_end+0xfc00be58>
 800c014:	88e2983a 	sll	r17,r17,r3
 800c018:	80aed83a 	srl	r23,r16,r2
 800c01c:	80e0983a 	sll	r16,r16,r3
 800c020:	882ad43a 	srli	r21,r17,16
 800c024:	9884d83a 	srl	r2,r19,r2
 800c028:	b809883a 	mov	r4,r23
 800c02c:	a80b883a 	mov	r5,r21
 800c030:	98e4983a 	sll	r18,r19,r3
 800c034:	142cb03a 	or	r22,r2,r16
 800c038:	800c8ac0 	call	800c8ac <__umodsi3>
 800c03c:	b809883a 	mov	r4,r23
 800c040:	a80b883a 	mov	r5,r21
 800c044:	1027883a 	mov	r19,r2
 800c048:	8d3fffcc 	andi	r20,r17,65535
 800c04c:	800c8480 	call	800c848 <__udivsi3>
 800c050:	a009883a 	mov	r4,r20
 800c054:	100b883a 	mov	r5,r2
 800c058:	102f883a 	mov	r23,r2
 800c05c:	800c9040 	call	800c904 <__mulsi3>
 800c060:	9826943a 	slli	r19,r19,16
 800c064:	b008d43a 	srli	r4,r22,16
 800c068:	24c8b03a 	or	r4,r4,r19
 800c06c:	2080062e 	bgeu	r4,r2,800c088 <__udivdi3+0x4f8>
 800c070:	2449883a 	add	r4,r4,r17
 800c074:	b8ffffc4 	addi	r3,r23,-1
 800c078:	24403c36 	bltu	r4,r17,800c16c <__udivdi3+0x5dc>
 800c07c:	20803b2e 	bgeu	r4,r2,800c16c <__udivdi3+0x5dc>
 800c080:	bdffff84 	addi	r23,r23,-2
 800c084:	2449883a 	add	r4,r4,r17
 800c088:	20a1c83a 	sub	r16,r4,r2
 800c08c:	a80b883a 	mov	r5,r21
 800c090:	8009883a 	mov	r4,r16
 800c094:	800c8ac0 	call	800c8ac <__umodsi3>
 800c098:	a80b883a 	mov	r5,r21
 800c09c:	8009883a 	mov	r4,r16
 800c0a0:	1027883a 	mov	r19,r2
 800c0a4:	800c8480 	call	800c848 <__udivsi3>
 800c0a8:	a009883a 	mov	r4,r20
 800c0ac:	100b883a 	mov	r5,r2
 800c0b0:	9826943a 	slli	r19,r19,16
 800c0b4:	1039883a 	mov	fp,r2
 800c0b8:	800c9040 	call	800c904 <__mulsi3>
 800c0bc:	b13fffcc 	andi	r4,r22,65535
 800c0c0:	24c8b03a 	or	r4,r4,r19
 800c0c4:	2080062e 	bgeu	r4,r2,800c0e0 <__udivdi3+0x550>
 800c0c8:	2449883a 	add	r4,r4,r17
 800c0cc:	e0ffffc4 	addi	r3,fp,-1
 800c0d0:	24402436 	bltu	r4,r17,800c164 <__udivdi3+0x5d4>
 800c0d4:	2080232e 	bgeu	r4,r2,800c164 <__udivdi3+0x5d4>
 800c0d8:	e73fff84 	addi	fp,fp,-2
 800c0dc:	2449883a 	add	r4,r4,r17
 800c0e0:	b82e943a 	slli	r23,r23,16
 800c0e4:	20a1c83a 	sub	r16,r4,r2
 800c0e8:	bf06b03a 	or	r3,r23,fp
 800c0ec:	003f2806 	br	800bd90 <__alt_data_end+0xfc00bd90>
 800c0f0:	2021883a 	mov	r16,r4
 800c0f4:	003f5306 	br	800be44 <__alt_data_end+0xfc00be44>
 800c0f8:	1821883a 	mov	r16,r3
 800c0fc:	003ef406 	br	800bcd0 <__alt_data_end+0xfc00bcd0>
 800c100:	1806943a 	slli	r3,r3,16
 800c104:	9de6983a 	sll	r19,r19,r23
 800c108:	e73fffcc 	andi	fp,fp,65535
 800c10c:	1f07883a 	add	r3,r3,fp
 800c110:	98ffbd2e 	bgeu	r19,r3,800c008 <__alt_data_end+0xfc00c008>
 800c114:	90bfffc4 	addi	r2,r18,-1
 800c118:	0007883a 	mov	r3,zero
 800c11c:	003f4e06 	br	800be58 <__alt_data_end+0xfc00be58>
 800c120:	00800604 	movi	r2,24
 800c124:	003ef506 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800c128:	00800604 	movi	r2,24
 800c12c:	003f0b06 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800c130:	00800604 	movi	r2,24
 800c134:	003ead06 	br	800bbec <__alt_data_end+0xfc00bbec>
 800c138:	0007883a 	mov	r3,zero
 800c13c:	00800044 	movi	r2,1
 800c140:	003f4506 	br	800be58 <__alt_data_end+0xfc00be58>
 800c144:	80bf8e2e 	bgeu	r16,r2,800bf80 <__alt_data_end+0xfc00bf80>
 800c148:	8c7fff84 	addi	r17,r17,-2
 800c14c:	8721883a 	add	r16,r16,fp
 800c150:	003f8c06 	br	800bf84 <__alt_data_end+0xfc00bf84>
 800c154:	18bf762e 	bgeu	r3,r2,800bf30 <__alt_data_end+0xfc00bf30>
 800c158:	ad7fff84 	addi	r21,r21,-2
 800c15c:	1f07883a 	add	r3,r3,fp
 800c160:	003f7406 	br	800bf34 <__alt_data_end+0xfc00bf34>
 800c164:	1839883a 	mov	fp,r3
 800c168:	003fdd06 	br	800c0e0 <__alt_data_end+0xfc00c0e0>
 800c16c:	182f883a 	mov	r23,r3
 800c170:	003fc506 	br	800c088 <__alt_data_end+0xfc00c088>
 800c174:	b5bfff84 	addi	r22,r22,-2
 800c178:	3c4f883a 	add	r7,r7,r17
 800c17c:	003f1a06 	br	800bde8 <__alt_data_end+0xfc00bde8>
 800c180:	b5bfff84 	addi	r22,r22,-2
 800c184:	1c47883a 	add	r3,r3,r17
 800c188:	003ebc06 	br	800bc7c <__alt_data_end+0xfc00bc7c>

0800c18c <__umoddi3>:
 800c18c:	defff304 	addi	sp,sp,-52
 800c190:	df000b15 	stw	fp,44(sp)
 800c194:	dc400415 	stw	r17,16(sp)
 800c198:	dc000315 	stw	r16,12(sp)
 800c19c:	dfc00c15 	stw	ra,48(sp)
 800c1a0:	ddc00a15 	stw	r23,40(sp)
 800c1a4:	dd800915 	stw	r22,36(sp)
 800c1a8:	dd400815 	stw	r21,32(sp)
 800c1ac:	dd000715 	stw	r20,28(sp)
 800c1b0:	dcc00615 	stw	r19,24(sp)
 800c1b4:	dc800515 	stw	r18,20(sp)
 800c1b8:	2021883a 	mov	r16,r4
 800c1bc:	2823883a 	mov	r17,r5
 800c1c0:	2839883a 	mov	fp,r5
 800c1c4:	3800401e 	bne	r7,zero,800c2c8 <__umoddi3+0x13c>
 800c1c8:	3027883a 	mov	r19,r6
 800c1cc:	2029883a 	mov	r20,r4
 800c1d0:	2980552e 	bgeu	r5,r6,800c328 <__umoddi3+0x19c>
 800c1d4:	00bfffd4 	movui	r2,65535
 800c1d8:	1180a236 	bltu	r2,r6,800c464 <__umoddi3+0x2d8>
 800c1dc:	01003fc4 	movi	r4,255
 800c1e0:	2189803a 	cmpltu	r4,r4,r6
 800c1e4:	200890fa 	slli	r4,r4,3
 800c1e8:	3104d83a 	srl	r2,r6,r4
 800c1ec:	00c20074 	movhi	r3,2049
 800c1f0:	18c8cd04 	addi	r3,r3,9012
 800c1f4:	1885883a 	add	r2,r3,r2
 800c1f8:	10c00003 	ldbu	r3,0(r2)
 800c1fc:	00800804 	movi	r2,32
 800c200:	1909883a 	add	r4,r3,r4
 800c204:	1125c83a 	sub	r18,r2,r4
 800c208:	90000526 	beq	r18,zero,800c220 <__umoddi3+0x94>
 800c20c:	8ca2983a 	sll	r17,r17,r18
 800c210:	8108d83a 	srl	r4,r16,r4
 800c214:	34a6983a 	sll	r19,r6,r18
 800c218:	84a8983a 	sll	r20,r16,r18
 800c21c:	2478b03a 	or	fp,r4,r17
 800c220:	982cd43a 	srli	r22,r19,16
 800c224:	e009883a 	mov	r4,fp
 800c228:	9dffffcc 	andi	r23,r19,65535
 800c22c:	b00b883a 	mov	r5,r22
 800c230:	800c8ac0 	call	800c8ac <__umodsi3>
 800c234:	b00b883a 	mov	r5,r22
 800c238:	e009883a 	mov	r4,fp
 800c23c:	102b883a 	mov	r21,r2
 800c240:	800c8480 	call	800c848 <__udivsi3>
 800c244:	100b883a 	mov	r5,r2
 800c248:	b809883a 	mov	r4,r23
 800c24c:	800c9040 	call	800c904 <__mulsi3>
 800c250:	a82a943a 	slli	r21,r21,16
 800c254:	a006d43a 	srli	r3,r20,16
 800c258:	1d46b03a 	or	r3,r3,r21
 800c25c:	1880032e 	bgeu	r3,r2,800c26c <__umoddi3+0xe0>
 800c260:	1cc7883a 	add	r3,r3,r19
 800c264:	1cc00136 	bltu	r3,r19,800c26c <__umoddi3+0xe0>
 800c268:	18813136 	bltu	r3,r2,800c730 <__umoddi3+0x5a4>
 800c26c:	18a1c83a 	sub	r16,r3,r2
 800c270:	b00b883a 	mov	r5,r22
 800c274:	8009883a 	mov	r4,r16
 800c278:	800c8ac0 	call	800c8ac <__umodsi3>
 800c27c:	b00b883a 	mov	r5,r22
 800c280:	8009883a 	mov	r4,r16
 800c284:	1023883a 	mov	r17,r2
 800c288:	800c8480 	call	800c848 <__udivsi3>
 800c28c:	100b883a 	mov	r5,r2
 800c290:	b809883a 	mov	r4,r23
 800c294:	8822943a 	slli	r17,r17,16
 800c298:	800c9040 	call	800c904 <__mulsi3>
 800c29c:	a0ffffcc 	andi	r3,r20,65535
 800c2a0:	1c46b03a 	or	r3,r3,r17
 800c2a4:	1880042e 	bgeu	r3,r2,800c2b8 <__umoddi3+0x12c>
 800c2a8:	1cc7883a 	add	r3,r3,r19
 800c2ac:	1cc00236 	bltu	r3,r19,800c2b8 <__umoddi3+0x12c>
 800c2b0:	1880012e 	bgeu	r3,r2,800c2b8 <__umoddi3+0x12c>
 800c2b4:	1cc7883a 	add	r3,r3,r19
 800c2b8:	1885c83a 	sub	r2,r3,r2
 800c2bc:	1484d83a 	srl	r2,r2,r18
 800c2c0:	0007883a 	mov	r3,zero
 800c2c4:	00005306 	br	800c414 <__umoddi3+0x288>
 800c2c8:	29c05036 	bltu	r5,r7,800c40c <__umoddi3+0x280>
 800c2cc:	00bfffd4 	movui	r2,65535
 800c2d0:	11c05c2e 	bgeu	r2,r7,800c444 <__umoddi3+0x2b8>
 800c2d4:	00804034 	movhi	r2,256
 800c2d8:	10bfffc4 	addi	r2,r2,-1
 800c2dc:	11c10636 	bltu	r2,r7,800c6f8 <__umoddi3+0x56c>
 800c2e0:	01000404 	movi	r4,16
 800c2e4:	3904d83a 	srl	r2,r7,r4
 800c2e8:	00c20074 	movhi	r3,2049
 800c2ec:	18c8cd04 	addi	r3,r3,9012
 800c2f0:	1885883a 	add	r2,r3,r2
 800c2f4:	14c00003 	ldbu	r19,0(r2)
 800c2f8:	00c00804 	movi	r3,32
 800c2fc:	9927883a 	add	r19,r19,r4
 800c300:	1ce9c83a 	sub	r20,r3,r19
 800c304:	a0005c1e 	bne	r20,zero,800c478 <__umoddi3+0x2ec>
 800c308:	3c400136 	bltu	r7,r17,800c310 <__umoddi3+0x184>
 800c30c:	81810a36 	bltu	r16,r6,800c738 <__umoddi3+0x5ac>
 800c310:	8185c83a 	sub	r2,r16,r6
 800c314:	89e3c83a 	sub	r17,r17,r7
 800c318:	8089803a 	cmpltu	r4,r16,r2
 800c31c:	8939c83a 	sub	fp,r17,r4
 800c320:	e007883a 	mov	r3,fp
 800c324:	00003b06 	br	800c414 <__umoddi3+0x288>
 800c328:	3000041e 	bne	r6,zero,800c33c <__umoddi3+0x1b0>
 800c32c:	000b883a 	mov	r5,zero
 800c330:	01000044 	movi	r4,1
 800c334:	800c8480 	call	800c848 <__udivsi3>
 800c338:	1027883a 	mov	r19,r2
 800c33c:	00bfffd4 	movui	r2,65535
 800c340:	14c0442e 	bgeu	r2,r19,800c454 <__umoddi3+0x2c8>
 800c344:	00804034 	movhi	r2,256
 800c348:	10bfffc4 	addi	r2,r2,-1
 800c34c:	14c0ec36 	bltu	r2,r19,800c700 <__umoddi3+0x574>
 800c350:	00800404 	movi	r2,16
 800c354:	9886d83a 	srl	r3,r19,r2
 800c358:	01020074 	movhi	r4,2049
 800c35c:	2108cd04 	addi	r4,r4,9012
 800c360:	20c7883a 	add	r3,r4,r3
 800c364:	18c00003 	ldbu	r3,0(r3)
 800c368:	1887883a 	add	r3,r3,r2
 800c36c:	00800804 	movi	r2,32
 800c370:	10e5c83a 	sub	r18,r2,r3
 800c374:	9000ab1e 	bne	r18,zero,800c624 <__umoddi3+0x498>
 800c378:	982cd43a 	srli	r22,r19,16
 800c37c:	8ce3c83a 	sub	r17,r17,r19
 800c380:	9dffffcc 	andi	r23,r19,65535
 800c384:	b00b883a 	mov	r5,r22
 800c388:	8809883a 	mov	r4,r17
 800c38c:	800c8ac0 	call	800c8ac <__umodsi3>
 800c390:	b00b883a 	mov	r5,r22
 800c394:	8809883a 	mov	r4,r17
 800c398:	102b883a 	mov	r21,r2
 800c39c:	800c8480 	call	800c848 <__udivsi3>
 800c3a0:	b80b883a 	mov	r5,r23
 800c3a4:	1009883a 	mov	r4,r2
 800c3a8:	800c9040 	call	800c904 <__mulsi3>
 800c3ac:	a82a943a 	slli	r21,r21,16
 800c3b0:	a006d43a 	srli	r3,r20,16
 800c3b4:	1d46b03a 	or	r3,r3,r21
 800c3b8:	1880042e 	bgeu	r3,r2,800c3cc <__umoddi3+0x240>
 800c3bc:	1cc7883a 	add	r3,r3,r19
 800c3c0:	1cc00236 	bltu	r3,r19,800c3cc <__umoddi3+0x240>
 800c3c4:	1880012e 	bgeu	r3,r2,800c3cc <__umoddi3+0x240>
 800c3c8:	1cc7883a 	add	r3,r3,r19
 800c3cc:	18a1c83a 	sub	r16,r3,r2
 800c3d0:	b00b883a 	mov	r5,r22
 800c3d4:	8009883a 	mov	r4,r16
 800c3d8:	800c8ac0 	call	800c8ac <__umodsi3>
 800c3dc:	1023883a 	mov	r17,r2
 800c3e0:	b00b883a 	mov	r5,r22
 800c3e4:	8009883a 	mov	r4,r16
 800c3e8:	800c8480 	call	800c848 <__udivsi3>
 800c3ec:	8822943a 	slli	r17,r17,16
 800c3f0:	b80b883a 	mov	r5,r23
 800c3f4:	1009883a 	mov	r4,r2
 800c3f8:	800c9040 	call	800c904 <__mulsi3>
 800c3fc:	a53fffcc 	andi	r20,r20,65535
 800c400:	a446b03a 	or	r3,r20,r17
 800c404:	18bfac2e 	bgeu	r3,r2,800c2b8 <__alt_data_end+0xfc00c2b8>
 800c408:	003fa706 	br	800c2a8 <__alt_data_end+0xfc00c2a8>
 800c40c:	2005883a 	mov	r2,r4
 800c410:	2807883a 	mov	r3,r5
 800c414:	dfc00c17 	ldw	ra,48(sp)
 800c418:	df000b17 	ldw	fp,44(sp)
 800c41c:	ddc00a17 	ldw	r23,40(sp)
 800c420:	dd800917 	ldw	r22,36(sp)
 800c424:	dd400817 	ldw	r21,32(sp)
 800c428:	dd000717 	ldw	r20,28(sp)
 800c42c:	dcc00617 	ldw	r19,24(sp)
 800c430:	dc800517 	ldw	r18,20(sp)
 800c434:	dc400417 	ldw	r17,16(sp)
 800c438:	dc000317 	ldw	r16,12(sp)
 800c43c:	dec00d04 	addi	sp,sp,52
 800c440:	f800283a 	ret
 800c444:	04c03fc4 	movi	r19,255
 800c448:	99c9803a 	cmpltu	r4,r19,r7
 800c44c:	200890fa 	slli	r4,r4,3
 800c450:	003fa406 	br	800c2e4 <__alt_data_end+0xfc00c2e4>
 800c454:	00803fc4 	movi	r2,255
 800c458:	14c5803a 	cmpltu	r2,r2,r19
 800c45c:	100490fa 	slli	r2,r2,3
 800c460:	003fbc06 	br	800c354 <__alt_data_end+0xfc00c354>
 800c464:	00804034 	movhi	r2,256
 800c468:	10bfffc4 	addi	r2,r2,-1
 800c46c:	1180a636 	bltu	r2,r6,800c708 <__umoddi3+0x57c>
 800c470:	01000404 	movi	r4,16
 800c474:	003f5c06 	br	800c1e8 <__alt_data_end+0xfc00c1e8>
 800c478:	3d0e983a 	sll	r7,r7,r20
 800c47c:	34ead83a 	srl	r21,r6,r19
 800c480:	8cc6d83a 	srl	r3,r17,r19
 800c484:	8d10983a 	sll	r8,r17,r20
 800c488:	3d6ab03a 	or	r21,r7,r21
 800c48c:	a82cd43a 	srli	r22,r21,16
 800c490:	84e2d83a 	srl	r17,r16,r19
 800c494:	1809883a 	mov	r4,r3
 800c498:	b00b883a 	mov	r5,r22
 800c49c:	8a22b03a 	or	r17,r17,r8
 800c4a0:	3524983a 	sll	r18,r6,r20
 800c4a4:	dc400015 	stw	r17,0(sp)
 800c4a8:	d8c00115 	stw	r3,4(sp)
 800c4ac:	800c8ac0 	call	800c8ac <__umodsi3>
 800c4b0:	d8c00117 	ldw	r3,4(sp)
 800c4b4:	b00b883a 	mov	r5,r22
 800c4b8:	1039883a 	mov	fp,r2
 800c4bc:	1809883a 	mov	r4,r3
 800c4c0:	800c8480 	call	800c848 <__udivsi3>
 800c4c4:	adffffcc 	andi	r23,r21,65535
 800c4c8:	100b883a 	mov	r5,r2
 800c4cc:	b809883a 	mov	r4,r23
 800c4d0:	1023883a 	mov	r17,r2
 800c4d4:	800c9040 	call	800c904 <__mulsi3>
 800c4d8:	d9400017 	ldw	r5,0(sp)
 800c4dc:	e008943a 	slli	r4,fp,16
 800c4e0:	8520983a 	sll	r16,r16,r20
 800c4e4:	2806d43a 	srli	r3,r5,16
 800c4e8:	1906b03a 	or	r3,r3,r4
 800c4ec:	1880042e 	bgeu	r3,r2,800c500 <__umoddi3+0x374>
 800c4f0:	1d47883a 	add	r3,r3,r21
 800c4f4:	893fffc4 	addi	r4,r17,-1
 800c4f8:	1d40892e 	bgeu	r3,r21,800c720 <__umoddi3+0x594>
 800c4fc:	2023883a 	mov	r17,r4
 800c500:	18b9c83a 	sub	fp,r3,r2
 800c504:	b00b883a 	mov	r5,r22
 800c508:	e009883a 	mov	r4,fp
 800c50c:	800c8ac0 	call	800c8ac <__umodsi3>
 800c510:	b00b883a 	mov	r5,r22
 800c514:	e009883a 	mov	r4,fp
 800c518:	d8800215 	stw	r2,8(sp)
 800c51c:	800c8480 	call	800c848 <__udivsi3>
 800c520:	100b883a 	mov	r5,r2
 800c524:	b809883a 	mov	r4,r23
 800c528:	102d883a 	mov	r22,r2
 800c52c:	800c9040 	call	800c904 <__mulsi3>
 800c530:	d9800217 	ldw	r6,8(sp)
 800c534:	d8c00017 	ldw	r3,0(sp)
 800c538:	300c943a 	slli	r6,r6,16
 800c53c:	1a3fffcc 	andi	r8,r3,65535
 800c540:	4190b03a 	or	r8,r8,r6
 800c544:	4080042e 	bgeu	r8,r2,800c558 <__umoddi3+0x3cc>
 800c548:	4551883a 	add	r8,r8,r21
 800c54c:	b0ffffc4 	addi	r3,r22,-1
 800c550:	45406f2e 	bgeu	r8,r21,800c710 <__umoddi3+0x584>
 800c554:	182d883a 	mov	r22,r3
 800c558:	880e943a 	slli	r7,r17,16
 800c55c:	9006d43a 	srli	r3,r18,16
 800c560:	91bfffcc 	andi	r6,r18,65535
 800c564:	3dacb03a 	or	r22,r7,r22
 800c568:	b02ed43a 	srli	r23,r22,16
 800c56c:	b5bfffcc 	andi	r22,r22,65535
 800c570:	300b883a 	mov	r5,r6
 800c574:	b009883a 	mov	r4,r22
 800c578:	40a3c83a 	sub	r17,r8,r2
 800c57c:	d8c00115 	stw	r3,4(sp)
 800c580:	d9800215 	stw	r6,8(sp)
 800c584:	800c9040 	call	800c904 <__mulsi3>
 800c588:	d9800217 	ldw	r6,8(sp)
 800c58c:	b809883a 	mov	r4,r23
 800c590:	1039883a 	mov	fp,r2
 800c594:	300b883a 	mov	r5,r6
 800c598:	800c9040 	call	800c904 <__mulsi3>
 800c59c:	d8c00117 	ldw	r3,4(sp)
 800c5a0:	b809883a 	mov	r4,r23
 800c5a4:	d8800215 	stw	r2,8(sp)
 800c5a8:	180b883a 	mov	r5,r3
 800c5ac:	800c9040 	call	800c904 <__mulsi3>
 800c5b0:	d8c00117 	ldw	r3,4(sp)
 800c5b4:	b009883a 	mov	r4,r22
 800c5b8:	102f883a 	mov	r23,r2
 800c5bc:	180b883a 	mov	r5,r3
 800c5c0:	800c9040 	call	800c904 <__mulsi3>
 800c5c4:	d9800217 	ldw	r6,8(sp)
 800c5c8:	e006d43a 	srli	r3,fp,16
 800c5cc:	1185883a 	add	r2,r2,r6
 800c5d0:	1885883a 	add	r2,r3,r2
 800c5d4:	1180022e 	bgeu	r2,r6,800c5e0 <__umoddi3+0x454>
 800c5d8:	00c00074 	movhi	r3,1
 800c5dc:	b8ef883a 	add	r23,r23,r3
 800c5e0:	1006d43a 	srli	r3,r2,16
 800c5e4:	1004943a 	slli	r2,r2,16
 800c5e8:	e73fffcc 	andi	fp,fp,65535
 800c5ec:	1dc7883a 	add	r3,r3,r23
 800c5f0:	1739883a 	add	fp,r2,fp
 800c5f4:	88c03a36 	bltu	r17,r3,800c6e0 <__umoddi3+0x554>
 800c5f8:	88c05126 	beq	r17,r3,800c740 <__umoddi3+0x5b4>
 800c5fc:	88c9c83a 	sub	r4,r17,r3
 800c600:	e00f883a 	mov	r7,fp
 800c604:	81cfc83a 	sub	r7,r16,r7
 800c608:	81c7803a 	cmpltu	r3,r16,r7
 800c60c:	20c7c83a 	sub	r3,r4,r3
 800c610:	1cc4983a 	sll	r2,r3,r19
 800c614:	3d0ed83a 	srl	r7,r7,r20
 800c618:	1d06d83a 	srl	r3,r3,r20
 800c61c:	11c4b03a 	or	r2,r2,r7
 800c620:	003f7c06 	br	800c414 <__alt_data_end+0xfc00c414>
 800c624:	9ca6983a 	sll	r19,r19,r18
 800c628:	88f8d83a 	srl	fp,r17,r3
 800c62c:	80c4d83a 	srl	r2,r16,r3
 800c630:	982cd43a 	srli	r22,r19,16
 800c634:	8ca2983a 	sll	r17,r17,r18
 800c638:	e009883a 	mov	r4,fp
 800c63c:	b00b883a 	mov	r5,r22
 800c640:	146ab03a 	or	r21,r2,r17
 800c644:	800c8ac0 	call	800c8ac <__umodsi3>
 800c648:	b00b883a 	mov	r5,r22
 800c64c:	e009883a 	mov	r4,fp
 800c650:	1029883a 	mov	r20,r2
 800c654:	9dffffcc 	andi	r23,r19,65535
 800c658:	800c8480 	call	800c848 <__udivsi3>
 800c65c:	b809883a 	mov	r4,r23
 800c660:	100b883a 	mov	r5,r2
 800c664:	800c9040 	call	800c904 <__mulsi3>
 800c668:	a008943a 	slli	r4,r20,16
 800c66c:	a806d43a 	srli	r3,r21,16
 800c670:	84a8983a 	sll	r20,r16,r18
 800c674:	1906b03a 	or	r3,r3,r4
 800c678:	1880042e 	bgeu	r3,r2,800c68c <__umoddi3+0x500>
 800c67c:	1cc7883a 	add	r3,r3,r19
 800c680:	1cc00236 	bltu	r3,r19,800c68c <__umoddi3+0x500>
 800c684:	1880012e 	bgeu	r3,r2,800c68c <__umoddi3+0x500>
 800c688:	1cc7883a 	add	r3,r3,r19
 800c68c:	18a3c83a 	sub	r17,r3,r2
 800c690:	b00b883a 	mov	r5,r22
 800c694:	8809883a 	mov	r4,r17
 800c698:	800c8ac0 	call	800c8ac <__umodsi3>
 800c69c:	b00b883a 	mov	r5,r22
 800c6a0:	8809883a 	mov	r4,r17
 800c6a4:	1021883a 	mov	r16,r2
 800c6a8:	800c8480 	call	800c848 <__udivsi3>
 800c6ac:	100b883a 	mov	r5,r2
 800c6b0:	b809883a 	mov	r4,r23
 800c6b4:	8020943a 	slli	r16,r16,16
 800c6b8:	800c9040 	call	800c904 <__mulsi3>
 800c6bc:	a8ffffcc 	andi	r3,r21,65535
 800c6c0:	1c06b03a 	or	r3,r3,r16
 800c6c4:	1880042e 	bgeu	r3,r2,800c6d8 <__umoddi3+0x54c>
 800c6c8:	1cc7883a 	add	r3,r3,r19
 800c6cc:	1cc00236 	bltu	r3,r19,800c6d8 <__umoddi3+0x54c>
 800c6d0:	1880012e 	bgeu	r3,r2,800c6d8 <__umoddi3+0x54c>
 800c6d4:	1cc7883a 	add	r3,r3,r19
 800c6d8:	18a3c83a 	sub	r17,r3,r2
 800c6dc:	003f2906 	br	800c384 <__alt_data_end+0xfc00c384>
 800c6e0:	e48fc83a 	sub	r7,fp,r18
 800c6e4:	1d49c83a 	sub	r4,r3,r21
 800c6e8:	e1f9803a 	cmpltu	fp,fp,r7
 800c6ec:	2739c83a 	sub	fp,r4,fp
 800c6f0:	8f09c83a 	sub	r4,r17,fp
 800c6f4:	003fc306 	br	800c604 <__alt_data_end+0xfc00c604>
 800c6f8:	01000604 	movi	r4,24
 800c6fc:	003ef906 	br	800c2e4 <__alt_data_end+0xfc00c2e4>
 800c700:	00800604 	movi	r2,24
 800c704:	003f1306 	br	800c354 <__alt_data_end+0xfc00c354>
 800c708:	01000604 	movi	r4,24
 800c70c:	003eb606 	br	800c1e8 <__alt_data_end+0xfc00c1e8>
 800c710:	40bf902e 	bgeu	r8,r2,800c554 <__alt_data_end+0xfc00c554>
 800c714:	b5bfff84 	addi	r22,r22,-2
 800c718:	4551883a 	add	r8,r8,r21
 800c71c:	003f8e06 	br	800c558 <__alt_data_end+0xfc00c558>
 800c720:	18bf762e 	bgeu	r3,r2,800c4fc <__alt_data_end+0xfc00c4fc>
 800c724:	8c7fff84 	addi	r17,r17,-2
 800c728:	1d47883a 	add	r3,r3,r21
 800c72c:	003f7406 	br	800c500 <__alt_data_end+0xfc00c500>
 800c730:	1cc7883a 	add	r3,r3,r19
 800c734:	003ecd06 	br	800c26c <__alt_data_end+0xfc00c26c>
 800c738:	8005883a 	mov	r2,r16
 800c73c:	003ef806 	br	800c320 <__alt_data_end+0xfc00c320>
 800c740:	873fe736 	bltu	r16,fp,800c6e0 <__alt_data_end+0xfc00c6e0>
 800c744:	e00f883a 	mov	r7,fp
 800c748:	0009883a 	mov	r4,zero
 800c74c:	003fad06 	br	800c604 <__alt_data_end+0xfc00c604>

0800c750 <__divsi3>:
 800c750:	20001b16 	blt	r4,zero,800c7c0 <__divsi3+0x70>
 800c754:	000f883a 	mov	r7,zero
 800c758:	28001616 	blt	r5,zero,800c7b4 <__divsi3+0x64>
 800c75c:	200d883a 	mov	r6,r4
 800c760:	29001a2e 	bgeu	r5,r4,800c7cc <__divsi3+0x7c>
 800c764:	00800804 	movi	r2,32
 800c768:	00c00044 	movi	r3,1
 800c76c:	00000106 	br	800c774 <__divsi3+0x24>
 800c770:	10000d26 	beq	r2,zero,800c7a8 <__divsi3+0x58>
 800c774:	294b883a 	add	r5,r5,r5
 800c778:	10bfffc4 	addi	r2,r2,-1
 800c77c:	18c7883a 	add	r3,r3,r3
 800c780:	293ffb36 	bltu	r5,r4,800c770 <__alt_data_end+0xfc00c770>
 800c784:	0005883a 	mov	r2,zero
 800c788:	18000726 	beq	r3,zero,800c7a8 <__divsi3+0x58>
 800c78c:	0005883a 	mov	r2,zero
 800c790:	31400236 	bltu	r6,r5,800c79c <__divsi3+0x4c>
 800c794:	314dc83a 	sub	r6,r6,r5
 800c798:	10c4b03a 	or	r2,r2,r3
 800c79c:	1806d07a 	srli	r3,r3,1
 800c7a0:	280ad07a 	srli	r5,r5,1
 800c7a4:	183ffa1e 	bne	r3,zero,800c790 <__alt_data_end+0xfc00c790>
 800c7a8:	38000126 	beq	r7,zero,800c7b0 <__divsi3+0x60>
 800c7ac:	0085c83a 	sub	r2,zero,r2
 800c7b0:	f800283a 	ret
 800c7b4:	014bc83a 	sub	r5,zero,r5
 800c7b8:	39c0005c 	xori	r7,r7,1
 800c7bc:	003fe706 	br	800c75c <__alt_data_end+0xfc00c75c>
 800c7c0:	0109c83a 	sub	r4,zero,r4
 800c7c4:	01c00044 	movi	r7,1
 800c7c8:	003fe306 	br	800c758 <__alt_data_end+0xfc00c758>
 800c7cc:	00c00044 	movi	r3,1
 800c7d0:	003fee06 	br	800c78c <__alt_data_end+0xfc00c78c>

0800c7d4 <__modsi3>:
 800c7d4:	20001716 	blt	r4,zero,800c834 <__modsi3+0x60>
 800c7d8:	000f883a 	mov	r7,zero
 800c7dc:	2005883a 	mov	r2,r4
 800c7e0:	28001216 	blt	r5,zero,800c82c <__modsi3+0x58>
 800c7e4:	2900162e 	bgeu	r5,r4,800c840 <__modsi3+0x6c>
 800c7e8:	01800804 	movi	r6,32
 800c7ec:	00c00044 	movi	r3,1
 800c7f0:	00000106 	br	800c7f8 <__modsi3+0x24>
 800c7f4:	30000a26 	beq	r6,zero,800c820 <__modsi3+0x4c>
 800c7f8:	294b883a 	add	r5,r5,r5
 800c7fc:	31bfffc4 	addi	r6,r6,-1
 800c800:	18c7883a 	add	r3,r3,r3
 800c804:	293ffb36 	bltu	r5,r4,800c7f4 <__alt_data_end+0xfc00c7f4>
 800c808:	18000526 	beq	r3,zero,800c820 <__modsi3+0x4c>
 800c80c:	1806d07a 	srli	r3,r3,1
 800c810:	11400136 	bltu	r2,r5,800c818 <__modsi3+0x44>
 800c814:	1145c83a 	sub	r2,r2,r5
 800c818:	280ad07a 	srli	r5,r5,1
 800c81c:	183ffb1e 	bne	r3,zero,800c80c <__alt_data_end+0xfc00c80c>
 800c820:	38000126 	beq	r7,zero,800c828 <__modsi3+0x54>
 800c824:	0085c83a 	sub	r2,zero,r2
 800c828:	f800283a 	ret
 800c82c:	014bc83a 	sub	r5,zero,r5
 800c830:	003fec06 	br	800c7e4 <__alt_data_end+0xfc00c7e4>
 800c834:	0109c83a 	sub	r4,zero,r4
 800c838:	01c00044 	movi	r7,1
 800c83c:	003fe706 	br	800c7dc <__alt_data_end+0xfc00c7dc>
 800c840:	00c00044 	movi	r3,1
 800c844:	003ff106 	br	800c80c <__alt_data_end+0xfc00c80c>

0800c848 <__udivsi3>:
 800c848:	200d883a 	mov	r6,r4
 800c84c:	2900152e 	bgeu	r5,r4,800c8a4 <__udivsi3+0x5c>
 800c850:	28001416 	blt	r5,zero,800c8a4 <__udivsi3+0x5c>
 800c854:	00800804 	movi	r2,32
 800c858:	00c00044 	movi	r3,1
 800c85c:	00000206 	br	800c868 <__udivsi3+0x20>
 800c860:	10000e26 	beq	r2,zero,800c89c <__udivsi3+0x54>
 800c864:	28000516 	blt	r5,zero,800c87c <__udivsi3+0x34>
 800c868:	294b883a 	add	r5,r5,r5
 800c86c:	10bfffc4 	addi	r2,r2,-1
 800c870:	18c7883a 	add	r3,r3,r3
 800c874:	293ffa36 	bltu	r5,r4,800c860 <__alt_data_end+0xfc00c860>
 800c878:	18000826 	beq	r3,zero,800c89c <__udivsi3+0x54>
 800c87c:	0005883a 	mov	r2,zero
 800c880:	31400236 	bltu	r6,r5,800c88c <__udivsi3+0x44>
 800c884:	314dc83a 	sub	r6,r6,r5
 800c888:	10c4b03a 	or	r2,r2,r3
 800c88c:	1806d07a 	srli	r3,r3,1
 800c890:	280ad07a 	srli	r5,r5,1
 800c894:	183ffa1e 	bne	r3,zero,800c880 <__alt_data_end+0xfc00c880>
 800c898:	f800283a 	ret
 800c89c:	0005883a 	mov	r2,zero
 800c8a0:	f800283a 	ret
 800c8a4:	00c00044 	movi	r3,1
 800c8a8:	003ff406 	br	800c87c <__alt_data_end+0xfc00c87c>

0800c8ac <__umodsi3>:
 800c8ac:	2005883a 	mov	r2,r4
 800c8b0:	2900122e 	bgeu	r5,r4,800c8fc <__umodsi3+0x50>
 800c8b4:	28001116 	blt	r5,zero,800c8fc <__umodsi3+0x50>
 800c8b8:	01800804 	movi	r6,32
 800c8bc:	00c00044 	movi	r3,1
 800c8c0:	00000206 	br	800c8cc <__umodsi3+0x20>
 800c8c4:	30000c26 	beq	r6,zero,800c8f8 <__umodsi3+0x4c>
 800c8c8:	28000516 	blt	r5,zero,800c8e0 <__umodsi3+0x34>
 800c8cc:	294b883a 	add	r5,r5,r5
 800c8d0:	31bfffc4 	addi	r6,r6,-1
 800c8d4:	18c7883a 	add	r3,r3,r3
 800c8d8:	293ffa36 	bltu	r5,r4,800c8c4 <__alt_data_end+0xfc00c8c4>
 800c8dc:	18000626 	beq	r3,zero,800c8f8 <__umodsi3+0x4c>
 800c8e0:	1806d07a 	srli	r3,r3,1
 800c8e4:	11400136 	bltu	r2,r5,800c8ec <__umodsi3+0x40>
 800c8e8:	1145c83a 	sub	r2,r2,r5
 800c8ec:	280ad07a 	srli	r5,r5,1
 800c8f0:	183ffb1e 	bne	r3,zero,800c8e0 <__alt_data_end+0xfc00c8e0>
 800c8f4:	f800283a 	ret
 800c8f8:	f800283a 	ret
 800c8fc:	00c00044 	movi	r3,1
 800c900:	003ff706 	br	800c8e0 <__alt_data_end+0xfc00c8e0>

0800c904 <__mulsi3>:
 800c904:	0005883a 	mov	r2,zero
 800c908:	20000726 	beq	r4,zero,800c928 <__mulsi3+0x24>
 800c90c:	20c0004c 	andi	r3,r4,1
 800c910:	2008d07a 	srli	r4,r4,1
 800c914:	18000126 	beq	r3,zero,800c91c <__mulsi3+0x18>
 800c918:	1145883a 	add	r2,r2,r5
 800c91c:	294b883a 	add	r5,r5,r5
 800c920:	203ffa1e 	bne	r4,zero,800c90c <__alt_data_end+0xfc00c90c>
 800c924:	f800283a 	ret
 800c928:	f800283a 	ret

0800c92c <__adddf3>:
 800c92c:	02c00434 	movhi	r11,16
 800c930:	5affffc4 	addi	r11,r11,-1
 800c934:	2806d7fa 	srli	r3,r5,31
 800c938:	2ad4703a 	and	r10,r5,r11
 800c93c:	3ad2703a 	and	r9,r7,r11
 800c940:	3804d53a 	srli	r2,r7,20
 800c944:	3018d77a 	srli	r12,r6,29
 800c948:	280ad53a 	srli	r5,r5,20
 800c94c:	501490fa 	slli	r10,r10,3
 800c950:	2010d77a 	srli	r8,r4,29
 800c954:	481290fa 	slli	r9,r9,3
 800c958:	380ed7fa 	srli	r7,r7,31
 800c95c:	defffb04 	addi	sp,sp,-20
 800c960:	dc800215 	stw	r18,8(sp)
 800c964:	dc400115 	stw	r17,4(sp)
 800c968:	dc000015 	stw	r16,0(sp)
 800c96c:	dfc00415 	stw	ra,16(sp)
 800c970:	dcc00315 	stw	r19,12(sp)
 800c974:	1c803fcc 	andi	r18,r3,255
 800c978:	2c01ffcc 	andi	r16,r5,2047
 800c97c:	5210b03a 	or	r8,r10,r8
 800c980:	202290fa 	slli	r17,r4,3
 800c984:	1081ffcc 	andi	r2,r2,2047
 800c988:	4b12b03a 	or	r9,r9,r12
 800c98c:	300c90fa 	slli	r6,r6,3
 800c990:	91c07526 	beq	r18,r7,800cb68 <__adddf3+0x23c>
 800c994:	8087c83a 	sub	r3,r16,r2
 800c998:	00c0ab0e 	bge	zero,r3,800cc48 <__adddf3+0x31c>
 800c99c:	10002a1e 	bne	r2,zero,800ca48 <__adddf3+0x11c>
 800c9a0:	4984b03a 	or	r2,r9,r6
 800c9a4:	1000961e 	bne	r2,zero,800cc00 <__adddf3+0x2d4>
 800c9a8:	888001cc 	andi	r2,r17,7
 800c9ac:	10000726 	beq	r2,zero,800c9cc <__adddf3+0xa0>
 800c9b0:	888003cc 	andi	r2,r17,15
 800c9b4:	00c00104 	movi	r3,4
 800c9b8:	10c00426 	beq	r2,r3,800c9cc <__adddf3+0xa0>
 800c9bc:	88c7883a 	add	r3,r17,r3
 800c9c0:	1c63803a 	cmpltu	r17,r3,r17
 800c9c4:	4451883a 	add	r8,r8,r17
 800c9c8:	1823883a 	mov	r17,r3
 800c9cc:	4080202c 	andhi	r2,r8,128
 800c9d0:	10005926 	beq	r2,zero,800cb38 <__adddf3+0x20c>
 800c9d4:	84000044 	addi	r16,r16,1
 800c9d8:	0081ffc4 	movi	r2,2047
 800c9dc:	8080ba26 	beq	r16,r2,800ccc8 <__adddf3+0x39c>
 800c9e0:	00bfe034 	movhi	r2,65408
 800c9e4:	10bfffc4 	addi	r2,r2,-1
 800c9e8:	4090703a 	and	r8,r8,r2
 800c9ec:	4004977a 	slli	r2,r8,29
 800c9f0:	4010927a 	slli	r8,r8,9
 800c9f4:	8822d0fa 	srli	r17,r17,3
 800c9f8:	8401ffcc 	andi	r16,r16,2047
 800c9fc:	4010d33a 	srli	r8,r8,12
 800ca00:	9007883a 	mov	r3,r18
 800ca04:	1444b03a 	or	r2,r2,r17
 800ca08:	8401ffcc 	andi	r16,r16,2047
 800ca0c:	8020953a 	slli	r16,r16,20
 800ca10:	18c03fcc 	andi	r3,r3,255
 800ca14:	01000434 	movhi	r4,16
 800ca18:	213fffc4 	addi	r4,r4,-1
 800ca1c:	180697fa 	slli	r3,r3,31
 800ca20:	4110703a 	and	r8,r8,r4
 800ca24:	4410b03a 	or	r8,r8,r16
 800ca28:	40c6b03a 	or	r3,r8,r3
 800ca2c:	dfc00417 	ldw	ra,16(sp)
 800ca30:	dcc00317 	ldw	r19,12(sp)
 800ca34:	dc800217 	ldw	r18,8(sp)
 800ca38:	dc400117 	ldw	r17,4(sp)
 800ca3c:	dc000017 	ldw	r16,0(sp)
 800ca40:	dec00504 	addi	sp,sp,20
 800ca44:	f800283a 	ret
 800ca48:	0081ffc4 	movi	r2,2047
 800ca4c:	80bfd626 	beq	r16,r2,800c9a8 <__alt_data_end+0xfc00c9a8>
 800ca50:	4a402034 	orhi	r9,r9,128
 800ca54:	00800e04 	movi	r2,56
 800ca58:	10c09f16 	blt	r2,r3,800ccd8 <__adddf3+0x3ac>
 800ca5c:	008007c4 	movi	r2,31
 800ca60:	10c0c216 	blt	r2,r3,800cd6c <__adddf3+0x440>
 800ca64:	00800804 	movi	r2,32
 800ca68:	10c5c83a 	sub	r2,r2,r3
 800ca6c:	488a983a 	sll	r5,r9,r2
 800ca70:	30c8d83a 	srl	r4,r6,r3
 800ca74:	3084983a 	sll	r2,r6,r2
 800ca78:	48c6d83a 	srl	r3,r9,r3
 800ca7c:	290cb03a 	or	r6,r5,r4
 800ca80:	1004c03a 	cmpne	r2,r2,zero
 800ca84:	308cb03a 	or	r6,r6,r2
 800ca88:	898dc83a 	sub	r6,r17,r6
 800ca8c:	89a3803a 	cmpltu	r17,r17,r6
 800ca90:	40d1c83a 	sub	r8,r8,r3
 800ca94:	4451c83a 	sub	r8,r8,r17
 800ca98:	3023883a 	mov	r17,r6
 800ca9c:	4080202c 	andhi	r2,r8,128
 800caa0:	10002326 	beq	r2,zero,800cb30 <__adddf3+0x204>
 800caa4:	04c02034 	movhi	r19,128
 800caa8:	9cffffc4 	addi	r19,r19,-1
 800caac:	44e6703a 	and	r19,r8,r19
 800cab0:	98007626 	beq	r19,zero,800cc8c <__adddf3+0x360>
 800cab4:	9809883a 	mov	r4,r19
 800cab8:	800f16c0 	call	800f16c <__clzsi2>
 800cabc:	10fffe04 	addi	r3,r2,-8
 800cac0:	010007c4 	movi	r4,31
 800cac4:	20c07716 	blt	r4,r3,800cca4 <__adddf3+0x378>
 800cac8:	00800804 	movi	r2,32
 800cacc:	10c5c83a 	sub	r2,r2,r3
 800cad0:	8884d83a 	srl	r2,r17,r2
 800cad4:	98d0983a 	sll	r8,r19,r3
 800cad8:	88e2983a 	sll	r17,r17,r3
 800cadc:	1204b03a 	or	r2,r2,r8
 800cae0:	1c007416 	blt	r3,r16,800ccb4 <__adddf3+0x388>
 800cae4:	1c21c83a 	sub	r16,r3,r16
 800cae8:	82000044 	addi	r8,r16,1
 800caec:	00c007c4 	movi	r3,31
 800caf0:	1a009116 	blt	r3,r8,800cd38 <__adddf3+0x40c>
 800caf4:	00c00804 	movi	r3,32
 800caf8:	1a07c83a 	sub	r3,r3,r8
 800cafc:	8a08d83a 	srl	r4,r17,r8
 800cb00:	88e2983a 	sll	r17,r17,r3
 800cb04:	10c6983a 	sll	r3,r2,r3
 800cb08:	1210d83a 	srl	r8,r2,r8
 800cb0c:	8804c03a 	cmpne	r2,r17,zero
 800cb10:	1906b03a 	or	r3,r3,r4
 800cb14:	18a2b03a 	or	r17,r3,r2
 800cb18:	0021883a 	mov	r16,zero
 800cb1c:	003fa206 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cb20:	1890b03a 	or	r8,r3,r2
 800cb24:	40017d26 	beq	r8,zero,800d11c <__adddf3+0x7f0>
 800cb28:	1011883a 	mov	r8,r2
 800cb2c:	1823883a 	mov	r17,r3
 800cb30:	888001cc 	andi	r2,r17,7
 800cb34:	103f9e1e 	bne	r2,zero,800c9b0 <__alt_data_end+0xfc00c9b0>
 800cb38:	4004977a 	slli	r2,r8,29
 800cb3c:	8822d0fa 	srli	r17,r17,3
 800cb40:	4010d0fa 	srli	r8,r8,3
 800cb44:	9007883a 	mov	r3,r18
 800cb48:	1444b03a 	or	r2,r2,r17
 800cb4c:	0101ffc4 	movi	r4,2047
 800cb50:	81002426 	beq	r16,r4,800cbe4 <__adddf3+0x2b8>
 800cb54:	8120703a 	and	r16,r16,r4
 800cb58:	01000434 	movhi	r4,16
 800cb5c:	213fffc4 	addi	r4,r4,-1
 800cb60:	4110703a 	and	r8,r8,r4
 800cb64:	003fa806 	br	800ca08 <__alt_data_end+0xfc00ca08>
 800cb68:	8089c83a 	sub	r4,r16,r2
 800cb6c:	01005e0e 	bge	zero,r4,800cce8 <__adddf3+0x3bc>
 800cb70:	10002b26 	beq	r2,zero,800cc20 <__adddf3+0x2f4>
 800cb74:	0081ffc4 	movi	r2,2047
 800cb78:	80bf8b26 	beq	r16,r2,800c9a8 <__alt_data_end+0xfc00c9a8>
 800cb7c:	4a402034 	orhi	r9,r9,128
 800cb80:	00800e04 	movi	r2,56
 800cb84:	1100a40e 	bge	r2,r4,800ce18 <__adddf3+0x4ec>
 800cb88:	498cb03a 	or	r6,r9,r6
 800cb8c:	300ac03a 	cmpne	r5,r6,zero
 800cb90:	0013883a 	mov	r9,zero
 800cb94:	2c4b883a 	add	r5,r5,r17
 800cb98:	2c63803a 	cmpltu	r17,r5,r17
 800cb9c:	4a11883a 	add	r8,r9,r8
 800cba0:	8a11883a 	add	r8,r17,r8
 800cba4:	2823883a 	mov	r17,r5
 800cba8:	4080202c 	andhi	r2,r8,128
 800cbac:	103fe026 	beq	r2,zero,800cb30 <__alt_data_end+0xfc00cb30>
 800cbb0:	84000044 	addi	r16,r16,1
 800cbb4:	0081ffc4 	movi	r2,2047
 800cbb8:	8080d226 	beq	r16,r2,800cf04 <__adddf3+0x5d8>
 800cbbc:	00bfe034 	movhi	r2,65408
 800cbc0:	10bfffc4 	addi	r2,r2,-1
 800cbc4:	4090703a 	and	r8,r8,r2
 800cbc8:	880ad07a 	srli	r5,r17,1
 800cbcc:	400897fa 	slli	r4,r8,31
 800cbd0:	88c0004c 	andi	r3,r17,1
 800cbd4:	28e2b03a 	or	r17,r5,r3
 800cbd8:	4010d07a 	srli	r8,r8,1
 800cbdc:	2462b03a 	or	r17,r4,r17
 800cbe0:	003f7106 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cbe4:	4088b03a 	or	r4,r8,r2
 800cbe8:	20014526 	beq	r4,zero,800d100 <__adddf3+0x7d4>
 800cbec:	01000434 	movhi	r4,16
 800cbf0:	42000234 	orhi	r8,r8,8
 800cbf4:	213fffc4 	addi	r4,r4,-1
 800cbf8:	4110703a 	and	r8,r8,r4
 800cbfc:	003f8206 	br	800ca08 <__alt_data_end+0xfc00ca08>
 800cc00:	18ffffc4 	addi	r3,r3,-1
 800cc04:	1800491e 	bne	r3,zero,800cd2c <__adddf3+0x400>
 800cc08:	898bc83a 	sub	r5,r17,r6
 800cc0c:	8963803a 	cmpltu	r17,r17,r5
 800cc10:	4251c83a 	sub	r8,r8,r9
 800cc14:	4451c83a 	sub	r8,r8,r17
 800cc18:	2823883a 	mov	r17,r5
 800cc1c:	003f9f06 	br	800ca9c <__alt_data_end+0xfc00ca9c>
 800cc20:	4984b03a 	or	r2,r9,r6
 800cc24:	103f6026 	beq	r2,zero,800c9a8 <__alt_data_end+0xfc00c9a8>
 800cc28:	213fffc4 	addi	r4,r4,-1
 800cc2c:	2000931e 	bne	r4,zero,800ce7c <__adddf3+0x550>
 800cc30:	898d883a 	add	r6,r17,r6
 800cc34:	3463803a 	cmpltu	r17,r6,r17
 800cc38:	4251883a 	add	r8,r8,r9
 800cc3c:	8a11883a 	add	r8,r17,r8
 800cc40:	3023883a 	mov	r17,r6
 800cc44:	003fd806 	br	800cba8 <__alt_data_end+0xfc00cba8>
 800cc48:	1800541e 	bne	r3,zero,800cd9c <__adddf3+0x470>
 800cc4c:	80800044 	addi	r2,r16,1
 800cc50:	1081ffcc 	andi	r2,r2,2047
 800cc54:	00c00044 	movi	r3,1
 800cc58:	1880a00e 	bge	r3,r2,800cedc <__adddf3+0x5b0>
 800cc5c:	8989c83a 	sub	r4,r17,r6
 800cc60:	8905803a 	cmpltu	r2,r17,r4
 800cc64:	4267c83a 	sub	r19,r8,r9
 800cc68:	98a7c83a 	sub	r19,r19,r2
 800cc6c:	9880202c 	andhi	r2,r19,128
 800cc70:	10006326 	beq	r2,zero,800ce00 <__adddf3+0x4d4>
 800cc74:	3463c83a 	sub	r17,r6,r17
 800cc78:	4a07c83a 	sub	r3,r9,r8
 800cc7c:	344d803a 	cmpltu	r6,r6,r17
 800cc80:	19a7c83a 	sub	r19,r3,r6
 800cc84:	3825883a 	mov	r18,r7
 800cc88:	983f8a1e 	bne	r19,zero,800cab4 <__alt_data_end+0xfc00cab4>
 800cc8c:	8809883a 	mov	r4,r17
 800cc90:	800f16c0 	call	800f16c <__clzsi2>
 800cc94:	10800804 	addi	r2,r2,32
 800cc98:	10fffe04 	addi	r3,r2,-8
 800cc9c:	010007c4 	movi	r4,31
 800cca0:	20ff890e 	bge	r4,r3,800cac8 <__alt_data_end+0xfc00cac8>
 800cca4:	10bff604 	addi	r2,r2,-40
 800cca8:	8884983a 	sll	r2,r17,r2
 800ccac:	0023883a 	mov	r17,zero
 800ccb0:	1c3f8c0e 	bge	r3,r16,800cae4 <__alt_data_end+0xfc00cae4>
 800ccb4:	023fe034 	movhi	r8,65408
 800ccb8:	423fffc4 	addi	r8,r8,-1
 800ccbc:	80e1c83a 	sub	r16,r16,r3
 800ccc0:	1210703a 	and	r8,r2,r8
 800ccc4:	003f3806 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800ccc8:	9007883a 	mov	r3,r18
 800cccc:	0011883a 	mov	r8,zero
 800ccd0:	0005883a 	mov	r2,zero
 800ccd4:	003f4c06 	br	800ca08 <__alt_data_end+0xfc00ca08>
 800ccd8:	498cb03a 	or	r6,r9,r6
 800ccdc:	300cc03a 	cmpne	r6,r6,zero
 800cce0:	0007883a 	mov	r3,zero
 800cce4:	003f6806 	br	800ca88 <__alt_data_end+0xfc00ca88>
 800cce8:	20009c1e 	bne	r4,zero,800cf5c <__adddf3+0x630>
 800ccec:	80800044 	addi	r2,r16,1
 800ccf0:	1141ffcc 	andi	r5,r2,2047
 800ccf4:	01000044 	movi	r4,1
 800ccf8:	2140670e 	bge	r4,r5,800ce98 <__adddf3+0x56c>
 800ccfc:	0101ffc4 	movi	r4,2047
 800cd00:	11007f26 	beq	r2,r4,800cf00 <__adddf3+0x5d4>
 800cd04:	898d883a 	add	r6,r17,r6
 800cd08:	4247883a 	add	r3,r8,r9
 800cd0c:	3451803a 	cmpltu	r8,r6,r17
 800cd10:	40d1883a 	add	r8,r8,r3
 800cd14:	402297fa 	slli	r17,r8,31
 800cd18:	300cd07a 	srli	r6,r6,1
 800cd1c:	4010d07a 	srli	r8,r8,1
 800cd20:	1021883a 	mov	r16,r2
 800cd24:	89a2b03a 	or	r17,r17,r6
 800cd28:	003f1f06 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cd2c:	0081ffc4 	movi	r2,2047
 800cd30:	80bf481e 	bne	r16,r2,800ca54 <__alt_data_end+0xfc00ca54>
 800cd34:	003f1c06 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cd38:	843ff844 	addi	r16,r16,-31
 800cd3c:	01000804 	movi	r4,32
 800cd40:	1406d83a 	srl	r3,r2,r16
 800cd44:	41005026 	beq	r8,r4,800ce88 <__adddf3+0x55c>
 800cd48:	01001004 	movi	r4,64
 800cd4c:	2211c83a 	sub	r8,r4,r8
 800cd50:	1204983a 	sll	r2,r2,r8
 800cd54:	88a2b03a 	or	r17,r17,r2
 800cd58:	8822c03a 	cmpne	r17,r17,zero
 800cd5c:	1c62b03a 	or	r17,r3,r17
 800cd60:	0011883a 	mov	r8,zero
 800cd64:	0021883a 	mov	r16,zero
 800cd68:	003f7106 	br	800cb30 <__alt_data_end+0xfc00cb30>
 800cd6c:	193ff804 	addi	r4,r3,-32
 800cd70:	00800804 	movi	r2,32
 800cd74:	4908d83a 	srl	r4,r9,r4
 800cd78:	18804526 	beq	r3,r2,800ce90 <__adddf3+0x564>
 800cd7c:	00801004 	movi	r2,64
 800cd80:	10c5c83a 	sub	r2,r2,r3
 800cd84:	4886983a 	sll	r3,r9,r2
 800cd88:	198cb03a 	or	r6,r3,r6
 800cd8c:	300cc03a 	cmpne	r6,r6,zero
 800cd90:	218cb03a 	or	r6,r4,r6
 800cd94:	0007883a 	mov	r3,zero
 800cd98:	003f3b06 	br	800ca88 <__alt_data_end+0xfc00ca88>
 800cd9c:	80002a26 	beq	r16,zero,800ce48 <__adddf3+0x51c>
 800cda0:	0101ffc4 	movi	r4,2047
 800cda4:	11006826 	beq	r2,r4,800cf48 <__adddf3+0x61c>
 800cda8:	00c7c83a 	sub	r3,zero,r3
 800cdac:	42002034 	orhi	r8,r8,128
 800cdb0:	01000e04 	movi	r4,56
 800cdb4:	20c07c16 	blt	r4,r3,800cfa8 <__adddf3+0x67c>
 800cdb8:	010007c4 	movi	r4,31
 800cdbc:	20c0da16 	blt	r4,r3,800d128 <__adddf3+0x7fc>
 800cdc0:	01000804 	movi	r4,32
 800cdc4:	20c9c83a 	sub	r4,r4,r3
 800cdc8:	4114983a 	sll	r10,r8,r4
 800cdcc:	88cad83a 	srl	r5,r17,r3
 800cdd0:	8908983a 	sll	r4,r17,r4
 800cdd4:	40c6d83a 	srl	r3,r8,r3
 800cdd8:	5162b03a 	or	r17,r10,r5
 800cddc:	2008c03a 	cmpne	r4,r4,zero
 800cde0:	8922b03a 	or	r17,r17,r4
 800cde4:	3463c83a 	sub	r17,r6,r17
 800cde8:	48c7c83a 	sub	r3,r9,r3
 800cdec:	344d803a 	cmpltu	r6,r6,r17
 800cdf0:	1991c83a 	sub	r8,r3,r6
 800cdf4:	1021883a 	mov	r16,r2
 800cdf8:	3825883a 	mov	r18,r7
 800cdfc:	003f2706 	br	800ca9c <__alt_data_end+0xfc00ca9c>
 800ce00:	24d0b03a 	or	r8,r4,r19
 800ce04:	40001b1e 	bne	r8,zero,800ce74 <__adddf3+0x548>
 800ce08:	0005883a 	mov	r2,zero
 800ce0c:	0007883a 	mov	r3,zero
 800ce10:	0021883a 	mov	r16,zero
 800ce14:	003f4d06 	br	800cb4c <__alt_data_end+0xfc00cb4c>
 800ce18:	008007c4 	movi	r2,31
 800ce1c:	11003c16 	blt	r2,r4,800cf10 <__adddf3+0x5e4>
 800ce20:	00800804 	movi	r2,32
 800ce24:	1105c83a 	sub	r2,r2,r4
 800ce28:	488e983a 	sll	r7,r9,r2
 800ce2c:	310ad83a 	srl	r5,r6,r4
 800ce30:	3084983a 	sll	r2,r6,r2
 800ce34:	4912d83a 	srl	r9,r9,r4
 800ce38:	394ab03a 	or	r5,r7,r5
 800ce3c:	1004c03a 	cmpne	r2,r2,zero
 800ce40:	288ab03a 	or	r5,r5,r2
 800ce44:	003f5306 	br	800cb94 <__alt_data_end+0xfc00cb94>
 800ce48:	4448b03a 	or	r4,r8,r17
 800ce4c:	20003e26 	beq	r4,zero,800cf48 <__adddf3+0x61c>
 800ce50:	00c6303a 	nor	r3,zero,r3
 800ce54:	18003a1e 	bne	r3,zero,800cf40 <__adddf3+0x614>
 800ce58:	3463c83a 	sub	r17,r6,r17
 800ce5c:	4a07c83a 	sub	r3,r9,r8
 800ce60:	344d803a 	cmpltu	r6,r6,r17
 800ce64:	1991c83a 	sub	r8,r3,r6
 800ce68:	1021883a 	mov	r16,r2
 800ce6c:	3825883a 	mov	r18,r7
 800ce70:	003f0a06 	br	800ca9c <__alt_data_end+0xfc00ca9c>
 800ce74:	2023883a 	mov	r17,r4
 800ce78:	003f0d06 	br	800cab0 <__alt_data_end+0xfc00cab0>
 800ce7c:	0081ffc4 	movi	r2,2047
 800ce80:	80bf3f1e 	bne	r16,r2,800cb80 <__alt_data_end+0xfc00cb80>
 800ce84:	003ec806 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800ce88:	0005883a 	mov	r2,zero
 800ce8c:	003fb106 	br	800cd54 <__alt_data_end+0xfc00cd54>
 800ce90:	0007883a 	mov	r3,zero
 800ce94:	003fbc06 	br	800cd88 <__alt_data_end+0xfc00cd88>
 800ce98:	4444b03a 	or	r2,r8,r17
 800ce9c:	8000871e 	bne	r16,zero,800d0bc <__adddf3+0x790>
 800cea0:	1000ba26 	beq	r2,zero,800d18c <__adddf3+0x860>
 800cea4:	4984b03a 	or	r2,r9,r6
 800cea8:	103ebf26 	beq	r2,zero,800c9a8 <__alt_data_end+0xfc00c9a8>
 800ceac:	8985883a 	add	r2,r17,r6
 800ceb0:	4247883a 	add	r3,r8,r9
 800ceb4:	1451803a 	cmpltu	r8,r2,r17
 800ceb8:	40d1883a 	add	r8,r8,r3
 800cebc:	40c0202c 	andhi	r3,r8,128
 800cec0:	1023883a 	mov	r17,r2
 800cec4:	183f1a26 	beq	r3,zero,800cb30 <__alt_data_end+0xfc00cb30>
 800cec8:	00bfe034 	movhi	r2,65408
 800cecc:	10bfffc4 	addi	r2,r2,-1
 800ced0:	2021883a 	mov	r16,r4
 800ced4:	4090703a 	and	r8,r8,r2
 800ced8:	003eb306 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cedc:	4444b03a 	or	r2,r8,r17
 800cee0:	8000291e 	bne	r16,zero,800cf88 <__adddf3+0x65c>
 800cee4:	10004b1e 	bne	r2,zero,800d014 <__adddf3+0x6e8>
 800cee8:	4990b03a 	or	r8,r9,r6
 800ceec:	40008b26 	beq	r8,zero,800d11c <__adddf3+0x7f0>
 800cef0:	4811883a 	mov	r8,r9
 800cef4:	3023883a 	mov	r17,r6
 800cef8:	3825883a 	mov	r18,r7
 800cefc:	003eaa06 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cf00:	1021883a 	mov	r16,r2
 800cf04:	0011883a 	mov	r8,zero
 800cf08:	0005883a 	mov	r2,zero
 800cf0c:	003f0f06 	br	800cb4c <__alt_data_end+0xfc00cb4c>
 800cf10:	217ff804 	addi	r5,r4,-32
 800cf14:	00800804 	movi	r2,32
 800cf18:	494ad83a 	srl	r5,r9,r5
 800cf1c:	20807d26 	beq	r4,r2,800d114 <__adddf3+0x7e8>
 800cf20:	00801004 	movi	r2,64
 800cf24:	1109c83a 	sub	r4,r2,r4
 800cf28:	4912983a 	sll	r9,r9,r4
 800cf2c:	498cb03a 	or	r6,r9,r6
 800cf30:	300cc03a 	cmpne	r6,r6,zero
 800cf34:	298ab03a 	or	r5,r5,r6
 800cf38:	0013883a 	mov	r9,zero
 800cf3c:	003f1506 	br	800cb94 <__alt_data_end+0xfc00cb94>
 800cf40:	0101ffc4 	movi	r4,2047
 800cf44:	113f9a1e 	bne	r2,r4,800cdb0 <__alt_data_end+0xfc00cdb0>
 800cf48:	4811883a 	mov	r8,r9
 800cf4c:	3023883a 	mov	r17,r6
 800cf50:	1021883a 	mov	r16,r2
 800cf54:	3825883a 	mov	r18,r7
 800cf58:	003e9306 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cf5c:	8000161e 	bne	r16,zero,800cfb8 <__adddf3+0x68c>
 800cf60:	444ab03a 	or	r5,r8,r17
 800cf64:	28005126 	beq	r5,zero,800d0ac <__adddf3+0x780>
 800cf68:	0108303a 	nor	r4,zero,r4
 800cf6c:	20004d1e 	bne	r4,zero,800d0a4 <__adddf3+0x778>
 800cf70:	89a3883a 	add	r17,r17,r6
 800cf74:	4253883a 	add	r9,r8,r9
 800cf78:	898d803a 	cmpltu	r6,r17,r6
 800cf7c:	3251883a 	add	r8,r6,r9
 800cf80:	1021883a 	mov	r16,r2
 800cf84:	003f0806 	br	800cba8 <__alt_data_end+0xfc00cba8>
 800cf88:	1000301e 	bne	r2,zero,800d04c <__adddf3+0x720>
 800cf8c:	4984b03a 	or	r2,r9,r6
 800cf90:	10007126 	beq	r2,zero,800d158 <__adddf3+0x82c>
 800cf94:	4811883a 	mov	r8,r9
 800cf98:	3023883a 	mov	r17,r6
 800cf9c:	3825883a 	mov	r18,r7
 800cfa0:	0401ffc4 	movi	r16,2047
 800cfa4:	003e8006 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800cfa8:	4462b03a 	or	r17,r8,r17
 800cfac:	8822c03a 	cmpne	r17,r17,zero
 800cfb0:	0007883a 	mov	r3,zero
 800cfb4:	003f8b06 	br	800cde4 <__alt_data_end+0xfc00cde4>
 800cfb8:	0141ffc4 	movi	r5,2047
 800cfbc:	11403b26 	beq	r2,r5,800d0ac <__adddf3+0x780>
 800cfc0:	0109c83a 	sub	r4,zero,r4
 800cfc4:	42002034 	orhi	r8,r8,128
 800cfc8:	01400e04 	movi	r5,56
 800cfcc:	29006716 	blt	r5,r4,800d16c <__adddf3+0x840>
 800cfd0:	014007c4 	movi	r5,31
 800cfd4:	29007016 	blt	r5,r4,800d198 <__adddf3+0x86c>
 800cfd8:	01400804 	movi	r5,32
 800cfdc:	290bc83a 	sub	r5,r5,r4
 800cfe0:	4154983a 	sll	r10,r8,r5
 800cfe4:	890ed83a 	srl	r7,r17,r4
 800cfe8:	894a983a 	sll	r5,r17,r5
 800cfec:	4108d83a 	srl	r4,r8,r4
 800cff0:	51e2b03a 	or	r17,r10,r7
 800cff4:	280ac03a 	cmpne	r5,r5,zero
 800cff8:	8962b03a 	or	r17,r17,r5
 800cffc:	89a3883a 	add	r17,r17,r6
 800d000:	2253883a 	add	r9,r4,r9
 800d004:	898d803a 	cmpltu	r6,r17,r6
 800d008:	3251883a 	add	r8,r6,r9
 800d00c:	1021883a 	mov	r16,r2
 800d010:	003ee506 	br	800cba8 <__alt_data_end+0xfc00cba8>
 800d014:	4984b03a 	or	r2,r9,r6
 800d018:	103e6326 	beq	r2,zero,800c9a8 <__alt_data_end+0xfc00c9a8>
 800d01c:	8987c83a 	sub	r3,r17,r6
 800d020:	88c9803a 	cmpltu	r4,r17,r3
 800d024:	4245c83a 	sub	r2,r8,r9
 800d028:	1105c83a 	sub	r2,r2,r4
 800d02c:	1100202c 	andhi	r4,r2,128
 800d030:	203ebb26 	beq	r4,zero,800cb20 <__alt_data_end+0xfc00cb20>
 800d034:	3463c83a 	sub	r17,r6,r17
 800d038:	4a07c83a 	sub	r3,r9,r8
 800d03c:	344d803a 	cmpltu	r6,r6,r17
 800d040:	1991c83a 	sub	r8,r3,r6
 800d044:	3825883a 	mov	r18,r7
 800d048:	003e5706 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800d04c:	4984b03a 	or	r2,r9,r6
 800d050:	10002e26 	beq	r2,zero,800d10c <__adddf3+0x7e0>
 800d054:	4004d0fa 	srli	r2,r8,3
 800d058:	8822d0fa 	srli	r17,r17,3
 800d05c:	4010977a 	slli	r8,r8,29
 800d060:	10c0022c 	andhi	r3,r2,8
 800d064:	4462b03a 	or	r17,r8,r17
 800d068:	18000826 	beq	r3,zero,800d08c <__adddf3+0x760>
 800d06c:	4808d0fa 	srli	r4,r9,3
 800d070:	20c0022c 	andhi	r3,r4,8
 800d074:	1800051e 	bne	r3,zero,800d08c <__adddf3+0x760>
 800d078:	300cd0fa 	srli	r6,r6,3
 800d07c:	4806977a 	slli	r3,r9,29
 800d080:	2005883a 	mov	r2,r4
 800d084:	3825883a 	mov	r18,r7
 800d088:	19a2b03a 	or	r17,r3,r6
 800d08c:	8810d77a 	srli	r8,r17,29
 800d090:	100490fa 	slli	r2,r2,3
 800d094:	882290fa 	slli	r17,r17,3
 800d098:	0401ffc4 	movi	r16,2047
 800d09c:	4090b03a 	or	r8,r8,r2
 800d0a0:	003e4106 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800d0a4:	0141ffc4 	movi	r5,2047
 800d0a8:	117fc71e 	bne	r2,r5,800cfc8 <__alt_data_end+0xfc00cfc8>
 800d0ac:	4811883a 	mov	r8,r9
 800d0b0:	3023883a 	mov	r17,r6
 800d0b4:	1021883a 	mov	r16,r2
 800d0b8:	003e3b06 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800d0bc:	10002f26 	beq	r2,zero,800d17c <__adddf3+0x850>
 800d0c0:	4984b03a 	or	r2,r9,r6
 800d0c4:	10001126 	beq	r2,zero,800d10c <__adddf3+0x7e0>
 800d0c8:	4004d0fa 	srli	r2,r8,3
 800d0cc:	8822d0fa 	srli	r17,r17,3
 800d0d0:	4010977a 	slli	r8,r8,29
 800d0d4:	10c0022c 	andhi	r3,r2,8
 800d0d8:	4462b03a 	or	r17,r8,r17
 800d0dc:	183feb26 	beq	r3,zero,800d08c <__alt_data_end+0xfc00d08c>
 800d0e0:	4808d0fa 	srli	r4,r9,3
 800d0e4:	20c0022c 	andhi	r3,r4,8
 800d0e8:	183fe81e 	bne	r3,zero,800d08c <__alt_data_end+0xfc00d08c>
 800d0ec:	300cd0fa 	srli	r6,r6,3
 800d0f0:	4806977a 	slli	r3,r9,29
 800d0f4:	2005883a 	mov	r2,r4
 800d0f8:	19a2b03a 	or	r17,r3,r6
 800d0fc:	003fe306 	br	800d08c <__alt_data_end+0xfc00d08c>
 800d100:	0011883a 	mov	r8,zero
 800d104:	0005883a 	mov	r2,zero
 800d108:	003e3f06 	br	800ca08 <__alt_data_end+0xfc00ca08>
 800d10c:	0401ffc4 	movi	r16,2047
 800d110:	003e2506 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800d114:	0013883a 	mov	r9,zero
 800d118:	003f8406 	br	800cf2c <__alt_data_end+0xfc00cf2c>
 800d11c:	0005883a 	mov	r2,zero
 800d120:	0007883a 	mov	r3,zero
 800d124:	003e8906 	br	800cb4c <__alt_data_end+0xfc00cb4c>
 800d128:	197ff804 	addi	r5,r3,-32
 800d12c:	01000804 	movi	r4,32
 800d130:	414ad83a 	srl	r5,r8,r5
 800d134:	19002426 	beq	r3,r4,800d1c8 <__adddf3+0x89c>
 800d138:	01001004 	movi	r4,64
 800d13c:	20c7c83a 	sub	r3,r4,r3
 800d140:	40c6983a 	sll	r3,r8,r3
 800d144:	1c46b03a 	or	r3,r3,r17
 800d148:	1806c03a 	cmpne	r3,r3,zero
 800d14c:	28e2b03a 	or	r17,r5,r3
 800d150:	0007883a 	mov	r3,zero
 800d154:	003f2306 	br	800cde4 <__alt_data_end+0xfc00cde4>
 800d158:	0007883a 	mov	r3,zero
 800d15c:	5811883a 	mov	r8,r11
 800d160:	00bfffc4 	movi	r2,-1
 800d164:	0401ffc4 	movi	r16,2047
 800d168:	003e7806 	br	800cb4c <__alt_data_end+0xfc00cb4c>
 800d16c:	4462b03a 	or	r17,r8,r17
 800d170:	8822c03a 	cmpne	r17,r17,zero
 800d174:	0009883a 	mov	r4,zero
 800d178:	003fa006 	br	800cffc <__alt_data_end+0xfc00cffc>
 800d17c:	4811883a 	mov	r8,r9
 800d180:	3023883a 	mov	r17,r6
 800d184:	0401ffc4 	movi	r16,2047
 800d188:	003e0706 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800d18c:	4811883a 	mov	r8,r9
 800d190:	3023883a 	mov	r17,r6
 800d194:	003e0406 	br	800c9a8 <__alt_data_end+0xfc00c9a8>
 800d198:	21fff804 	addi	r7,r4,-32
 800d19c:	01400804 	movi	r5,32
 800d1a0:	41ced83a 	srl	r7,r8,r7
 800d1a4:	21400a26 	beq	r4,r5,800d1d0 <__adddf3+0x8a4>
 800d1a8:	01401004 	movi	r5,64
 800d1ac:	2909c83a 	sub	r4,r5,r4
 800d1b0:	4108983a 	sll	r4,r8,r4
 800d1b4:	2448b03a 	or	r4,r4,r17
 800d1b8:	2008c03a 	cmpne	r4,r4,zero
 800d1bc:	3922b03a 	or	r17,r7,r4
 800d1c0:	0009883a 	mov	r4,zero
 800d1c4:	003f8d06 	br	800cffc <__alt_data_end+0xfc00cffc>
 800d1c8:	0007883a 	mov	r3,zero
 800d1cc:	003fdd06 	br	800d144 <__alt_data_end+0xfc00d144>
 800d1d0:	0009883a 	mov	r4,zero
 800d1d4:	003ff706 	br	800d1b4 <__alt_data_end+0xfc00d1b4>

0800d1d8 <__divdf3>:
 800d1d8:	defff004 	addi	sp,sp,-64
 800d1dc:	dc800815 	stw	r18,32(sp)
 800d1e0:	2824d53a 	srli	r18,r5,20
 800d1e4:	dd800c15 	stw	r22,48(sp)
 800d1e8:	282cd7fa 	srli	r22,r5,31
 800d1ec:	dc000615 	stw	r16,24(sp)
 800d1f0:	04000434 	movhi	r16,16
 800d1f4:	843fffc4 	addi	r16,r16,-1
 800d1f8:	dfc00f15 	stw	ra,60(sp)
 800d1fc:	df000e15 	stw	fp,56(sp)
 800d200:	ddc00d15 	stw	r23,52(sp)
 800d204:	dd400b15 	stw	r21,44(sp)
 800d208:	dd000a15 	stw	r20,40(sp)
 800d20c:	dcc00915 	stw	r19,36(sp)
 800d210:	dc400715 	stw	r17,28(sp)
 800d214:	9481ffcc 	andi	r18,r18,2047
 800d218:	2c20703a 	and	r16,r5,r16
 800d21c:	b2003fcc 	andi	r8,r22,255
 800d220:	90006126 	beq	r18,zero,800d3a8 <__divdf3+0x1d0>
 800d224:	0081ffc4 	movi	r2,2047
 800d228:	202b883a 	mov	r21,r4
 800d22c:	90803726 	beq	r18,r2,800d30c <__divdf3+0x134>
 800d230:	80800434 	orhi	r2,r16,16
 800d234:	100490fa 	slli	r2,r2,3
 800d238:	2020d77a 	srli	r16,r4,29
 800d23c:	202a90fa 	slli	r21,r4,3
 800d240:	94bf0044 	addi	r18,r18,-1023
 800d244:	80a0b03a 	or	r16,r16,r2
 800d248:	0013883a 	mov	r9,zero
 800d24c:	000b883a 	mov	r5,zero
 800d250:	3806d53a 	srli	r3,r7,20
 800d254:	382ed7fa 	srli	r23,r7,31
 800d258:	04400434 	movhi	r17,16
 800d25c:	8c7fffc4 	addi	r17,r17,-1
 800d260:	18c1ffcc 	andi	r3,r3,2047
 800d264:	3029883a 	mov	r20,r6
 800d268:	3c62703a 	and	r17,r7,r17
 800d26c:	bf003fcc 	andi	fp,r23,255
 800d270:	18006e26 	beq	r3,zero,800d42c <__divdf3+0x254>
 800d274:	0081ffc4 	movi	r2,2047
 800d278:	18806626 	beq	r3,r2,800d414 <__divdf3+0x23c>
 800d27c:	88800434 	orhi	r2,r17,16
 800d280:	100490fa 	slli	r2,r2,3
 800d284:	3022d77a 	srli	r17,r6,29
 800d288:	302890fa 	slli	r20,r6,3
 800d28c:	18ff0044 	addi	r3,r3,-1023
 800d290:	88a2b03a 	or	r17,r17,r2
 800d294:	000f883a 	mov	r7,zero
 800d298:	b5e6f03a 	xor	r19,r22,r23
 800d29c:	3a4cb03a 	or	r6,r7,r9
 800d2a0:	008003c4 	movi	r2,15
 800d2a4:	9809883a 	mov	r4,r19
 800d2a8:	90c7c83a 	sub	r3,r18,r3
 800d2ac:	9cc03fcc 	andi	r19,r19,255
 800d2b0:	11809636 	bltu	r2,r6,800d50c <__divdf3+0x334>
 800d2b4:	300c90ba 	slli	r6,r6,2
 800d2b8:	00820074 	movhi	r2,2049
 800d2bc:	10b4b304 	addi	r2,r2,-11572
 800d2c0:	308d883a 	add	r6,r6,r2
 800d2c4:	30800017 	ldw	r2,0(r6)
 800d2c8:	1000683a 	jmp	r2
 800d2cc:	0800d50c 	andi	zero,at,852
 800d2d0:	0800d344 	addi	zero,at,845
 800d2d4:	0800d4fc 	xorhi	zero,at,851
 800d2d8:	0800d338 	rdprs	zero,at,844
 800d2dc:	0800d4fc 	xorhi	zero,at,851
 800d2e0:	0800d4d0 	cmplti	zero,at,851
 800d2e4:	0800d4fc 	xorhi	zero,at,851
 800d2e8:	0800d338 	rdprs	zero,at,844
 800d2ec:	0800d344 	addi	zero,at,845
 800d2f0:	0800d344 	addi	zero,at,845
 800d2f4:	0800d4d0 	cmplti	zero,at,851
 800d2f8:	0800d338 	rdprs	zero,at,844
 800d2fc:	0800d328 	cmpgeui	zero,at,844
 800d300:	0800d328 	cmpgeui	zero,at,844
 800d304:	0800d328 	cmpgeui	zero,at,844
 800d308:	0800d894 	ori	zero,at,866
 800d30c:	2404b03a 	or	r2,r4,r16
 800d310:	10006c1e 	bne	r2,zero,800d4c4 <__divdf3+0x2ec>
 800d314:	02400204 	movi	r9,8
 800d318:	0021883a 	mov	r16,zero
 800d31c:	002b883a 	mov	r21,zero
 800d320:	01400084 	movi	r5,2
 800d324:	003fca06 	br	800d250 <__alt_data_end+0xfc00d250>
 800d328:	8023883a 	mov	r17,r16
 800d32c:	a829883a 	mov	r20,r21
 800d330:	4039883a 	mov	fp,r8
 800d334:	280f883a 	mov	r7,r5
 800d338:	00800084 	movi	r2,2
 800d33c:	3881601e 	bne	r7,r2,800d8c0 <__divdf3+0x6e8>
 800d340:	e027883a 	mov	r19,fp
 800d344:	9900004c 	andi	r4,r19,1
 800d348:	0081ffc4 	movi	r2,2047
 800d34c:	0021883a 	mov	r16,zero
 800d350:	002b883a 	mov	r21,zero
 800d354:	1004953a 	slli	r2,r2,20
 800d358:	20c03fcc 	andi	r3,r4,255
 800d35c:	01400434 	movhi	r5,16
 800d360:	297fffc4 	addi	r5,r5,-1
 800d364:	180697fa 	slli	r3,r3,31
 800d368:	8160703a 	and	r16,r16,r5
 800d36c:	80a0b03a 	or	r16,r16,r2
 800d370:	80c6b03a 	or	r3,r16,r3
 800d374:	a805883a 	mov	r2,r21
 800d378:	dfc00f17 	ldw	ra,60(sp)
 800d37c:	df000e17 	ldw	fp,56(sp)
 800d380:	ddc00d17 	ldw	r23,52(sp)
 800d384:	dd800c17 	ldw	r22,48(sp)
 800d388:	dd400b17 	ldw	r21,44(sp)
 800d38c:	dd000a17 	ldw	r20,40(sp)
 800d390:	dcc00917 	ldw	r19,36(sp)
 800d394:	dc800817 	ldw	r18,32(sp)
 800d398:	dc400717 	ldw	r17,28(sp)
 800d39c:	dc000617 	ldw	r16,24(sp)
 800d3a0:	dec01004 	addi	sp,sp,64
 800d3a4:	f800283a 	ret
 800d3a8:	2404b03a 	or	r2,r4,r16
 800d3ac:	2023883a 	mov	r17,r4
 800d3b0:	10003f26 	beq	r2,zero,800d4b0 <__divdf3+0x2d8>
 800d3b4:	80015e26 	beq	r16,zero,800d930 <__divdf3+0x758>
 800d3b8:	8009883a 	mov	r4,r16
 800d3bc:	d9800215 	stw	r6,8(sp)
 800d3c0:	d9c00515 	stw	r7,20(sp)
 800d3c4:	da000415 	stw	r8,16(sp)
 800d3c8:	800f16c0 	call	800f16c <__clzsi2>
 800d3cc:	d9800217 	ldw	r6,8(sp)
 800d3d0:	d9c00517 	ldw	r7,20(sp)
 800d3d4:	da000417 	ldw	r8,16(sp)
 800d3d8:	113ffd44 	addi	r4,r2,-11
 800d3dc:	00c00704 	movi	r3,28
 800d3e0:	19014f16 	blt	r3,r4,800d920 <__divdf3+0x748>
 800d3e4:	00c00744 	movi	r3,29
 800d3e8:	157ffe04 	addi	r21,r2,-8
 800d3ec:	1907c83a 	sub	r3,r3,r4
 800d3f0:	8560983a 	sll	r16,r16,r21
 800d3f4:	88c6d83a 	srl	r3,r17,r3
 800d3f8:	8d6a983a 	sll	r21,r17,r21
 800d3fc:	1c20b03a 	or	r16,r3,r16
 800d400:	1080fcc4 	addi	r2,r2,1011
 800d404:	00a5c83a 	sub	r18,zero,r2
 800d408:	0013883a 	mov	r9,zero
 800d40c:	000b883a 	mov	r5,zero
 800d410:	003f8f06 	br	800d250 <__alt_data_end+0xfc00d250>
 800d414:	3444b03a 	or	r2,r6,r17
 800d418:	1000231e 	bne	r2,zero,800d4a8 <__divdf3+0x2d0>
 800d41c:	0023883a 	mov	r17,zero
 800d420:	0029883a 	mov	r20,zero
 800d424:	01c00084 	movi	r7,2
 800d428:	003f9b06 	br	800d298 <__alt_data_end+0xfc00d298>
 800d42c:	3444b03a 	or	r2,r6,r17
 800d430:	10001926 	beq	r2,zero,800d498 <__divdf3+0x2c0>
 800d434:	88014b26 	beq	r17,zero,800d964 <__divdf3+0x78c>
 800d438:	8809883a 	mov	r4,r17
 800d43c:	d9400115 	stw	r5,4(sp)
 800d440:	d9800215 	stw	r6,8(sp)
 800d444:	da000415 	stw	r8,16(sp)
 800d448:	da400315 	stw	r9,12(sp)
 800d44c:	800f16c0 	call	800f16c <__clzsi2>
 800d450:	d9400117 	ldw	r5,4(sp)
 800d454:	d9800217 	ldw	r6,8(sp)
 800d458:	da000417 	ldw	r8,16(sp)
 800d45c:	da400317 	ldw	r9,12(sp)
 800d460:	113ffd44 	addi	r4,r2,-11
 800d464:	00c00704 	movi	r3,28
 800d468:	19013a16 	blt	r3,r4,800d954 <__divdf3+0x77c>
 800d46c:	00c00744 	movi	r3,29
 800d470:	153ffe04 	addi	r20,r2,-8
 800d474:	1907c83a 	sub	r3,r3,r4
 800d478:	8d22983a 	sll	r17,r17,r20
 800d47c:	30c6d83a 	srl	r3,r6,r3
 800d480:	3528983a 	sll	r20,r6,r20
 800d484:	1c62b03a 	or	r17,r3,r17
 800d488:	1080fcc4 	addi	r2,r2,1011
 800d48c:	0087c83a 	sub	r3,zero,r2
 800d490:	000f883a 	mov	r7,zero
 800d494:	003f8006 	br	800d298 <__alt_data_end+0xfc00d298>
 800d498:	0023883a 	mov	r17,zero
 800d49c:	0029883a 	mov	r20,zero
 800d4a0:	01c00044 	movi	r7,1
 800d4a4:	003f7c06 	br	800d298 <__alt_data_end+0xfc00d298>
 800d4a8:	01c000c4 	movi	r7,3
 800d4ac:	003f7a06 	br	800d298 <__alt_data_end+0xfc00d298>
 800d4b0:	02400104 	movi	r9,4
 800d4b4:	0021883a 	mov	r16,zero
 800d4b8:	002b883a 	mov	r21,zero
 800d4bc:	01400044 	movi	r5,1
 800d4c0:	003f6306 	br	800d250 <__alt_data_end+0xfc00d250>
 800d4c4:	02400304 	movi	r9,12
 800d4c8:	014000c4 	movi	r5,3
 800d4cc:	003f6006 	br	800d250 <__alt_data_end+0xfc00d250>
 800d4d0:	04000434 	movhi	r16,16
 800d4d4:	0009883a 	mov	r4,zero
 800d4d8:	843fffc4 	addi	r16,r16,-1
 800d4dc:	057fffc4 	movi	r21,-1
 800d4e0:	0081ffc4 	movi	r2,2047
 800d4e4:	003f9b06 	br	800d354 <__alt_data_end+0xfc00d354>
 800d4e8:	00c00044 	movi	r3,1
 800d4ec:	1887c83a 	sub	r3,r3,r2
 800d4f0:	01000e04 	movi	r4,56
 800d4f4:	20c1530e 	bge	r4,r3,800da44 <__divdf3+0x86c>
 800d4f8:	9900004c 	andi	r4,r19,1
 800d4fc:	0005883a 	mov	r2,zero
 800d500:	0021883a 	mov	r16,zero
 800d504:	002b883a 	mov	r21,zero
 800d508:	003f9206 	br	800d354 <__alt_data_end+0xfc00d354>
 800d50c:	8c012e36 	bltu	r17,r16,800d9c8 <__divdf3+0x7f0>
 800d510:	84412c26 	beq	r16,r17,800d9c4 <__divdf3+0x7ec>
 800d514:	a82f883a 	mov	r23,r21
 800d518:	18ffffc4 	addi	r3,r3,-1
 800d51c:	002b883a 	mov	r21,zero
 800d520:	a004d63a 	srli	r2,r20,24
 800d524:	8822923a 	slli	r17,r17,8
 800d528:	a028923a 	slli	r20,r20,8
 800d52c:	8009883a 	mov	r4,r16
 800d530:	88acb03a 	or	r22,r17,r2
 800d534:	dd000015 	stw	r20,0(sp)
 800d538:	b028d43a 	srli	r20,r22,16
 800d53c:	d8c00215 	stw	r3,8(sp)
 800d540:	b4bfffcc 	andi	r18,r22,65535
 800d544:	a00b883a 	mov	r5,r20
 800d548:	800c8480 	call	800c848 <__udivsi3>
 800d54c:	100b883a 	mov	r5,r2
 800d550:	9009883a 	mov	r4,r18
 800d554:	1023883a 	mov	r17,r2
 800d558:	800c9040 	call	800c904 <__mulsi3>
 800d55c:	8009883a 	mov	r4,r16
 800d560:	a00b883a 	mov	r5,r20
 800d564:	1039883a 	mov	fp,r2
 800d568:	800c8ac0 	call	800c8ac <__umodsi3>
 800d56c:	1004943a 	slli	r2,r2,16
 800d570:	b808d43a 	srli	r4,r23,16
 800d574:	d8c00217 	ldw	r3,8(sp)
 800d578:	2084b03a 	or	r2,r4,r2
 800d57c:	1700062e 	bgeu	r2,fp,800d598 <__divdf3+0x3c0>
 800d580:	1585883a 	add	r2,r2,r22
 800d584:	893fffc4 	addi	r4,r17,-1
 800d588:	15811d36 	bltu	r2,r22,800da00 <__divdf3+0x828>
 800d58c:	17011c2e 	bgeu	r2,fp,800da00 <__divdf3+0x828>
 800d590:	8c7fff84 	addi	r17,r17,-2
 800d594:	1585883a 	add	r2,r2,r22
 800d598:	1739c83a 	sub	fp,r2,fp
 800d59c:	a00b883a 	mov	r5,r20
 800d5a0:	e009883a 	mov	r4,fp
 800d5a4:	d8c00215 	stw	r3,8(sp)
 800d5a8:	800c8480 	call	800c848 <__udivsi3>
 800d5ac:	100b883a 	mov	r5,r2
 800d5b0:	9009883a 	mov	r4,r18
 800d5b4:	1021883a 	mov	r16,r2
 800d5b8:	800c9040 	call	800c904 <__mulsi3>
 800d5bc:	a00b883a 	mov	r5,r20
 800d5c0:	e009883a 	mov	r4,fp
 800d5c4:	d8800415 	stw	r2,16(sp)
 800d5c8:	800c8ac0 	call	800c8ac <__umodsi3>
 800d5cc:	1004943a 	slli	r2,r2,16
 800d5d0:	da000417 	ldw	r8,16(sp)
 800d5d4:	bdffffcc 	andi	r23,r23,65535
 800d5d8:	b884b03a 	or	r2,r23,r2
 800d5dc:	d8c00217 	ldw	r3,8(sp)
 800d5e0:	1200062e 	bgeu	r2,r8,800d5fc <__divdf3+0x424>
 800d5e4:	1585883a 	add	r2,r2,r22
 800d5e8:	813fffc4 	addi	r4,r16,-1
 800d5ec:	15810236 	bltu	r2,r22,800d9f8 <__divdf3+0x820>
 800d5f0:	1201012e 	bgeu	r2,r8,800d9f8 <__divdf3+0x820>
 800d5f4:	843fff84 	addi	r16,r16,-2
 800d5f8:	1585883a 	add	r2,r2,r22
 800d5fc:	8822943a 	slli	r17,r17,16
 800d600:	d9800017 	ldw	r6,0(sp)
 800d604:	1211c83a 	sub	r8,r2,r8
 800d608:	8c22b03a 	or	r17,r17,r16
 800d60c:	373fffcc 	andi	fp,r6,65535
 800d610:	8abfffcc 	andi	r10,r17,65535
 800d614:	8820d43a 	srli	r16,r17,16
 800d618:	5009883a 	mov	r4,r10
 800d61c:	e00b883a 	mov	r5,fp
 800d620:	302ed43a 	srli	r23,r6,16
 800d624:	d8c00215 	stw	r3,8(sp)
 800d628:	da000415 	stw	r8,16(sp)
 800d62c:	da800115 	stw	r10,4(sp)
 800d630:	800c9040 	call	800c904 <__mulsi3>
 800d634:	800b883a 	mov	r5,r16
 800d638:	e009883a 	mov	r4,fp
 800d63c:	d8800515 	stw	r2,20(sp)
 800d640:	800c9040 	call	800c904 <__mulsi3>
 800d644:	8009883a 	mov	r4,r16
 800d648:	b80b883a 	mov	r5,r23
 800d64c:	d8800315 	stw	r2,12(sp)
 800d650:	800c9040 	call	800c904 <__mulsi3>
 800d654:	da800117 	ldw	r10,4(sp)
 800d658:	b80b883a 	mov	r5,r23
 800d65c:	1021883a 	mov	r16,r2
 800d660:	5009883a 	mov	r4,r10
 800d664:	800c9040 	call	800c904 <__mulsi3>
 800d668:	d9c00517 	ldw	r7,20(sp)
 800d66c:	da400317 	ldw	r9,12(sp)
 800d670:	d8c00217 	ldw	r3,8(sp)
 800d674:	3808d43a 	srli	r4,r7,16
 800d678:	1245883a 	add	r2,r2,r9
 800d67c:	da000417 	ldw	r8,16(sp)
 800d680:	2085883a 	add	r2,r4,r2
 800d684:	1240022e 	bgeu	r2,r9,800d690 <__divdf3+0x4b8>
 800d688:	01000074 	movhi	r4,1
 800d68c:	8121883a 	add	r16,r16,r4
 800d690:	1008d43a 	srli	r4,r2,16
 800d694:	1004943a 	slli	r2,r2,16
 800d698:	39ffffcc 	andi	r7,r7,65535
 800d69c:	2409883a 	add	r4,r4,r16
 800d6a0:	11c5883a 	add	r2,r2,r7
 800d6a4:	4100bb36 	bltu	r8,r4,800d994 <__divdf3+0x7bc>
 800d6a8:	4100d726 	beq	r8,r4,800da08 <__divdf3+0x830>
 800d6ac:	4109c83a 	sub	r4,r8,r4
 800d6b0:	a8a1c83a 	sub	r16,r21,r2
 800d6b4:	ac2b803a 	cmpltu	r21,r21,r16
 800d6b8:	256bc83a 	sub	r21,r4,r21
 800d6bc:	b540d926 	beq	r22,r21,800da24 <__divdf3+0x84c>
 800d6c0:	a00b883a 	mov	r5,r20
 800d6c4:	a809883a 	mov	r4,r21
 800d6c8:	d8c00215 	stw	r3,8(sp)
 800d6cc:	800c8480 	call	800c848 <__udivsi3>
 800d6d0:	100b883a 	mov	r5,r2
 800d6d4:	9009883a 	mov	r4,r18
 800d6d8:	d8800515 	stw	r2,20(sp)
 800d6dc:	800c9040 	call	800c904 <__mulsi3>
 800d6e0:	a809883a 	mov	r4,r21
 800d6e4:	a00b883a 	mov	r5,r20
 800d6e8:	d8800415 	stw	r2,16(sp)
 800d6ec:	800c8ac0 	call	800c8ac <__umodsi3>
 800d6f0:	1004943a 	slli	r2,r2,16
 800d6f4:	8008d43a 	srli	r4,r16,16
 800d6f8:	da000417 	ldw	r8,16(sp)
 800d6fc:	d8c00217 	ldw	r3,8(sp)
 800d700:	2084b03a 	or	r2,r4,r2
 800d704:	d9c00517 	ldw	r7,20(sp)
 800d708:	1200062e 	bgeu	r2,r8,800d724 <__divdf3+0x54c>
 800d70c:	1585883a 	add	r2,r2,r22
 800d710:	393fffc4 	addi	r4,r7,-1
 800d714:	1580c536 	bltu	r2,r22,800da2c <__divdf3+0x854>
 800d718:	1200c42e 	bgeu	r2,r8,800da2c <__divdf3+0x854>
 800d71c:	39ffff84 	addi	r7,r7,-2
 800d720:	1585883a 	add	r2,r2,r22
 800d724:	122bc83a 	sub	r21,r2,r8
 800d728:	a00b883a 	mov	r5,r20
 800d72c:	a809883a 	mov	r4,r21
 800d730:	d8c00215 	stw	r3,8(sp)
 800d734:	d9c00515 	stw	r7,20(sp)
 800d738:	800c8480 	call	800c848 <__udivsi3>
 800d73c:	9009883a 	mov	r4,r18
 800d740:	100b883a 	mov	r5,r2
 800d744:	d8800415 	stw	r2,16(sp)
 800d748:	800c9040 	call	800c904 <__mulsi3>
 800d74c:	a809883a 	mov	r4,r21
 800d750:	a00b883a 	mov	r5,r20
 800d754:	1025883a 	mov	r18,r2
 800d758:	800c8ac0 	call	800c8ac <__umodsi3>
 800d75c:	1004943a 	slli	r2,r2,16
 800d760:	813fffcc 	andi	r4,r16,65535
 800d764:	d8c00217 	ldw	r3,8(sp)
 800d768:	20a0b03a 	or	r16,r4,r2
 800d76c:	d9c00517 	ldw	r7,20(sp)
 800d770:	da000417 	ldw	r8,16(sp)
 800d774:	8480062e 	bgeu	r16,r18,800d790 <__divdf3+0x5b8>
 800d778:	85a1883a 	add	r16,r16,r22
 800d77c:	40bfffc4 	addi	r2,r8,-1
 800d780:	8580ac36 	bltu	r16,r22,800da34 <__divdf3+0x85c>
 800d784:	8480ab2e 	bgeu	r16,r18,800da34 <__divdf3+0x85c>
 800d788:	423fff84 	addi	r8,r8,-2
 800d78c:	85a1883a 	add	r16,r16,r22
 800d790:	3804943a 	slli	r2,r7,16
 800d794:	84a1c83a 	sub	r16,r16,r18
 800d798:	e009883a 	mov	r4,fp
 800d79c:	1228b03a 	or	r20,r2,r8
 800d7a0:	a1ffffcc 	andi	r7,r20,65535
 800d7a4:	a024d43a 	srli	r18,r20,16
 800d7a8:	380b883a 	mov	r5,r7
 800d7ac:	d8c00215 	stw	r3,8(sp)
 800d7b0:	d9c00515 	stw	r7,20(sp)
 800d7b4:	800c9040 	call	800c904 <__mulsi3>
 800d7b8:	900b883a 	mov	r5,r18
 800d7bc:	e009883a 	mov	r4,fp
 800d7c0:	102b883a 	mov	r21,r2
 800d7c4:	800c9040 	call	800c904 <__mulsi3>
 800d7c8:	900b883a 	mov	r5,r18
 800d7cc:	b809883a 	mov	r4,r23
 800d7d0:	1039883a 	mov	fp,r2
 800d7d4:	800c9040 	call	800c904 <__mulsi3>
 800d7d8:	d9c00517 	ldw	r7,20(sp)
 800d7dc:	b80b883a 	mov	r5,r23
 800d7e0:	1025883a 	mov	r18,r2
 800d7e4:	3809883a 	mov	r4,r7
 800d7e8:	800c9040 	call	800c904 <__mulsi3>
 800d7ec:	a808d43a 	srli	r4,r21,16
 800d7f0:	1705883a 	add	r2,r2,fp
 800d7f4:	d8c00217 	ldw	r3,8(sp)
 800d7f8:	2085883a 	add	r2,r4,r2
 800d7fc:	1700022e 	bgeu	r2,fp,800d808 <__divdf3+0x630>
 800d800:	01000074 	movhi	r4,1
 800d804:	9125883a 	add	r18,r18,r4
 800d808:	1008d43a 	srli	r4,r2,16
 800d80c:	1004943a 	slli	r2,r2,16
 800d810:	ad7fffcc 	andi	r21,r21,65535
 800d814:	2489883a 	add	r4,r4,r18
 800d818:	1545883a 	add	r2,r2,r21
 800d81c:	81003836 	bltu	r16,r4,800d900 <__divdf3+0x728>
 800d820:	81003626 	beq	r16,r4,800d8fc <__divdf3+0x724>
 800d824:	a5000054 	ori	r20,r20,1
 800d828:	1880ffc4 	addi	r2,r3,1023
 800d82c:	00bf2e0e 	bge	zero,r2,800d4e8 <__alt_data_end+0xfc00d4e8>
 800d830:	a10001cc 	andi	r4,r20,7
 800d834:	20000726 	beq	r4,zero,800d854 <__divdf3+0x67c>
 800d838:	a10003cc 	andi	r4,r20,15
 800d83c:	01400104 	movi	r5,4
 800d840:	21400426 	beq	r4,r5,800d854 <__divdf3+0x67c>
 800d844:	a149883a 	add	r4,r20,r5
 800d848:	2529803a 	cmpltu	r20,r4,r20
 800d84c:	8d23883a 	add	r17,r17,r20
 800d850:	2029883a 	mov	r20,r4
 800d854:	8900402c 	andhi	r4,r17,256
 800d858:	20000426 	beq	r4,zero,800d86c <__divdf3+0x694>
 800d85c:	18810004 	addi	r2,r3,1024
 800d860:	00ffc034 	movhi	r3,65280
 800d864:	18ffffc4 	addi	r3,r3,-1
 800d868:	88e2703a 	and	r17,r17,r3
 800d86c:	00c1ff84 	movi	r3,2046
 800d870:	18beb416 	blt	r3,r2,800d344 <__alt_data_end+0xfc00d344>
 800d874:	a028d0fa 	srli	r20,r20,3
 800d878:	882a977a 	slli	r21,r17,29
 800d87c:	8820927a 	slli	r16,r17,9
 800d880:	1081ffcc 	andi	r2,r2,2047
 800d884:	ad2ab03a 	or	r21,r21,r20
 800d888:	8020d33a 	srli	r16,r16,12
 800d88c:	9900004c 	andi	r4,r19,1
 800d890:	003eb006 	br	800d354 <__alt_data_end+0xfc00d354>
 800d894:	8080022c 	andhi	r2,r16,8
 800d898:	10001226 	beq	r2,zero,800d8e4 <__divdf3+0x70c>
 800d89c:	8880022c 	andhi	r2,r17,8
 800d8a0:	1000101e 	bne	r2,zero,800d8e4 <__divdf3+0x70c>
 800d8a4:	00800434 	movhi	r2,16
 800d8a8:	8c000234 	orhi	r16,r17,8
 800d8ac:	10bfffc4 	addi	r2,r2,-1
 800d8b0:	b809883a 	mov	r4,r23
 800d8b4:	80a0703a 	and	r16,r16,r2
 800d8b8:	a02b883a 	mov	r21,r20
 800d8bc:	003f0806 	br	800d4e0 <__alt_data_end+0xfc00d4e0>
 800d8c0:	008000c4 	movi	r2,3
 800d8c4:	3880b126 	beq	r7,r2,800db8c <__divdf3+0x9b4>
 800d8c8:	00800044 	movi	r2,1
 800d8cc:	38805b1e 	bne	r7,r2,800da3c <__divdf3+0x864>
 800d8d0:	e009883a 	mov	r4,fp
 800d8d4:	0005883a 	mov	r2,zero
 800d8d8:	0021883a 	mov	r16,zero
 800d8dc:	002b883a 	mov	r21,zero
 800d8e0:	003e9c06 	br	800d354 <__alt_data_end+0xfc00d354>
 800d8e4:	00800434 	movhi	r2,16
 800d8e8:	84000234 	orhi	r16,r16,8
 800d8ec:	10bfffc4 	addi	r2,r2,-1
 800d8f0:	b009883a 	mov	r4,r22
 800d8f4:	80a0703a 	and	r16,r16,r2
 800d8f8:	003ef906 	br	800d4e0 <__alt_data_end+0xfc00d4e0>
 800d8fc:	103fca26 	beq	r2,zero,800d828 <__alt_data_end+0xfc00d828>
 800d900:	b421883a 	add	r16,r22,r16
 800d904:	a17fffc4 	addi	r5,r20,-1
 800d908:	8580422e 	bgeu	r16,r22,800da14 <__divdf3+0x83c>
 800d90c:	2829883a 	mov	r20,r5
 800d910:	813fc41e 	bne	r16,r4,800d824 <__alt_data_end+0xfc00d824>
 800d914:	d9800017 	ldw	r6,0(sp)
 800d918:	30bfc21e 	bne	r6,r2,800d824 <__alt_data_end+0xfc00d824>
 800d91c:	003fc206 	br	800d828 <__alt_data_end+0xfc00d828>
 800d920:	143ff604 	addi	r16,r2,-40
 800d924:	8c20983a 	sll	r16,r17,r16
 800d928:	002b883a 	mov	r21,zero
 800d92c:	003eb406 	br	800d400 <__alt_data_end+0xfc00d400>
 800d930:	d9800215 	stw	r6,8(sp)
 800d934:	d9c00515 	stw	r7,20(sp)
 800d938:	da000415 	stw	r8,16(sp)
 800d93c:	800f16c0 	call	800f16c <__clzsi2>
 800d940:	10800804 	addi	r2,r2,32
 800d944:	da000417 	ldw	r8,16(sp)
 800d948:	d9c00517 	ldw	r7,20(sp)
 800d94c:	d9800217 	ldw	r6,8(sp)
 800d950:	003ea106 	br	800d3d8 <__alt_data_end+0xfc00d3d8>
 800d954:	147ff604 	addi	r17,r2,-40
 800d958:	3462983a 	sll	r17,r6,r17
 800d95c:	0029883a 	mov	r20,zero
 800d960:	003ec906 	br	800d488 <__alt_data_end+0xfc00d488>
 800d964:	3009883a 	mov	r4,r6
 800d968:	d9400115 	stw	r5,4(sp)
 800d96c:	d9800215 	stw	r6,8(sp)
 800d970:	da000415 	stw	r8,16(sp)
 800d974:	da400315 	stw	r9,12(sp)
 800d978:	800f16c0 	call	800f16c <__clzsi2>
 800d97c:	10800804 	addi	r2,r2,32
 800d980:	da400317 	ldw	r9,12(sp)
 800d984:	da000417 	ldw	r8,16(sp)
 800d988:	d9800217 	ldw	r6,8(sp)
 800d98c:	d9400117 	ldw	r5,4(sp)
 800d990:	003eb306 	br	800d460 <__alt_data_end+0xfc00d460>
 800d994:	d9800017 	ldw	r6,0(sp)
 800d998:	a9ab883a 	add	r21,r21,r6
 800d99c:	a98b803a 	cmpltu	r5,r21,r6
 800d9a0:	2d8b883a 	add	r5,r5,r22
 800d9a4:	2a11883a 	add	r8,r5,r8
 800d9a8:	897fffc4 	addi	r5,r17,-1
 800d9ac:	b2000c2e 	bgeu	r22,r8,800d9e0 <__divdf3+0x808>
 800d9b0:	41003f36 	bltu	r8,r4,800dab0 <__divdf3+0x8d8>
 800d9b4:	22006c26 	beq	r4,r8,800db68 <__divdf3+0x990>
 800d9b8:	4109c83a 	sub	r4,r8,r4
 800d9bc:	2823883a 	mov	r17,r5
 800d9c0:	003f3b06 	br	800d6b0 <__alt_data_end+0xfc00d6b0>
 800d9c4:	ad3ed336 	bltu	r21,r20,800d514 <__alt_data_end+0xfc00d514>
 800d9c8:	a804d07a 	srli	r2,r21,1
 800d9cc:	802e97fa 	slli	r23,r16,31
 800d9d0:	a82a97fa 	slli	r21,r21,31
 800d9d4:	8020d07a 	srli	r16,r16,1
 800d9d8:	b8aeb03a 	or	r23,r23,r2
 800d9dc:	003ed006 	br	800d520 <__alt_data_end+0xfc00d520>
 800d9e0:	b23ff51e 	bne	r22,r8,800d9b8 <__alt_data_end+0xfc00d9b8>
 800d9e4:	d9800017 	ldw	r6,0(sp)
 800d9e8:	a9bff12e 	bgeu	r21,r6,800d9b0 <__alt_data_end+0xfc00d9b0>
 800d9ec:	b109c83a 	sub	r4,r22,r4
 800d9f0:	2823883a 	mov	r17,r5
 800d9f4:	003f2e06 	br	800d6b0 <__alt_data_end+0xfc00d6b0>
 800d9f8:	2021883a 	mov	r16,r4
 800d9fc:	003eff06 	br	800d5fc <__alt_data_end+0xfc00d5fc>
 800da00:	2023883a 	mov	r17,r4
 800da04:	003ee406 	br	800d598 <__alt_data_end+0xfc00d598>
 800da08:	a8bfe236 	bltu	r21,r2,800d994 <__alt_data_end+0xfc00d994>
 800da0c:	0009883a 	mov	r4,zero
 800da10:	003f2706 	br	800d6b0 <__alt_data_end+0xfc00d6b0>
 800da14:	81002d36 	bltu	r16,r4,800dacc <__divdf3+0x8f4>
 800da18:	24005626 	beq	r4,r16,800db74 <__divdf3+0x99c>
 800da1c:	2829883a 	mov	r20,r5
 800da20:	003f8006 	br	800d824 <__alt_data_end+0xfc00d824>
 800da24:	053fffc4 	movi	r20,-1
 800da28:	003f7f06 	br	800d828 <__alt_data_end+0xfc00d828>
 800da2c:	200f883a 	mov	r7,r4
 800da30:	003f3c06 	br	800d724 <__alt_data_end+0xfc00d724>
 800da34:	1011883a 	mov	r8,r2
 800da38:	003f5506 	br	800d790 <__alt_data_end+0xfc00d790>
 800da3c:	e027883a 	mov	r19,fp
 800da40:	003f7906 	br	800d828 <__alt_data_end+0xfc00d828>
 800da44:	010007c4 	movi	r4,31
 800da48:	20c02816 	blt	r4,r3,800daec <__divdf3+0x914>
 800da4c:	00800804 	movi	r2,32
 800da50:	10c5c83a 	sub	r2,r2,r3
 800da54:	888a983a 	sll	r5,r17,r2
 800da58:	a0c8d83a 	srl	r4,r20,r3
 800da5c:	a084983a 	sll	r2,r20,r2
 800da60:	88e2d83a 	srl	r17,r17,r3
 800da64:	2906b03a 	or	r3,r5,r4
 800da68:	1004c03a 	cmpne	r2,r2,zero
 800da6c:	1886b03a 	or	r3,r3,r2
 800da70:	188001cc 	andi	r2,r3,7
 800da74:	10000726 	beq	r2,zero,800da94 <__divdf3+0x8bc>
 800da78:	188003cc 	andi	r2,r3,15
 800da7c:	01000104 	movi	r4,4
 800da80:	11000426 	beq	r2,r4,800da94 <__divdf3+0x8bc>
 800da84:	1805883a 	mov	r2,r3
 800da88:	10c00104 	addi	r3,r2,4
 800da8c:	1885803a 	cmpltu	r2,r3,r2
 800da90:	88a3883a 	add	r17,r17,r2
 800da94:	8880202c 	andhi	r2,r17,128
 800da98:	10002926 	beq	r2,zero,800db40 <__divdf3+0x968>
 800da9c:	9900004c 	andi	r4,r19,1
 800daa0:	00800044 	movi	r2,1
 800daa4:	0021883a 	mov	r16,zero
 800daa8:	002b883a 	mov	r21,zero
 800daac:	003e2906 	br	800d354 <__alt_data_end+0xfc00d354>
 800dab0:	d9800017 	ldw	r6,0(sp)
 800dab4:	8c7fff84 	addi	r17,r17,-2
 800dab8:	a9ab883a 	add	r21,r21,r6
 800dabc:	a98b803a 	cmpltu	r5,r21,r6
 800dac0:	2d8b883a 	add	r5,r5,r22
 800dac4:	2a11883a 	add	r8,r5,r8
 800dac8:	003ef806 	br	800d6ac <__alt_data_end+0xfc00d6ac>
 800dacc:	d9800017 	ldw	r6,0(sp)
 800dad0:	318f883a 	add	r7,r6,r6
 800dad4:	398b803a 	cmpltu	r5,r7,r6
 800dad8:	2d8d883a 	add	r6,r5,r22
 800dadc:	81a1883a 	add	r16,r16,r6
 800dae0:	a17fff84 	addi	r5,r20,-2
 800dae4:	d9c00015 	stw	r7,0(sp)
 800dae8:	003f8806 	br	800d90c <__alt_data_end+0xfc00d90c>
 800daec:	013ff844 	movi	r4,-31
 800daf0:	2085c83a 	sub	r2,r4,r2
 800daf4:	8888d83a 	srl	r4,r17,r2
 800daf8:	00800804 	movi	r2,32
 800dafc:	18802126 	beq	r3,r2,800db84 <__divdf3+0x9ac>
 800db00:	04001004 	movi	r16,64
 800db04:	80c7c83a 	sub	r3,r16,r3
 800db08:	88e0983a 	sll	r16,r17,r3
 800db0c:	8504b03a 	or	r2,r16,r20
 800db10:	1004c03a 	cmpne	r2,r2,zero
 800db14:	2084b03a 	or	r2,r4,r2
 800db18:	144001cc 	andi	r17,r2,7
 800db1c:	88000d1e 	bne	r17,zero,800db54 <__divdf3+0x97c>
 800db20:	0021883a 	mov	r16,zero
 800db24:	102ad0fa 	srli	r21,r2,3
 800db28:	9900004c 	andi	r4,r19,1
 800db2c:	0005883a 	mov	r2,zero
 800db30:	ac6ab03a 	or	r21,r21,r17
 800db34:	003e0706 	br	800d354 <__alt_data_end+0xfc00d354>
 800db38:	1007883a 	mov	r3,r2
 800db3c:	0023883a 	mov	r17,zero
 800db40:	8820927a 	slli	r16,r17,9
 800db44:	1805883a 	mov	r2,r3
 800db48:	8822977a 	slli	r17,r17,29
 800db4c:	8020d33a 	srli	r16,r16,12
 800db50:	003ff406 	br	800db24 <__alt_data_end+0xfc00db24>
 800db54:	10c003cc 	andi	r3,r2,15
 800db58:	01000104 	movi	r4,4
 800db5c:	193ff626 	beq	r3,r4,800db38 <__alt_data_end+0xfc00db38>
 800db60:	0023883a 	mov	r17,zero
 800db64:	003fc806 	br	800da88 <__alt_data_end+0xfc00da88>
 800db68:	a8bfd136 	bltu	r21,r2,800dab0 <__alt_data_end+0xfc00dab0>
 800db6c:	2823883a 	mov	r17,r5
 800db70:	003fa606 	br	800da0c <__alt_data_end+0xfc00da0c>
 800db74:	d9800017 	ldw	r6,0(sp)
 800db78:	30bfd436 	bltu	r6,r2,800dacc <__alt_data_end+0xfc00dacc>
 800db7c:	2829883a 	mov	r20,r5
 800db80:	003f6406 	br	800d914 <__alt_data_end+0xfc00d914>
 800db84:	0021883a 	mov	r16,zero
 800db88:	003fe006 	br	800db0c <__alt_data_end+0xfc00db0c>
 800db8c:	00800434 	movhi	r2,16
 800db90:	8c000234 	orhi	r16,r17,8
 800db94:	10bfffc4 	addi	r2,r2,-1
 800db98:	e009883a 	mov	r4,fp
 800db9c:	80a0703a 	and	r16,r16,r2
 800dba0:	a02b883a 	mov	r21,r20
 800dba4:	003e4e06 	br	800d4e0 <__alt_data_end+0xfc00d4e0>

0800dba8 <__eqdf2>:
 800dba8:	2804d53a 	srli	r2,r5,20
 800dbac:	3806d53a 	srli	r3,r7,20
 800dbb0:	02000434 	movhi	r8,16
 800dbb4:	423fffc4 	addi	r8,r8,-1
 800dbb8:	1081ffcc 	andi	r2,r2,2047
 800dbbc:	0281ffc4 	movi	r10,2047
 800dbc0:	2a12703a 	and	r9,r5,r8
 800dbc4:	18c1ffcc 	andi	r3,r3,2047
 800dbc8:	3a10703a 	and	r8,r7,r8
 800dbcc:	280ad7fa 	srli	r5,r5,31
 800dbd0:	380ed7fa 	srli	r7,r7,31
 800dbd4:	12801026 	beq	r2,r10,800dc18 <__eqdf2+0x70>
 800dbd8:	0281ffc4 	movi	r10,2047
 800dbdc:	1a800a26 	beq	r3,r10,800dc08 <__eqdf2+0x60>
 800dbe0:	10c00226 	beq	r2,r3,800dbec <__eqdf2+0x44>
 800dbe4:	00800044 	movi	r2,1
 800dbe8:	f800283a 	ret
 800dbec:	4a3ffd1e 	bne	r9,r8,800dbe4 <__alt_data_end+0xfc00dbe4>
 800dbf0:	21bffc1e 	bne	r4,r6,800dbe4 <__alt_data_end+0xfc00dbe4>
 800dbf4:	29c00c26 	beq	r5,r7,800dc28 <__eqdf2+0x80>
 800dbf8:	103ffa1e 	bne	r2,zero,800dbe4 <__alt_data_end+0xfc00dbe4>
 800dbfc:	2244b03a 	or	r2,r4,r9
 800dc00:	1004c03a 	cmpne	r2,r2,zero
 800dc04:	f800283a 	ret
 800dc08:	3214b03a 	or	r10,r6,r8
 800dc0c:	503ff426 	beq	r10,zero,800dbe0 <__alt_data_end+0xfc00dbe0>
 800dc10:	00800044 	movi	r2,1
 800dc14:	f800283a 	ret
 800dc18:	2254b03a 	or	r10,r4,r9
 800dc1c:	503fee26 	beq	r10,zero,800dbd8 <__alt_data_end+0xfc00dbd8>
 800dc20:	00800044 	movi	r2,1
 800dc24:	f800283a 	ret
 800dc28:	0005883a 	mov	r2,zero
 800dc2c:	f800283a 	ret

0800dc30 <__gedf2>:
 800dc30:	2804d53a 	srli	r2,r5,20
 800dc34:	3806d53a 	srli	r3,r7,20
 800dc38:	02000434 	movhi	r8,16
 800dc3c:	423fffc4 	addi	r8,r8,-1
 800dc40:	1081ffcc 	andi	r2,r2,2047
 800dc44:	0241ffc4 	movi	r9,2047
 800dc48:	2a14703a 	and	r10,r5,r8
 800dc4c:	18c1ffcc 	andi	r3,r3,2047
 800dc50:	3a10703a 	and	r8,r7,r8
 800dc54:	280ad7fa 	srli	r5,r5,31
 800dc58:	380ed7fa 	srli	r7,r7,31
 800dc5c:	12401d26 	beq	r2,r9,800dcd4 <__gedf2+0xa4>
 800dc60:	0241ffc4 	movi	r9,2047
 800dc64:	1a401226 	beq	r3,r9,800dcb0 <__gedf2+0x80>
 800dc68:	1000081e 	bne	r2,zero,800dc8c <__gedf2+0x5c>
 800dc6c:	2296b03a 	or	r11,r4,r10
 800dc70:	5813003a 	cmpeq	r9,r11,zero
 800dc74:	1800091e 	bne	r3,zero,800dc9c <__gedf2+0x6c>
 800dc78:	3218b03a 	or	r12,r6,r8
 800dc7c:	6000071e 	bne	r12,zero,800dc9c <__gedf2+0x6c>
 800dc80:	0005883a 	mov	r2,zero
 800dc84:	5800101e 	bne	r11,zero,800dcc8 <__gedf2+0x98>
 800dc88:	f800283a 	ret
 800dc8c:	18000c1e 	bne	r3,zero,800dcc0 <__gedf2+0x90>
 800dc90:	3212b03a 	or	r9,r6,r8
 800dc94:	48000c26 	beq	r9,zero,800dcc8 <__gedf2+0x98>
 800dc98:	0013883a 	mov	r9,zero
 800dc9c:	39c03fcc 	andi	r7,r7,255
 800dca0:	48000826 	beq	r9,zero,800dcc4 <__gedf2+0x94>
 800dca4:	38000926 	beq	r7,zero,800dccc <__gedf2+0x9c>
 800dca8:	00800044 	movi	r2,1
 800dcac:	f800283a 	ret
 800dcb0:	3212b03a 	or	r9,r6,r8
 800dcb4:	483fec26 	beq	r9,zero,800dc68 <__alt_data_end+0xfc00dc68>
 800dcb8:	00bfff84 	movi	r2,-2
 800dcbc:	f800283a 	ret
 800dcc0:	39c03fcc 	andi	r7,r7,255
 800dcc4:	29c00626 	beq	r5,r7,800dce0 <__gedf2+0xb0>
 800dcc8:	283ff726 	beq	r5,zero,800dca8 <__alt_data_end+0xfc00dca8>
 800dccc:	00bfffc4 	movi	r2,-1
 800dcd0:	f800283a 	ret
 800dcd4:	2292b03a 	or	r9,r4,r10
 800dcd8:	483fe126 	beq	r9,zero,800dc60 <__alt_data_end+0xfc00dc60>
 800dcdc:	003ff606 	br	800dcb8 <__alt_data_end+0xfc00dcb8>
 800dce0:	18bff916 	blt	r3,r2,800dcc8 <__alt_data_end+0xfc00dcc8>
 800dce4:	10c00316 	blt	r2,r3,800dcf4 <__gedf2+0xc4>
 800dce8:	42bff736 	bltu	r8,r10,800dcc8 <__alt_data_end+0xfc00dcc8>
 800dcec:	52000326 	beq	r10,r8,800dcfc <__gedf2+0xcc>
 800dcf0:	5200042e 	bgeu	r10,r8,800dd04 <__gedf2+0xd4>
 800dcf4:	283fec1e 	bne	r5,zero,800dca8 <__alt_data_end+0xfc00dca8>
 800dcf8:	003ff406 	br	800dccc <__alt_data_end+0xfc00dccc>
 800dcfc:	313ff236 	bltu	r6,r4,800dcc8 <__alt_data_end+0xfc00dcc8>
 800dd00:	21bffc36 	bltu	r4,r6,800dcf4 <__alt_data_end+0xfc00dcf4>
 800dd04:	0005883a 	mov	r2,zero
 800dd08:	f800283a 	ret

0800dd0c <__ledf2>:
 800dd0c:	2804d53a 	srli	r2,r5,20
 800dd10:	3810d53a 	srli	r8,r7,20
 800dd14:	00c00434 	movhi	r3,16
 800dd18:	18ffffc4 	addi	r3,r3,-1
 800dd1c:	1081ffcc 	andi	r2,r2,2047
 800dd20:	0241ffc4 	movi	r9,2047
 800dd24:	28d4703a 	and	r10,r5,r3
 800dd28:	4201ffcc 	andi	r8,r8,2047
 800dd2c:	38c6703a 	and	r3,r7,r3
 800dd30:	280ad7fa 	srli	r5,r5,31
 800dd34:	380ed7fa 	srli	r7,r7,31
 800dd38:	12401f26 	beq	r2,r9,800ddb8 <__ledf2+0xac>
 800dd3c:	0241ffc4 	movi	r9,2047
 800dd40:	42401426 	beq	r8,r9,800dd94 <__ledf2+0x88>
 800dd44:	1000091e 	bne	r2,zero,800dd6c <__ledf2+0x60>
 800dd48:	2296b03a 	or	r11,r4,r10
 800dd4c:	5813003a 	cmpeq	r9,r11,zero
 800dd50:	29403fcc 	andi	r5,r5,255
 800dd54:	40000a1e 	bne	r8,zero,800dd80 <__ledf2+0x74>
 800dd58:	30d8b03a 	or	r12,r6,r3
 800dd5c:	6000081e 	bne	r12,zero,800dd80 <__ledf2+0x74>
 800dd60:	0005883a 	mov	r2,zero
 800dd64:	5800111e 	bne	r11,zero,800ddac <__ledf2+0xa0>
 800dd68:	f800283a 	ret
 800dd6c:	29403fcc 	andi	r5,r5,255
 800dd70:	40000c1e 	bne	r8,zero,800dda4 <__ledf2+0x98>
 800dd74:	30d2b03a 	or	r9,r6,r3
 800dd78:	48000c26 	beq	r9,zero,800ddac <__ledf2+0xa0>
 800dd7c:	0013883a 	mov	r9,zero
 800dd80:	39c03fcc 	andi	r7,r7,255
 800dd84:	48000826 	beq	r9,zero,800dda8 <__ledf2+0x9c>
 800dd88:	38001126 	beq	r7,zero,800ddd0 <__ledf2+0xc4>
 800dd8c:	00800044 	movi	r2,1
 800dd90:	f800283a 	ret
 800dd94:	30d2b03a 	or	r9,r6,r3
 800dd98:	483fea26 	beq	r9,zero,800dd44 <__alt_data_end+0xfc00dd44>
 800dd9c:	00800084 	movi	r2,2
 800dda0:	f800283a 	ret
 800dda4:	39c03fcc 	andi	r7,r7,255
 800dda8:	39400726 	beq	r7,r5,800ddc8 <__ledf2+0xbc>
 800ddac:	2800081e 	bne	r5,zero,800ddd0 <__ledf2+0xc4>
 800ddb0:	00800044 	movi	r2,1
 800ddb4:	f800283a 	ret
 800ddb8:	2292b03a 	or	r9,r4,r10
 800ddbc:	483fdf26 	beq	r9,zero,800dd3c <__alt_data_end+0xfc00dd3c>
 800ddc0:	00800084 	movi	r2,2
 800ddc4:	f800283a 	ret
 800ddc8:	4080030e 	bge	r8,r2,800ddd8 <__ledf2+0xcc>
 800ddcc:	383fef26 	beq	r7,zero,800dd8c <__alt_data_end+0xfc00dd8c>
 800ddd0:	00bfffc4 	movi	r2,-1
 800ddd4:	f800283a 	ret
 800ddd8:	123feb16 	blt	r2,r8,800dd88 <__alt_data_end+0xfc00dd88>
 800dddc:	1abff336 	bltu	r3,r10,800ddac <__alt_data_end+0xfc00ddac>
 800dde0:	50c00326 	beq	r10,r3,800ddf0 <__ledf2+0xe4>
 800dde4:	50c0042e 	bgeu	r10,r3,800ddf8 <__ledf2+0xec>
 800dde8:	283fe81e 	bne	r5,zero,800dd8c <__alt_data_end+0xfc00dd8c>
 800ddec:	003ff806 	br	800ddd0 <__alt_data_end+0xfc00ddd0>
 800ddf0:	313fee36 	bltu	r6,r4,800ddac <__alt_data_end+0xfc00ddac>
 800ddf4:	21bffc36 	bltu	r4,r6,800dde8 <__alt_data_end+0xfc00dde8>
 800ddf8:	0005883a 	mov	r2,zero
 800ddfc:	f800283a 	ret

0800de00 <__muldf3>:
 800de00:	deffee04 	addi	sp,sp,-72
 800de04:	dd000c15 	stw	r20,48(sp)
 800de08:	2828d53a 	srli	r20,r5,20
 800de0c:	ddc00f15 	stw	r23,60(sp)
 800de10:	282ed7fa 	srli	r23,r5,31
 800de14:	dc000815 	stw	r16,32(sp)
 800de18:	04000434 	movhi	r16,16
 800de1c:	dcc00b15 	stw	r19,44(sp)
 800de20:	843fffc4 	addi	r16,r16,-1
 800de24:	dfc01115 	stw	ra,68(sp)
 800de28:	df001015 	stw	fp,64(sp)
 800de2c:	dd800e15 	stw	r22,56(sp)
 800de30:	dd400d15 	stw	r21,52(sp)
 800de34:	dc800a15 	stw	r18,40(sp)
 800de38:	dc400915 	stw	r17,36(sp)
 800de3c:	a501ffcc 	andi	r20,r20,2047
 800de40:	2c20703a 	and	r16,r5,r16
 800de44:	b827883a 	mov	r19,r23
 800de48:	ba403fcc 	andi	r9,r23,255
 800de4c:	a0006026 	beq	r20,zero,800dfd0 <__muldf3+0x1d0>
 800de50:	0081ffc4 	movi	r2,2047
 800de54:	202d883a 	mov	r22,r4
 800de58:	a0803626 	beq	r20,r2,800df34 <__muldf3+0x134>
 800de5c:	84000434 	orhi	r16,r16,16
 800de60:	200ad77a 	srli	r5,r4,29
 800de64:	800490fa 	slli	r2,r16,3
 800de68:	202c90fa 	slli	r22,r4,3
 800de6c:	a53f0044 	addi	r20,r20,-1023
 800de70:	28a0b03a 	or	r16,r5,r2
 800de74:	002b883a 	mov	r21,zero
 800de78:	000b883a 	mov	r5,zero
 800de7c:	3804d53a 	srli	r2,r7,20
 800de80:	3838d7fa 	srli	fp,r7,31
 800de84:	04400434 	movhi	r17,16
 800de88:	8c7fffc4 	addi	r17,r17,-1
 800de8c:	1081ffcc 	andi	r2,r2,2047
 800de90:	3025883a 	mov	r18,r6
 800de94:	3c62703a 	and	r17,r7,r17
 800de98:	e2803fcc 	andi	r10,fp,255
 800de9c:	10006d26 	beq	r2,zero,800e054 <__muldf3+0x254>
 800dea0:	00c1ffc4 	movi	r3,2047
 800dea4:	10c06526 	beq	r2,r3,800e03c <__muldf3+0x23c>
 800dea8:	8c400434 	orhi	r17,r17,16
 800deac:	300ed77a 	srli	r7,r6,29
 800deb0:	880690fa 	slli	r3,r17,3
 800deb4:	302490fa 	slli	r18,r6,3
 800deb8:	10bf0044 	addi	r2,r2,-1023
 800debc:	38e2b03a 	or	r17,r7,r3
 800dec0:	000f883a 	mov	r7,zero
 800dec4:	a087883a 	add	r3,r20,r2
 800dec8:	010003c4 	movi	r4,15
 800decc:	3d44b03a 	or	r2,r7,r21
 800ded0:	e5ccf03a 	xor	r6,fp,r23
 800ded4:	1a000044 	addi	r8,r3,1
 800ded8:	20809b36 	bltu	r4,r2,800e148 <__muldf3+0x348>
 800dedc:	100490ba 	slli	r2,r2,2
 800dee0:	01020074 	movhi	r4,2049
 800dee4:	2137bd04 	addi	r4,r4,-8460
 800dee8:	1105883a 	add	r2,r2,r4
 800deec:	10800017 	ldw	r2,0(r2)
 800def0:	1000683a 	jmp	r2
 800def4:	0800e148 	cmpgei	zero,at,901
 800def8:	0800df54 	ori	zero,at,893
 800defc:	0800df54 	ori	zero,at,893
 800df00:	0800df50 	cmplti	zero,at,893
 800df04:	0800e124 	muli	zero,at,900
 800df08:	0800e124 	muli	zero,at,900
 800df0c:	0800e10c 	andi	zero,at,900
 800df10:	0800df50 	cmplti	zero,at,893
 800df14:	0800e124 	muli	zero,at,900
 800df18:	0800e10c 	andi	zero,at,900
 800df1c:	0800e124 	muli	zero,at,900
 800df20:	0800df50 	cmplti	zero,at,893
 800df24:	0800e134 	orhi	zero,at,900
 800df28:	0800e134 	orhi	zero,at,900
 800df2c:	0800e134 	orhi	zero,at,900
 800df30:	0800e494 	ori	zero,at,914
 800df34:	2404b03a 	or	r2,r4,r16
 800df38:	1000711e 	bne	r2,zero,800e100 <__muldf3+0x300>
 800df3c:	05400204 	movi	r21,8
 800df40:	0021883a 	mov	r16,zero
 800df44:	002d883a 	mov	r22,zero
 800df48:	01400084 	movi	r5,2
 800df4c:	003fcb06 	br	800de7c <__alt_data_end+0xfc00de7c>
 800df50:	500d883a 	mov	r6,r10
 800df54:	00800084 	movi	r2,2
 800df58:	38805926 	beq	r7,r2,800e0c0 <__muldf3+0x2c0>
 800df5c:	008000c4 	movi	r2,3
 800df60:	3881bb26 	beq	r7,r2,800e650 <__muldf3+0x850>
 800df64:	00800044 	movi	r2,1
 800df68:	3881961e 	bne	r7,r2,800e5c4 <__muldf3+0x7c4>
 800df6c:	3027883a 	mov	r19,r6
 800df70:	0005883a 	mov	r2,zero
 800df74:	0021883a 	mov	r16,zero
 800df78:	002d883a 	mov	r22,zero
 800df7c:	1004953a 	slli	r2,r2,20
 800df80:	98c03fcc 	andi	r3,r19,255
 800df84:	04400434 	movhi	r17,16
 800df88:	8c7fffc4 	addi	r17,r17,-1
 800df8c:	180697fa 	slli	r3,r3,31
 800df90:	8460703a 	and	r16,r16,r17
 800df94:	80a0b03a 	or	r16,r16,r2
 800df98:	80c6b03a 	or	r3,r16,r3
 800df9c:	b005883a 	mov	r2,r22
 800dfa0:	dfc01117 	ldw	ra,68(sp)
 800dfa4:	df001017 	ldw	fp,64(sp)
 800dfa8:	ddc00f17 	ldw	r23,60(sp)
 800dfac:	dd800e17 	ldw	r22,56(sp)
 800dfb0:	dd400d17 	ldw	r21,52(sp)
 800dfb4:	dd000c17 	ldw	r20,48(sp)
 800dfb8:	dcc00b17 	ldw	r19,44(sp)
 800dfbc:	dc800a17 	ldw	r18,40(sp)
 800dfc0:	dc400917 	ldw	r17,36(sp)
 800dfc4:	dc000817 	ldw	r16,32(sp)
 800dfc8:	dec01204 	addi	sp,sp,72
 800dfcc:	f800283a 	ret
 800dfd0:	2404b03a 	or	r2,r4,r16
 800dfd4:	202b883a 	mov	r21,r4
 800dfd8:	10004426 	beq	r2,zero,800e0ec <__muldf3+0x2ec>
 800dfdc:	80015126 	beq	r16,zero,800e524 <__muldf3+0x724>
 800dfe0:	8009883a 	mov	r4,r16
 800dfe4:	d9800715 	stw	r6,28(sp)
 800dfe8:	d9c00215 	stw	r7,8(sp)
 800dfec:	da400415 	stw	r9,16(sp)
 800dff0:	800f16c0 	call	800f16c <__clzsi2>
 800dff4:	d9800717 	ldw	r6,28(sp)
 800dff8:	d9c00217 	ldw	r7,8(sp)
 800dffc:	da400417 	ldw	r9,16(sp)
 800e000:	113ffd44 	addi	r4,r2,-11
 800e004:	00c00704 	movi	r3,28
 800e008:	19014216 	blt	r3,r4,800e514 <__muldf3+0x714>
 800e00c:	00c00744 	movi	r3,29
 800e010:	15bffe04 	addi	r22,r2,-8
 800e014:	1907c83a 	sub	r3,r3,r4
 800e018:	85a0983a 	sll	r16,r16,r22
 800e01c:	a8c6d83a 	srl	r3,r21,r3
 800e020:	adac983a 	sll	r22,r21,r22
 800e024:	1c20b03a 	or	r16,r3,r16
 800e028:	1080fcc4 	addi	r2,r2,1011
 800e02c:	00a9c83a 	sub	r20,zero,r2
 800e030:	002b883a 	mov	r21,zero
 800e034:	000b883a 	mov	r5,zero
 800e038:	003f9006 	br	800de7c <__alt_data_end+0xfc00de7c>
 800e03c:	3446b03a 	or	r3,r6,r17
 800e040:	1800281e 	bne	r3,zero,800e0e4 <__muldf3+0x2e4>
 800e044:	0023883a 	mov	r17,zero
 800e048:	0025883a 	mov	r18,zero
 800e04c:	01c00084 	movi	r7,2
 800e050:	003f9c06 	br	800dec4 <__alt_data_end+0xfc00dec4>
 800e054:	3446b03a 	or	r3,r6,r17
 800e058:	18001e26 	beq	r3,zero,800e0d4 <__muldf3+0x2d4>
 800e05c:	88012126 	beq	r17,zero,800e4e4 <__muldf3+0x6e4>
 800e060:	8809883a 	mov	r4,r17
 800e064:	d9400215 	stw	r5,8(sp)
 800e068:	d9800715 	stw	r6,28(sp)
 800e06c:	da400415 	stw	r9,16(sp)
 800e070:	da800315 	stw	r10,12(sp)
 800e074:	800f16c0 	call	800f16c <__clzsi2>
 800e078:	d9400217 	ldw	r5,8(sp)
 800e07c:	d9800717 	ldw	r6,28(sp)
 800e080:	da400417 	ldw	r9,16(sp)
 800e084:	da800317 	ldw	r10,12(sp)
 800e088:	113ffd44 	addi	r4,r2,-11
 800e08c:	00c00704 	movi	r3,28
 800e090:	19011016 	blt	r3,r4,800e4d4 <__muldf3+0x6d4>
 800e094:	00c00744 	movi	r3,29
 800e098:	14bffe04 	addi	r18,r2,-8
 800e09c:	1907c83a 	sub	r3,r3,r4
 800e0a0:	8ca2983a 	sll	r17,r17,r18
 800e0a4:	30c6d83a 	srl	r3,r6,r3
 800e0a8:	34a4983a 	sll	r18,r6,r18
 800e0ac:	1c62b03a 	or	r17,r3,r17
 800e0b0:	1080fcc4 	addi	r2,r2,1011
 800e0b4:	0085c83a 	sub	r2,zero,r2
 800e0b8:	000f883a 	mov	r7,zero
 800e0bc:	003f8106 	br	800dec4 <__alt_data_end+0xfc00dec4>
 800e0c0:	3027883a 	mov	r19,r6
 800e0c4:	0081ffc4 	movi	r2,2047
 800e0c8:	0021883a 	mov	r16,zero
 800e0cc:	002d883a 	mov	r22,zero
 800e0d0:	003faa06 	br	800df7c <__alt_data_end+0xfc00df7c>
 800e0d4:	0023883a 	mov	r17,zero
 800e0d8:	0025883a 	mov	r18,zero
 800e0dc:	01c00044 	movi	r7,1
 800e0e0:	003f7806 	br	800dec4 <__alt_data_end+0xfc00dec4>
 800e0e4:	01c000c4 	movi	r7,3
 800e0e8:	003f7606 	br	800dec4 <__alt_data_end+0xfc00dec4>
 800e0ec:	05400104 	movi	r21,4
 800e0f0:	0021883a 	mov	r16,zero
 800e0f4:	002d883a 	mov	r22,zero
 800e0f8:	01400044 	movi	r5,1
 800e0fc:	003f5f06 	br	800de7c <__alt_data_end+0xfc00de7c>
 800e100:	05400304 	movi	r21,12
 800e104:	014000c4 	movi	r5,3
 800e108:	003f5c06 	br	800de7c <__alt_data_end+0xfc00de7c>
 800e10c:	04000434 	movhi	r16,16
 800e110:	0027883a 	mov	r19,zero
 800e114:	843fffc4 	addi	r16,r16,-1
 800e118:	05bfffc4 	movi	r22,-1
 800e11c:	0081ffc4 	movi	r2,2047
 800e120:	003f9606 	br	800df7c <__alt_data_end+0xfc00df7c>
 800e124:	8023883a 	mov	r17,r16
 800e128:	b025883a 	mov	r18,r22
 800e12c:	280f883a 	mov	r7,r5
 800e130:	003f8806 	br	800df54 <__alt_data_end+0xfc00df54>
 800e134:	8023883a 	mov	r17,r16
 800e138:	b025883a 	mov	r18,r22
 800e13c:	480d883a 	mov	r6,r9
 800e140:	280f883a 	mov	r7,r5
 800e144:	003f8306 	br	800df54 <__alt_data_end+0xfc00df54>
 800e148:	b026d43a 	srli	r19,r22,16
 800e14c:	902ed43a 	srli	r23,r18,16
 800e150:	b5bfffcc 	andi	r22,r22,65535
 800e154:	94bfffcc 	andi	r18,r18,65535
 800e158:	b00b883a 	mov	r5,r22
 800e15c:	9009883a 	mov	r4,r18
 800e160:	d8c00515 	stw	r3,20(sp)
 800e164:	d9800715 	stw	r6,28(sp)
 800e168:	da000615 	stw	r8,24(sp)
 800e16c:	800c9040 	call	800c904 <__mulsi3>
 800e170:	980b883a 	mov	r5,r19
 800e174:	9009883a 	mov	r4,r18
 800e178:	1029883a 	mov	r20,r2
 800e17c:	800c9040 	call	800c904 <__mulsi3>
 800e180:	b80b883a 	mov	r5,r23
 800e184:	9809883a 	mov	r4,r19
 800e188:	102b883a 	mov	r21,r2
 800e18c:	800c9040 	call	800c904 <__mulsi3>
 800e190:	b809883a 	mov	r4,r23
 800e194:	b00b883a 	mov	r5,r22
 800e198:	1039883a 	mov	fp,r2
 800e19c:	800c9040 	call	800c904 <__mulsi3>
 800e1a0:	a008d43a 	srli	r4,r20,16
 800e1a4:	1545883a 	add	r2,r2,r21
 800e1a8:	d8c00517 	ldw	r3,20(sp)
 800e1ac:	2085883a 	add	r2,r4,r2
 800e1b0:	d9800717 	ldw	r6,28(sp)
 800e1b4:	da000617 	ldw	r8,24(sp)
 800e1b8:	1540022e 	bgeu	r2,r21,800e1c4 <__muldf3+0x3c4>
 800e1bc:	01000074 	movhi	r4,1
 800e1c0:	e139883a 	add	fp,fp,r4
 800e1c4:	100e943a 	slli	r7,r2,16
 800e1c8:	1004d43a 	srli	r2,r2,16
 800e1cc:	882ad43a 	srli	r21,r17,16
 800e1d0:	a53fffcc 	andi	r20,r20,65535
 800e1d4:	8c7fffcc 	andi	r17,r17,65535
 800e1d8:	3d29883a 	add	r20,r7,r20
 800e1dc:	b00b883a 	mov	r5,r22
 800e1e0:	8809883a 	mov	r4,r17
 800e1e4:	d8c00515 	stw	r3,20(sp)
 800e1e8:	d9800715 	stw	r6,28(sp)
 800e1ec:	da000615 	stw	r8,24(sp)
 800e1f0:	dd000115 	stw	r20,4(sp)
 800e1f4:	d8800015 	stw	r2,0(sp)
 800e1f8:	800c9040 	call	800c904 <__mulsi3>
 800e1fc:	980b883a 	mov	r5,r19
 800e200:	8809883a 	mov	r4,r17
 800e204:	d8800215 	stw	r2,8(sp)
 800e208:	800c9040 	call	800c904 <__mulsi3>
 800e20c:	9809883a 	mov	r4,r19
 800e210:	a80b883a 	mov	r5,r21
 800e214:	1029883a 	mov	r20,r2
 800e218:	800c9040 	call	800c904 <__mulsi3>
 800e21c:	b00b883a 	mov	r5,r22
 800e220:	a809883a 	mov	r4,r21
 800e224:	d8800415 	stw	r2,16(sp)
 800e228:	800c9040 	call	800c904 <__mulsi3>
 800e22c:	d9c00217 	ldw	r7,8(sp)
 800e230:	1505883a 	add	r2,r2,r20
 800e234:	d8c00517 	ldw	r3,20(sp)
 800e238:	3826d43a 	srli	r19,r7,16
 800e23c:	d9800717 	ldw	r6,28(sp)
 800e240:	da000617 	ldw	r8,24(sp)
 800e244:	9885883a 	add	r2,r19,r2
 800e248:	da400417 	ldw	r9,16(sp)
 800e24c:	1500022e 	bgeu	r2,r20,800e258 <__muldf3+0x458>
 800e250:	01000074 	movhi	r4,1
 800e254:	4913883a 	add	r9,r9,r4
 800e258:	1028d43a 	srli	r20,r2,16
 800e25c:	1004943a 	slli	r2,r2,16
 800e260:	802cd43a 	srli	r22,r16,16
 800e264:	843fffcc 	andi	r16,r16,65535
 800e268:	3cffffcc 	andi	r19,r7,65535
 800e26c:	9009883a 	mov	r4,r18
 800e270:	800b883a 	mov	r5,r16
 800e274:	a269883a 	add	r20,r20,r9
 800e278:	d8c00515 	stw	r3,20(sp)
 800e27c:	d9800715 	stw	r6,28(sp)
 800e280:	da000615 	stw	r8,24(sp)
 800e284:	14e7883a 	add	r19,r2,r19
 800e288:	800c9040 	call	800c904 <__mulsi3>
 800e28c:	9009883a 	mov	r4,r18
 800e290:	b00b883a 	mov	r5,r22
 800e294:	d8800315 	stw	r2,12(sp)
 800e298:	800c9040 	call	800c904 <__mulsi3>
 800e29c:	b809883a 	mov	r4,r23
 800e2a0:	b00b883a 	mov	r5,r22
 800e2a4:	d8800215 	stw	r2,8(sp)
 800e2a8:	800c9040 	call	800c904 <__mulsi3>
 800e2ac:	b80b883a 	mov	r5,r23
 800e2b0:	8009883a 	mov	r4,r16
 800e2b4:	d8800415 	stw	r2,16(sp)
 800e2b8:	800c9040 	call	800c904 <__mulsi3>
 800e2bc:	da800317 	ldw	r10,12(sp)
 800e2c0:	d9c00217 	ldw	r7,8(sp)
 800e2c4:	d9000017 	ldw	r4,0(sp)
 800e2c8:	502ed43a 	srli	r23,r10,16
 800e2cc:	11c5883a 	add	r2,r2,r7
 800e2d0:	24e5883a 	add	r18,r4,r19
 800e2d4:	b885883a 	add	r2,r23,r2
 800e2d8:	d8c00517 	ldw	r3,20(sp)
 800e2dc:	d9800717 	ldw	r6,28(sp)
 800e2e0:	da000617 	ldw	r8,24(sp)
 800e2e4:	da400417 	ldw	r9,16(sp)
 800e2e8:	11c0022e 	bgeu	r2,r7,800e2f4 <__muldf3+0x4f4>
 800e2ec:	01000074 	movhi	r4,1
 800e2f0:	4913883a 	add	r9,r9,r4
 800e2f4:	100ed43a 	srli	r7,r2,16
 800e2f8:	1004943a 	slli	r2,r2,16
 800e2fc:	55ffffcc 	andi	r23,r10,65535
 800e300:	3a53883a 	add	r9,r7,r9
 800e304:	8809883a 	mov	r4,r17
 800e308:	800b883a 	mov	r5,r16
 800e30c:	d8c00515 	stw	r3,20(sp)
 800e310:	d9800715 	stw	r6,28(sp)
 800e314:	da000615 	stw	r8,24(sp)
 800e318:	da400415 	stw	r9,16(sp)
 800e31c:	15ef883a 	add	r23,r2,r23
 800e320:	800c9040 	call	800c904 <__mulsi3>
 800e324:	8809883a 	mov	r4,r17
 800e328:	b00b883a 	mov	r5,r22
 800e32c:	d8800215 	stw	r2,8(sp)
 800e330:	800c9040 	call	800c904 <__mulsi3>
 800e334:	b00b883a 	mov	r5,r22
 800e338:	a809883a 	mov	r4,r21
 800e33c:	d8800315 	stw	r2,12(sp)
 800e340:	800c9040 	call	800c904 <__mulsi3>
 800e344:	8009883a 	mov	r4,r16
 800e348:	a80b883a 	mov	r5,r21
 800e34c:	1023883a 	mov	r17,r2
 800e350:	800c9040 	call	800c904 <__mulsi3>
 800e354:	d9c00217 	ldw	r7,8(sp)
 800e358:	da800317 	ldw	r10,12(sp)
 800e35c:	d8c00517 	ldw	r3,20(sp)
 800e360:	3808d43a 	srli	r4,r7,16
 800e364:	1285883a 	add	r2,r2,r10
 800e368:	d9800717 	ldw	r6,28(sp)
 800e36c:	2085883a 	add	r2,r4,r2
 800e370:	da000617 	ldw	r8,24(sp)
 800e374:	da400417 	ldw	r9,16(sp)
 800e378:	1280022e 	bgeu	r2,r10,800e384 <__muldf3+0x584>
 800e37c:	01000074 	movhi	r4,1
 800e380:	8923883a 	add	r17,r17,r4
 800e384:	1008943a 	slli	r4,r2,16
 800e388:	39ffffcc 	andi	r7,r7,65535
 800e38c:	e4b9883a 	add	fp,fp,r18
 800e390:	21cf883a 	add	r7,r4,r7
 800e394:	e4e7803a 	cmpltu	r19,fp,r19
 800e398:	3d0f883a 	add	r7,r7,r20
 800e39c:	bf39883a 	add	fp,r23,fp
 800e3a0:	99c9883a 	add	r4,r19,r7
 800e3a4:	e5ef803a 	cmpltu	r23,fp,r23
 800e3a8:	490b883a 	add	r5,r9,r4
 800e3ac:	1004d43a 	srli	r2,r2,16
 800e3b0:	b965883a 	add	r18,r23,r5
 800e3b4:	24c9803a 	cmpltu	r4,r4,r19
 800e3b8:	3d29803a 	cmpltu	r20,r7,r20
 800e3bc:	a128b03a 	or	r20,r20,r4
 800e3c0:	95ef803a 	cmpltu	r23,r18,r23
 800e3c4:	2a53803a 	cmpltu	r9,r5,r9
 800e3c8:	a0a9883a 	add	r20,r20,r2
 800e3cc:	4deeb03a 	or	r23,r9,r23
 800e3d0:	a5ef883a 	add	r23,r20,r23
 800e3d4:	bc63883a 	add	r17,r23,r17
 800e3d8:	e004927a 	slli	r2,fp,9
 800e3dc:	d9000117 	ldw	r4,4(sp)
 800e3e0:	882e927a 	slli	r23,r17,9
 800e3e4:	9022d5fa 	srli	r17,r18,23
 800e3e8:	e038d5fa 	srli	fp,fp,23
 800e3ec:	1104b03a 	or	r2,r2,r4
 800e3f0:	9024927a 	slli	r18,r18,9
 800e3f4:	1004c03a 	cmpne	r2,r2,zero
 800e3f8:	bc62b03a 	or	r17,r23,r17
 800e3fc:	1738b03a 	or	fp,r2,fp
 800e400:	8880402c 	andhi	r2,r17,256
 800e404:	e4a4b03a 	or	r18,fp,r18
 800e408:	10000726 	beq	r2,zero,800e428 <__muldf3+0x628>
 800e40c:	9006d07a 	srli	r3,r18,1
 800e410:	880497fa 	slli	r2,r17,31
 800e414:	9480004c 	andi	r18,r18,1
 800e418:	8822d07a 	srli	r17,r17,1
 800e41c:	1ca4b03a 	or	r18,r3,r18
 800e420:	14a4b03a 	or	r18,r2,r18
 800e424:	4007883a 	mov	r3,r8
 800e428:	1880ffc4 	addi	r2,r3,1023
 800e42c:	0080460e 	bge	zero,r2,800e548 <__muldf3+0x748>
 800e430:	910001cc 	andi	r4,r18,7
 800e434:	20000726 	beq	r4,zero,800e454 <__muldf3+0x654>
 800e438:	910003cc 	andi	r4,r18,15
 800e43c:	01400104 	movi	r5,4
 800e440:	21400426 	beq	r4,r5,800e454 <__muldf3+0x654>
 800e444:	9149883a 	add	r4,r18,r5
 800e448:	24a5803a 	cmpltu	r18,r4,r18
 800e44c:	8ca3883a 	add	r17,r17,r18
 800e450:	2025883a 	mov	r18,r4
 800e454:	8900402c 	andhi	r4,r17,256
 800e458:	20000426 	beq	r4,zero,800e46c <__muldf3+0x66c>
 800e45c:	18810004 	addi	r2,r3,1024
 800e460:	00ffc034 	movhi	r3,65280
 800e464:	18ffffc4 	addi	r3,r3,-1
 800e468:	88e2703a 	and	r17,r17,r3
 800e46c:	00c1ff84 	movi	r3,2046
 800e470:	18bf1316 	blt	r3,r2,800e0c0 <__alt_data_end+0xfc00e0c0>
 800e474:	882c977a 	slli	r22,r17,29
 800e478:	9024d0fa 	srli	r18,r18,3
 800e47c:	8822927a 	slli	r17,r17,9
 800e480:	1081ffcc 	andi	r2,r2,2047
 800e484:	b4acb03a 	or	r22,r22,r18
 800e488:	8820d33a 	srli	r16,r17,12
 800e48c:	3027883a 	mov	r19,r6
 800e490:	003eba06 	br	800df7c <__alt_data_end+0xfc00df7c>
 800e494:	8080022c 	andhi	r2,r16,8
 800e498:	10000926 	beq	r2,zero,800e4c0 <__muldf3+0x6c0>
 800e49c:	8880022c 	andhi	r2,r17,8
 800e4a0:	1000071e 	bne	r2,zero,800e4c0 <__muldf3+0x6c0>
 800e4a4:	00800434 	movhi	r2,16
 800e4a8:	8c000234 	orhi	r16,r17,8
 800e4ac:	10bfffc4 	addi	r2,r2,-1
 800e4b0:	e027883a 	mov	r19,fp
 800e4b4:	80a0703a 	and	r16,r16,r2
 800e4b8:	902d883a 	mov	r22,r18
 800e4bc:	003f1706 	br	800e11c <__alt_data_end+0xfc00e11c>
 800e4c0:	00800434 	movhi	r2,16
 800e4c4:	84000234 	orhi	r16,r16,8
 800e4c8:	10bfffc4 	addi	r2,r2,-1
 800e4cc:	80a0703a 	and	r16,r16,r2
 800e4d0:	003f1206 	br	800e11c <__alt_data_end+0xfc00e11c>
 800e4d4:	147ff604 	addi	r17,r2,-40
 800e4d8:	3462983a 	sll	r17,r6,r17
 800e4dc:	0025883a 	mov	r18,zero
 800e4e0:	003ef306 	br	800e0b0 <__alt_data_end+0xfc00e0b0>
 800e4e4:	3009883a 	mov	r4,r6
 800e4e8:	d9400215 	stw	r5,8(sp)
 800e4ec:	d9800715 	stw	r6,28(sp)
 800e4f0:	da400415 	stw	r9,16(sp)
 800e4f4:	da800315 	stw	r10,12(sp)
 800e4f8:	800f16c0 	call	800f16c <__clzsi2>
 800e4fc:	10800804 	addi	r2,r2,32
 800e500:	da800317 	ldw	r10,12(sp)
 800e504:	da400417 	ldw	r9,16(sp)
 800e508:	d9800717 	ldw	r6,28(sp)
 800e50c:	d9400217 	ldw	r5,8(sp)
 800e510:	003edd06 	br	800e088 <__alt_data_end+0xfc00e088>
 800e514:	143ff604 	addi	r16,r2,-40
 800e518:	ac20983a 	sll	r16,r21,r16
 800e51c:	002d883a 	mov	r22,zero
 800e520:	003ec106 	br	800e028 <__alt_data_end+0xfc00e028>
 800e524:	d9800715 	stw	r6,28(sp)
 800e528:	d9c00215 	stw	r7,8(sp)
 800e52c:	da400415 	stw	r9,16(sp)
 800e530:	800f16c0 	call	800f16c <__clzsi2>
 800e534:	10800804 	addi	r2,r2,32
 800e538:	da400417 	ldw	r9,16(sp)
 800e53c:	d9c00217 	ldw	r7,8(sp)
 800e540:	d9800717 	ldw	r6,28(sp)
 800e544:	003eae06 	br	800e000 <__alt_data_end+0xfc00e000>
 800e548:	00c00044 	movi	r3,1
 800e54c:	1887c83a 	sub	r3,r3,r2
 800e550:	01000e04 	movi	r4,56
 800e554:	20fe8516 	blt	r4,r3,800df6c <__alt_data_end+0xfc00df6c>
 800e558:	010007c4 	movi	r4,31
 800e55c:	20c01b16 	blt	r4,r3,800e5cc <__muldf3+0x7cc>
 800e560:	00800804 	movi	r2,32
 800e564:	10c5c83a 	sub	r2,r2,r3
 800e568:	888a983a 	sll	r5,r17,r2
 800e56c:	90c8d83a 	srl	r4,r18,r3
 800e570:	9084983a 	sll	r2,r18,r2
 800e574:	88e2d83a 	srl	r17,r17,r3
 800e578:	2906b03a 	or	r3,r5,r4
 800e57c:	1004c03a 	cmpne	r2,r2,zero
 800e580:	1886b03a 	or	r3,r3,r2
 800e584:	188001cc 	andi	r2,r3,7
 800e588:	10000726 	beq	r2,zero,800e5a8 <__muldf3+0x7a8>
 800e58c:	188003cc 	andi	r2,r3,15
 800e590:	01000104 	movi	r4,4
 800e594:	11000426 	beq	r2,r4,800e5a8 <__muldf3+0x7a8>
 800e598:	1805883a 	mov	r2,r3
 800e59c:	10c00104 	addi	r3,r2,4
 800e5a0:	1885803a 	cmpltu	r2,r3,r2
 800e5a4:	88a3883a 	add	r17,r17,r2
 800e5a8:	8880202c 	andhi	r2,r17,128
 800e5ac:	10001c26 	beq	r2,zero,800e620 <__muldf3+0x820>
 800e5b0:	3027883a 	mov	r19,r6
 800e5b4:	00800044 	movi	r2,1
 800e5b8:	0021883a 	mov	r16,zero
 800e5bc:	002d883a 	mov	r22,zero
 800e5c0:	003e6e06 	br	800df7c <__alt_data_end+0xfc00df7c>
 800e5c4:	4007883a 	mov	r3,r8
 800e5c8:	003f9706 	br	800e428 <__alt_data_end+0xfc00e428>
 800e5cc:	017ff844 	movi	r5,-31
 800e5d0:	2885c83a 	sub	r2,r5,r2
 800e5d4:	888ad83a 	srl	r5,r17,r2
 800e5d8:	00800804 	movi	r2,32
 800e5dc:	18801a26 	beq	r3,r2,800e648 <__muldf3+0x848>
 800e5e0:	01001004 	movi	r4,64
 800e5e4:	20c7c83a 	sub	r3,r4,r3
 800e5e8:	88e2983a 	sll	r17,r17,r3
 800e5ec:	8ca4b03a 	or	r18,r17,r18
 800e5f0:	9004c03a 	cmpne	r2,r18,zero
 800e5f4:	2884b03a 	or	r2,r5,r2
 800e5f8:	144001cc 	andi	r17,r2,7
 800e5fc:	88000d1e 	bne	r17,zero,800e634 <__muldf3+0x834>
 800e600:	0021883a 	mov	r16,zero
 800e604:	102cd0fa 	srli	r22,r2,3
 800e608:	3027883a 	mov	r19,r6
 800e60c:	0005883a 	mov	r2,zero
 800e610:	b46cb03a 	or	r22,r22,r17
 800e614:	003e5906 	br	800df7c <__alt_data_end+0xfc00df7c>
 800e618:	1007883a 	mov	r3,r2
 800e61c:	0023883a 	mov	r17,zero
 800e620:	8820927a 	slli	r16,r17,9
 800e624:	1805883a 	mov	r2,r3
 800e628:	8822977a 	slli	r17,r17,29
 800e62c:	8020d33a 	srli	r16,r16,12
 800e630:	003ff406 	br	800e604 <__alt_data_end+0xfc00e604>
 800e634:	10c003cc 	andi	r3,r2,15
 800e638:	01000104 	movi	r4,4
 800e63c:	193ff626 	beq	r3,r4,800e618 <__alt_data_end+0xfc00e618>
 800e640:	0023883a 	mov	r17,zero
 800e644:	003fd506 	br	800e59c <__alt_data_end+0xfc00e59c>
 800e648:	0023883a 	mov	r17,zero
 800e64c:	003fe706 	br	800e5ec <__alt_data_end+0xfc00e5ec>
 800e650:	00800434 	movhi	r2,16
 800e654:	8c000234 	orhi	r16,r17,8
 800e658:	10bfffc4 	addi	r2,r2,-1
 800e65c:	3027883a 	mov	r19,r6
 800e660:	80a0703a 	and	r16,r16,r2
 800e664:	902d883a 	mov	r22,r18
 800e668:	003eac06 	br	800e11c <__alt_data_end+0xfc00e11c>

0800e66c <__subdf3>:
 800e66c:	02000434 	movhi	r8,16
 800e670:	423fffc4 	addi	r8,r8,-1
 800e674:	defffb04 	addi	sp,sp,-20
 800e678:	2a14703a 	and	r10,r5,r8
 800e67c:	3812d53a 	srli	r9,r7,20
 800e680:	3a10703a 	and	r8,r7,r8
 800e684:	2006d77a 	srli	r3,r4,29
 800e688:	3004d77a 	srli	r2,r6,29
 800e68c:	dc000015 	stw	r16,0(sp)
 800e690:	501490fa 	slli	r10,r10,3
 800e694:	2820d53a 	srli	r16,r5,20
 800e698:	401090fa 	slli	r8,r8,3
 800e69c:	dc800215 	stw	r18,8(sp)
 800e6a0:	dc400115 	stw	r17,4(sp)
 800e6a4:	dfc00415 	stw	ra,16(sp)
 800e6a8:	202290fa 	slli	r17,r4,3
 800e6ac:	dcc00315 	stw	r19,12(sp)
 800e6b0:	4a41ffcc 	andi	r9,r9,2047
 800e6b4:	0101ffc4 	movi	r4,2047
 800e6b8:	2824d7fa 	srli	r18,r5,31
 800e6bc:	8401ffcc 	andi	r16,r16,2047
 800e6c0:	50c6b03a 	or	r3,r10,r3
 800e6c4:	380ed7fa 	srli	r7,r7,31
 800e6c8:	408ab03a 	or	r5,r8,r2
 800e6cc:	300c90fa 	slli	r6,r6,3
 800e6d0:	49009626 	beq	r9,r4,800e92c <__subdf3+0x2c0>
 800e6d4:	39c0005c 	xori	r7,r7,1
 800e6d8:	8245c83a 	sub	r2,r16,r9
 800e6dc:	3c807426 	beq	r7,r18,800e8b0 <__subdf3+0x244>
 800e6e0:	0080af0e 	bge	zero,r2,800e9a0 <__subdf3+0x334>
 800e6e4:	48002a1e 	bne	r9,zero,800e790 <__subdf3+0x124>
 800e6e8:	2988b03a 	or	r4,r5,r6
 800e6ec:	20009a1e 	bne	r4,zero,800e958 <__subdf3+0x2ec>
 800e6f0:	888001cc 	andi	r2,r17,7
 800e6f4:	10000726 	beq	r2,zero,800e714 <__subdf3+0xa8>
 800e6f8:	888003cc 	andi	r2,r17,15
 800e6fc:	01000104 	movi	r4,4
 800e700:	11000426 	beq	r2,r4,800e714 <__subdf3+0xa8>
 800e704:	890b883a 	add	r5,r17,r4
 800e708:	2c63803a 	cmpltu	r17,r5,r17
 800e70c:	1c47883a 	add	r3,r3,r17
 800e710:	2823883a 	mov	r17,r5
 800e714:	1880202c 	andhi	r2,r3,128
 800e718:	10005926 	beq	r2,zero,800e880 <__subdf3+0x214>
 800e71c:	84000044 	addi	r16,r16,1
 800e720:	0081ffc4 	movi	r2,2047
 800e724:	8080be26 	beq	r16,r2,800ea20 <__subdf3+0x3b4>
 800e728:	017fe034 	movhi	r5,65408
 800e72c:	297fffc4 	addi	r5,r5,-1
 800e730:	1946703a 	and	r3,r3,r5
 800e734:	1804977a 	slli	r2,r3,29
 800e738:	1806927a 	slli	r3,r3,9
 800e73c:	8822d0fa 	srli	r17,r17,3
 800e740:	8401ffcc 	andi	r16,r16,2047
 800e744:	180ad33a 	srli	r5,r3,12
 800e748:	9100004c 	andi	r4,r18,1
 800e74c:	1444b03a 	or	r2,r2,r17
 800e750:	80c1ffcc 	andi	r3,r16,2047
 800e754:	1820953a 	slli	r16,r3,20
 800e758:	20c03fcc 	andi	r3,r4,255
 800e75c:	180897fa 	slli	r4,r3,31
 800e760:	00c00434 	movhi	r3,16
 800e764:	18ffffc4 	addi	r3,r3,-1
 800e768:	28c6703a 	and	r3,r5,r3
 800e76c:	1c06b03a 	or	r3,r3,r16
 800e770:	1906b03a 	or	r3,r3,r4
 800e774:	dfc00417 	ldw	ra,16(sp)
 800e778:	dcc00317 	ldw	r19,12(sp)
 800e77c:	dc800217 	ldw	r18,8(sp)
 800e780:	dc400117 	ldw	r17,4(sp)
 800e784:	dc000017 	ldw	r16,0(sp)
 800e788:	dec00504 	addi	sp,sp,20
 800e78c:	f800283a 	ret
 800e790:	0101ffc4 	movi	r4,2047
 800e794:	813fd626 	beq	r16,r4,800e6f0 <__alt_data_end+0xfc00e6f0>
 800e798:	29402034 	orhi	r5,r5,128
 800e79c:	01000e04 	movi	r4,56
 800e7a0:	2080a316 	blt	r4,r2,800ea30 <__subdf3+0x3c4>
 800e7a4:	010007c4 	movi	r4,31
 800e7a8:	2080c616 	blt	r4,r2,800eac4 <__subdf3+0x458>
 800e7ac:	01000804 	movi	r4,32
 800e7b0:	2089c83a 	sub	r4,r4,r2
 800e7b4:	2910983a 	sll	r8,r5,r4
 800e7b8:	308ed83a 	srl	r7,r6,r2
 800e7bc:	3108983a 	sll	r4,r6,r4
 800e7c0:	2884d83a 	srl	r2,r5,r2
 800e7c4:	41ccb03a 	or	r6,r8,r7
 800e7c8:	2008c03a 	cmpne	r4,r4,zero
 800e7cc:	310cb03a 	or	r6,r6,r4
 800e7d0:	898dc83a 	sub	r6,r17,r6
 800e7d4:	89a3803a 	cmpltu	r17,r17,r6
 800e7d8:	1887c83a 	sub	r3,r3,r2
 800e7dc:	1c47c83a 	sub	r3,r3,r17
 800e7e0:	3023883a 	mov	r17,r6
 800e7e4:	1880202c 	andhi	r2,r3,128
 800e7e8:	10002326 	beq	r2,zero,800e878 <__subdf3+0x20c>
 800e7ec:	04c02034 	movhi	r19,128
 800e7f0:	9cffffc4 	addi	r19,r19,-1
 800e7f4:	1ce6703a 	and	r19,r3,r19
 800e7f8:	98007a26 	beq	r19,zero,800e9e4 <__subdf3+0x378>
 800e7fc:	9809883a 	mov	r4,r19
 800e800:	800f16c0 	call	800f16c <__clzsi2>
 800e804:	113ffe04 	addi	r4,r2,-8
 800e808:	00c007c4 	movi	r3,31
 800e80c:	19007b16 	blt	r3,r4,800e9fc <__subdf3+0x390>
 800e810:	00800804 	movi	r2,32
 800e814:	1105c83a 	sub	r2,r2,r4
 800e818:	8884d83a 	srl	r2,r17,r2
 800e81c:	9906983a 	sll	r3,r19,r4
 800e820:	8922983a 	sll	r17,r17,r4
 800e824:	10c4b03a 	or	r2,r2,r3
 800e828:	24007816 	blt	r4,r16,800ea0c <__subdf3+0x3a0>
 800e82c:	2421c83a 	sub	r16,r4,r16
 800e830:	80c00044 	addi	r3,r16,1
 800e834:	010007c4 	movi	r4,31
 800e838:	20c09516 	blt	r4,r3,800ea90 <__subdf3+0x424>
 800e83c:	01400804 	movi	r5,32
 800e840:	28cbc83a 	sub	r5,r5,r3
 800e844:	88c8d83a 	srl	r4,r17,r3
 800e848:	8962983a 	sll	r17,r17,r5
 800e84c:	114a983a 	sll	r5,r2,r5
 800e850:	10c6d83a 	srl	r3,r2,r3
 800e854:	8804c03a 	cmpne	r2,r17,zero
 800e858:	290ab03a 	or	r5,r5,r4
 800e85c:	28a2b03a 	or	r17,r5,r2
 800e860:	0021883a 	mov	r16,zero
 800e864:	003fa206 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800e868:	2090b03a 	or	r8,r4,r2
 800e86c:	40018e26 	beq	r8,zero,800eea8 <__subdf3+0x83c>
 800e870:	1007883a 	mov	r3,r2
 800e874:	2023883a 	mov	r17,r4
 800e878:	888001cc 	andi	r2,r17,7
 800e87c:	103f9e1e 	bne	r2,zero,800e6f8 <__alt_data_end+0xfc00e6f8>
 800e880:	1804977a 	slli	r2,r3,29
 800e884:	8822d0fa 	srli	r17,r17,3
 800e888:	1810d0fa 	srli	r8,r3,3
 800e88c:	9100004c 	andi	r4,r18,1
 800e890:	1444b03a 	or	r2,r2,r17
 800e894:	00c1ffc4 	movi	r3,2047
 800e898:	80c02826 	beq	r16,r3,800e93c <__subdf3+0x2d0>
 800e89c:	01400434 	movhi	r5,16
 800e8a0:	297fffc4 	addi	r5,r5,-1
 800e8a4:	80e0703a 	and	r16,r16,r3
 800e8a8:	414a703a 	and	r5,r8,r5
 800e8ac:	003fa806 	br	800e750 <__alt_data_end+0xfc00e750>
 800e8b0:	0080630e 	bge	zero,r2,800ea40 <__subdf3+0x3d4>
 800e8b4:	48003026 	beq	r9,zero,800e978 <__subdf3+0x30c>
 800e8b8:	0101ffc4 	movi	r4,2047
 800e8bc:	813f8c26 	beq	r16,r4,800e6f0 <__alt_data_end+0xfc00e6f0>
 800e8c0:	29402034 	orhi	r5,r5,128
 800e8c4:	01000e04 	movi	r4,56
 800e8c8:	2080a90e 	bge	r4,r2,800eb70 <__subdf3+0x504>
 800e8cc:	298cb03a 	or	r6,r5,r6
 800e8d0:	3012c03a 	cmpne	r9,r6,zero
 800e8d4:	0005883a 	mov	r2,zero
 800e8d8:	4c53883a 	add	r9,r9,r17
 800e8dc:	4c63803a 	cmpltu	r17,r9,r17
 800e8e0:	10c7883a 	add	r3,r2,r3
 800e8e4:	88c7883a 	add	r3,r17,r3
 800e8e8:	4823883a 	mov	r17,r9
 800e8ec:	1880202c 	andhi	r2,r3,128
 800e8f0:	1000d026 	beq	r2,zero,800ec34 <__subdf3+0x5c8>
 800e8f4:	84000044 	addi	r16,r16,1
 800e8f8:	0081ffc4 	movi	r2,2047
 800e8fc:	8080fe26 	beq	r16,r2,800ecf8 <__subdf3+0x68c>
 800e900:	00bfe034 	movhi	r2,65408
 800e904:	10bfffc4 	addi	r2,r2,-1
 800e908:	1886703a 	and	r3,r3,r2
 800e90c:	880ad07a 	srli	r5,r17,1
 800e910:	180497fa 	slli	r2,r3,31
 800e914:	8900004c 	andi	r4,r17,1
 800e918:	2922b03a 	or	r17,r5,r4
 800e91c:	1806d07a 	srli	r3,r3,1
 800e920:	1462b03a 	or	r17,r2,r17
 800e924:	3825883a 	mov	r18,r7
 800e928:	003f7106 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800e92c:	2984b03a 	or	r2,r5,r6
 800e930:	103f6826 	beq	r2,zero,800e6d4 <__alt_data_end+0xfc00e6d4>
 800e934:	39c03fcc 	andi	r7,r7,255
 800e938:	003f6706 	br	800e6d8 <__alt_data_end+0xfc00e6d8>
 800e93c:	4086b03a 	or	r3,r8,r2
 800e940:	18015226 	beq	r3,zero,800ee8c <__subdf3+0x820>
 800e944:	00c00434 	movhi	r3,16
 800e948:	41400234 	orhi	r5,r8,8
 800e94c:	18ffffc4 	addi	r3,r3,-1
 800e950:	28ca703a 	and	r5,r5,r3
 800e954:	003f7e06 	br	800e750 <__alt_data_end+0xfc00e750>
 800e958:	10bfffc4 	addi	r2,r2,-1
 800e95c:	1000491e 	bne	r2,zero,800ea84 <__subdf3+0x418>
 800e960:	898fc83a 	sub	r7,r17,r6
 800e964:	89e3803a 	cmpltu	r17,r17,r7
 800e968:	1947c83a 	sub	r3,r3,r5
 800e96c:	1c47c83a 	sub	r3,r3,r17
 800e970:	3823883a 	mov	r17,r7
 800e974:	003f9b06 	br	800e7e4 <__alt_data_end+0xfc00e7e4>
 800e978:	2988b03a 	or	r4,r5,r6
 800e97c:	203f5c26 	beq	r4,zero,800e6f0 <__alt_data_end+0xfc00e6f0>
 800e980:	10bfffc4 	addi	r2,r2,-1
 800e984:	1000931e 	bne	r2,zero,800ebd4 <__subdf3+0x568>
 800e988:	898d883a 	add	r6,r17,r6
 800e98c:	3463803a 	cmpltu	r17,r6,r17
 800e990:	1947883a 	add	r3,r3,r5
 800e994:	88c7883a 	add	r3,r17,r3
 800e998:	3023883a 	mov	r17,r6
 800e99c:	003fd306 	br	800e8ec <__alt_data_end+0xfc00e8ec>
 800e9a0:	1000541e 	bne	r2,zero,800eaf4 <__subdf3+0x488>
 800e9a4:	80800044 	addi	r2,r16,1
 800e9a8:	1081ffcc 	andi	r2,r2,2047
 800e9ac:	01000044 	movi	r4,1
 800e9b0:	2080a20e 	bge	r4,r2,800ec3c <__subdf3+0x5d0>
 800e9b4:	8989c83a 	sub	r4,r17,r6
 800e9b8:	8905803a 	cmpltu	r2,r17,r4
 800e9bc:	1967c83a 	sub	r19,r3,r5
 800e9c0:	98a7c83a 	sub	r19,r19,r2
 800e9c4:	9880202c 	andhi	r2,r19,128
 800e9c8:	10006326 	beq	r2,zero,800eb58 <__subdf3+0x4ec>
 800e9cc:	3463c83a 	sub	r17,r6,r17
 800e9d0:	28c7c83a 	sub	r3,r5,r3
 800e9d4:	344d803a 	cmpltu	r6,r6,r17
 800e9d8:	19a7c83a 	sub	r19,r3,r6
 800e9dc:	3825883a 	mov	r18,r7
 800e9e0:	983f861e 	bne	r19,zero,800e7fc <__alt_data_end+0xfc00e7fc>
 800e9e4:	8809883a 	mov	r4,r17
 800e9e8:	800f16c0 	call	800f16c <__clzsi2>
 800e9ec:	10800804 	addi	r2,r2,32
 800e9f0:	113ffe04 	addi	r4,r2,-8
 800e9f4:	00c007c4 	movi	r3,31
 800e9f8:	193f850e 	bge	r3,r4,800e810 <__alt_data_end+0xfc00e810>
 800e9fc:	10bff604 	addi	r2,r2,-40
 800ea00:	8884983a 	sll	r2,r17,r2
 800ea04:	0023883a 	mov	r17,zero
 800ea08:	243f880e 	bge	r4,r16,800e82c <__alt_data_end+0xfc00e82c>
 800ea0c:	00ffe034 	movhi	r3,65408
 800ea10:	18ffffc4 	addi	r3,r3,-1
 800ea14:	8121c83a 	sub	r16,r16,r4
 800ea18:	10c6703a 	and	r3,r2,r3
 800ea1c:	003f3406 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ea20:	9100004c 	andi	r4,r18,1
 800ea24:	000b883a 	mov	r5,zero
 800ea28:	0005883a 	mov	r2,zero
 800ea2c:	003f4806 	br	800e750 <__alt_data_end+0xfc00e750>
 800ea30:	298cb03a 	or	r6,r5,r6
 800ea34:	300cc03a 	cmpne	r6,r6,zero
 800ea38:	0005883a 	mov	r2,zero
 800ea3c:	003f6406 	br	800e7d0 <__alt_data_end+0xfc00e7d0>
 800ea40:	10009a1e 	bne	r2,zero,800ecac <__subdf3+0x640>
 800ea44:	82400044 	addi	r9,r16,1
 800ea48:	4881ffcc 	andi	r2,r9,2047
 800ea4c:	02800044 	movi	r10,1
 800ea50:	5080670e 	bge	r10,r2,800ebf0 <__subdf3+0x584>
 800ea54:	0081ffc4 	movi	r2,2047
 800ea58:	4880af26 	beq	r9,r2,800ed18 <__subdf3+0x6ac>
 800ea5c:	898d883a 	add	r6,r17,r6
 800ea60:	1945883a 	add	r2,r3,r5
 800ea64:	3447803a 	cmpltu	r3,r6,r17
 800ea68:	1887883a 	add	r3,r3,r2
 800ea6c:	182297fa 	slli	r17,r3,31
 800ea70:	300cd07a 	srli	r6,r6,1
 800ea74:	1806d07a 	srli	r3,r3,1
 800ea78:	4821883a 	mov	r16,r9
 800ea7c:	89a2b03a 	or	r17,r17,r6
 800ea80:	003f1b06 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ea84:	0101ffc4 	movi	r4,2047
 800ea88:	813f441e 	bne	r16,r4,800e79c <__alt_data_end+0xfc00e79c>
 800ea8c:	003f1806 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ea90:	843ff844 	addi	r16,r16,-31
 800ea94:	01400804 	movi	r5,32
 800ea98:	1408d83a 	srl	r4,r2,r16
 800ea9c:	19405026 	beq	r3,r5,800ebe0 <__subdf3+0x574>
 800eaa0:	01401004 	movi	r5,64
 800eaa4:	28c7c83a 	sub	r3,r5,r3
 800eaa8:	10c4983a 	sll	r2,r2,r3
 800eaac:	88a2b03a 	or	r17,r17,r2
 800eab0:	8822c03a 	cmpne	r17,r17,zero
 800eab4:	2462b03a 	or	r17,r4,r17
 800eab8:	0007883a 	mov	r3,zero
 800eabc:	0021883a 	mov	r16,zero
 800eac0:	003f6d06 	br	800e878 <__alt_data_end+0xfc00e878>
 800eac4:	11fff804 	addi	r7,r2,-32
 800eac8:	01000804 	movi	r4,32
 800eacc:	29ced83a 	srl	r7,r5,r7
 800ead0:	11004526 	beq	r2,r4,800ebe8 <__subdf3+0x57c>
 800ead4:	01001004 	movi	r4,64
 800ead8:	2089c83a 	sub	r4,r4,r2
 800eadc:	2904983a 	sll	r2,r5,r4
 800eae0:	118cb03a 	or	r6,r2,r6
 800eae4:	300cc03a 	cmpne	r6,r6,zero
 800eae8:	398cb03a 	or	r6,r7,r6
 800eaec:	0005883a 	mov	r2,zero
 800eaf0:	003f3706 	br	800e7d0 <__alt_data_end+0xfc00e7d0>
 800eaf4:	80002a26 	beq	r16,zero,800eba0 <__subdf3+0x534>
 800eaf8:	0101ffc4 	movi	r4,2047
 800eafc:	49006626 	beq	r9,r4,800ec98 <__subdf3+0x62c>
 800eb00:	0085c83a 	sub	r2,zero,r2
 800eb04:	18c02034 	orhi	r3,r3,128
 800eb08:	01000e04 	movi	r4,56
 800eb0c:	20807e16 	blt	r4,r2,800ed08 <__subdf3+0x69c>
 800eb10:	010007c4 	movi	r4,31
 800eb14:	2080e716 	blt	r4,r2,800eeb4 <__subdf3+0x848>
 800eb18:	01000804 	movi	r4,32
 800eb1c:	2089c83a 	sub	r4,r4,r2
 800eb20:	1914983a 	sll	r10,r3,r4
 800eb24:	8890d83a 	srl	r8,r17,r2
 800eb28:	8908983a 	sll	r4,r17,r4
 800eb2c:	1884d83a 	srl	r2,r3,r2
 800eb30:	5222b03a 	or	r17,r10,r8
 800eb34:	2006c03a 	cmpne	r3,r4,zero
 800eb38:	88e2b03a 	or	r17,r17,r3
 800eb3c:	3463c83a 	sub	r17,r6,r17
 800eb40:	2885c83a 	sub	r2,r5,r2
 800eb44:	344d803a 	cmpltu	r6,r6,r17
 800eb48:	1187c83a 	sub	r3,r2,r6
 800eb4c:	4821883a 	mov	r16,r9
 800eb50:	3825883a 	mov	r18,r7
 800eb54:	003f2306 	br	800e7e4 <__alt_data_end+0xfc00e7e4>
 800eb58:	24d0b03a 	or	r8,r4,r19
 800eb5c:	40001b1e 	bne	r8,zero,800ebcc <__subdf3+0x560>
 800eb60:	0005883a 	mov	r2,zero
 800eb64:	0009883a 	mov	r4,zero
 800eb68:	0021883a 	mov	r16,zero
 800eb6c:	003f4906 	br	800e894 <__alt_data_end+0xfc00e894>
 800eb70:	010007c4 	movi	r4,31
 800eb74:	20803a16 	blt	r4,r2,800ec60 <__subdf3+0x5f4>
 800eb78:	01000804 	movi	r4,32
 800eb7c:	2089c83a 	sub	r4,r4,r2
 800eb80:	2912983a 	sll	r9,r5,r4
 800eb84:	3090d83a 	srl	r8,r6,r2
 800eb88:	3108983a 	sll	r4,r6,r4
 800eb8c:	2884d83a 	srl	r2,r5,r2
 800eb90:	4a12b03a 	or	r9,r9,r8
 800eb94:	2008c03a 	cmpne	r4,r4,zero
 800eb98:	4912b03a 	or	r9,r9,r4
 800eb9c:	003f4e06 	br	800e8d8 <__alt_data_end+0xfc00e8d8>
 800eba0:	1c48b03a 	or	r4,r3,r17
 800eba4:	20003c26 	beq	r4,zero,800ec98 <__subdf3+0x62c>
 800eba8:	0084303a 	nor	r2,zero,r2
 800ebac:	1000381e 	bne	r2,zero,800ec90 <__subdf3+0x624>
 800ebb0:	3463c83a 	sub	r17,r6,r17
 800ebb4:	28c5c83a 	sub	r2,r5,r3
 800ebb8:	344d803a 	cmpltu	r6,r6,r17
 800ebbc:	1187c83a 	sub	r3,r2,r6
 800ebc0:	4821883a 	mov	r16,r9
 800ebc4:	3825883a 	mov	r18,r7
 800ebc8:	003f0606 	br	800e7e4 <__alt_data_end+0xfc00e7e4>
 800ebcc:	2023883a 	mov	r17,r4
 800ebd0:	003f0906 	br	800e7f8 <__alt_data_end+0xfc00e7f8>
 800ebd4:	0101ffc4 	movi	r4,2047
 800ebd8:	813f3a1e 	bne	r16,r4,800e8c4 <__alt_data_end+0xfc00e8c4>
 800ebdc:	003ec406 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ebe0:	0005883a 	mov	r2,zero
 800ebe4:	003fb106 	br	800eaac <__alt_data_end+0xfc00eaac>
 800ebe8:	0005883a 	mov	r2,zero
 800ebec:	003fbc06 	br	800eae0 <__alt_data_end+0xfc00eae0>
 800ebf0:	1c44b03a 	or	r2,r3,r17
 800ebf4:	80008e1e 	bne	r16,zero,800ee30 <__subdf3+0x7c4>
 800ebf8:	1000c826 	beq	r2,zero,800ef1c <__subdf3+0x8b0>
 800ebfc:	2984b03a 	or	r2,r5,r6
 800ec00:	103ebb26 	beq	r2,zero,800e6f0 <__alt_data_end+0xfc00e6f0>
 800ec04:	8989883a 	add	r4,r17,r6
 800ec08:	1945883a 	add	r2,r3,r5
 800ec0c:	2447803a 	cmpltu	r3,r4,r17
 800ec10:	1887883a 	add	r3,r3,r2
 800ec14:	1880202c 	andhi	r2,r3,128
 800ec18:	2023883a 	mov	r17,r4
 800ec1c:	103f1626 	beq	r2,zero,800e878 <__alt_data_end+0xfc00e878>
 800ec20:	00bfe034 	movhi	r2,65408
 800ec24:	10bfffc4 	addi	r2,r2,-1
 800ec28:	5021883a 	mov	r16,r10
 800ec2c:	1886703a 	and	r3,r3,r2
 800ec30:	003eaf06 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ec34:	3825883a 	mov	r18,r7
 800ec38:	003f0f06 	br	800e878 <__alt_data_end+0xfc00e878>
 800ec3c:	1c44b03a 	or	r2,r3,r17
 800ec40:	8000251e 	bne	r16,zero,800ecd8 <__subdf3+0x66c>
 800ec44:	1000661e 	bne	r2,zero,800ede0 <__subdf3+0x774>
 800ec48:	2990b03a 	or	r8,r5,r6
 800ec4c:	40009626 	beq	r8,zero,800eea8 <__subdf3+0x83c>
 800ec50:	2807883a 	mov	r3,r5
 800ec54:	3023883a 	mov	r17,r6
 800ec58:	3825883a 	mov	r18,r7
 800ec5c:	003ea406 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ec60:	127ff804 	addi	r9,r2,-32
 800ec64:	01000804 	movi	r4,32
 800ec68:	2a52d83a 	srl	r9,r5,r9
 800ec6c:	11008c26 	beq	r2,r4,800eea0 <__subdf3+0x834>
 800ec70:	01001004 	movi	r4,64
 800ec74:	2085c83a 	sub	r2,r4,r2
 800ec78:	2884983a 	sll	r2,r5,r2
 800ec7c:	118cb03a 	or	r6,r2,r6
 800ec80:	300cc03a 	cmpne	r6,r6,zero
 800ec84:	4992b03a 	or	r9,r9,r6
 800ec88:	0005883a 	mov	r2,zero
 800ec8c:	003f1206 	br	800e8d8 <__alt_data_end+0xfc00e8d8>
 800ec90:	0101ffc4 	movi	r4,2047
 800ec94:	493f9c1e 	bne	r9,r4,800eb08 <__alt_data_end+0xfc00eb08>
 800ec98:	2807883a 	mov	r3,r5
 800ec9c:	3023883a 	mov	r17,r6
 800eca0:	4821883a 	mov	r16,r9
 800eca4:	3825883a 	mov	r18,r7
 800eca8:	003e9106 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ecac:	80001f1e 	bne	r16,zero,800ed2c <__subdf3+0x6c0>
 800ecb0:	1c48b03a 	or	r4,r3,r17
 800ecb4:	20005a26 	beq	r4,zero,800ee20 <__subdf3+0x7b4>
 800ecb8:	0084303a 	nor	r2,zero,r2
 800ecbc:	1000561e 	bne	r2,zero,800ee18 <__subdf3+0x7ac>
 800ecc0:	89a3883a 	add	r17,r17,r6
 800ecc4:	1945883a 	add	r2,r3,r5
 800ecc8:	898d803a 	cmpltu	r6,r17,r6
 800eccc:	3087883a 	add	r3,r6,r2
 800ecd0:	4821883a 	mov	r16,r9
 800ecd4:	003f0506 	br	800e8ec <__alt_data_end+0xfc00e8ec>
 800ecd8:	10002b1e 	bne	r2,zero,800ed88 <__subdf3+0x71c>
 800ecdc:	2984b03a 	or	r2,r5,r6
 800ece0:	10008026 	beq	r2,zero,800eee4 <__subdf3+0x878>
 800ece4:	2807883a 	mov	r3,r5
 800ece8:	3023883a 	mov	r17,r6
 800ecec:	3825883a 	mov	r18,r7
 800ecf0:	0401ffc4 	movi	r16,2047
 800ecf4:	003e7e06 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ecf8:	3809883a 	mov	r4,r7
 800ecfc:	0011883a 	mov	r8,zero
 800ed00:	0005883a 	mov	r2,zero
 800ed04:	003ee306 	br	800e894 <__alt_data_end+0xfc00e894>
 800ed08:	1c62b03a 	or	r17,r3,r17
 800ed0c:	8822c03a 	cmpne	r17,r17,zero
 800ed10:	0005883a 	mov	r2,zero
 800ed14:	003f8906 	br	800eb3c <__alt_data_end+0xfc00eb3c>
 800ed18:	3809883a 	mov	r4,r7
 800ed1c:	4821883a 	mov	r16,r9
 800ed20:	0011883a 	mov	r8,zero
 800ed24:	0005883a 	mov	r2,zero
 800ed28:	003eda06 	br	800e894 <__alt_data_end+0xfc00e894>
 800ed2c:	0101ffc4 	movi	r4,2047
 800ed30:	49003b26 	beq	r9,r4,800ee20 <__subdf3+0x7b4>
 800ed34:	0085c83a 	sub	r2,zero,r2
 800ed38:	18c02034 	orhi	r3,r3,128
 800ed3c:	01000e04 	movi	r4,56
 800ed40:	20806e16 	blt	r4,r2,800eefc <__subdf3+0x890>
 800ed44:	010007c4 	movi	r4,31
 800ed48:	20807716 	blt	r4,r2,800ef28 <__subdf3+0x8bc>
 800ed4c:	01000804 	movi	r4,32
 800ed50:	2089c83a 	sub	r4,r4,r2
 800ed54:	1914983a 	sll	r10,r3,r4
 800ed58:	8890d83a 	srl	r8,r17,r2
 800ed5c:	8908983a 	sll	r4,r17,r4
 800ed60:	1884d83a 	srl	r2,r3,r2
 800ed64:	5222b03a 	or	r17,r10,r8
 800ed68:	2006c03a 	cmpne	r3,r4,zero
 800ed6c:	88e2b03a 	or	r17,r17,r3
 800ed70:	89a3883a 	add	r17,r17,r6
 800ed74:	1145883a 	add	r2,r2,r5
 800ed78:	898d803a 	cmpltu	r6,r17,r6
 800ed7c:	3087883a 	add	r3,r6,r2
 800ed80:	4821883a 	mov	r16,r9
 800ed84:	003ed906 	br	800e8ec <__alt_data_end+0xfc00e8ec>
 800ed88:	2984b03a 	or	r2,r5,r6
 800ed8c:	10004226 	beq	r2,zero,800ee98 <__subdf3+0x82c>
 800ed90:	1808d0fa 	srli	r4,r3,3
 800ed94:	8822d0fa 	srli	r17,r17,3
 800ed98:	1806977a 	slli	r3,r3,29
 800ed9c:	2080022c 	andhi	r2,r4,8
 800eda0:	1c62b03a 	or	r17,r3,r17
 800eda4:	10000826 	beq	r2,zero,800edc8 <__subdf3+0x75c>
 800eda8:	2812d0fa 	srli	r9,r5,3
 800edac:	4880022c 	andhi	r2,r9,8
 800edb0:	1000051e 	bne	r2,zero,800edc8 <__subdf3+0x75c>
 800edb4:	300cd0fa 	srli	r6,r6,3
 800edb8:	2804977a 	slli	r2,r5,29
 800edbc:	4809883a 	mov	r4,r9
 800edc0:	3825883a 	mov	r18,r7
 800edc4:	11a2b03a 	or	r17,r2,r6
 800edc8:	8806d77a 	srli	r3,r17,29
 800edcc:	200890fa 	slli	r4,r4,3
 800edd0:	882290fa 	slli	r17,r17,3
 800edd4:	0401ffc4 	movi	r16,2047
 800edd8:	1906b03a 	or	r3,r3,r4
 800eddc:	003e4406 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ede0:	2984b03a 	or	r2,r5,r6
 800ede4:	103e4226 	beq	r2,zero,800e6f0 <__alt_data_end+0xfc00e6f0>
 800ede8:	8989c83a 	sub	r4,r17,r6
 800edec:	8911803a 	cmpltu	r8,r17,r4
 800edf0:	1945c83a 	sub	r2,r3,r5
 800edf4:	1205c83a 	sub	r2,r2,r8
 800edf8:	1200202c 	andhi	r8,r2,128
 800edfc:	403e9a26 	beq	r8,zero,800e868 <__alt_data_end+0xfc00e868>
 800ee00:	3463c83a 	sub	r17,r6,r17
 800ee04:	28c5c83a 	sub	r2,r5,r3
 800ee08:	344d803a 	cmpltu	r6,r6,r17
 800ee0c:	1187c83a 	sub	r3,r2,r6
 800ee10:	3825883a 	mov	r18,r7
 800ee14:	003e3606 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ee18:	0101ffc4 	movi	r4,2047
 800ee1c:	493fc71e 	bne	r9,r4,800ed3c <__alt_data_end+0xfc00ed3c>
 800ee20:	2807883a 	mov	r3,r5
 800ee24:	3023883a 	mov	r17,r6
 800ee28:	4821883a 	mov	r16,r9
 800ee2c:	003e3006 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ee30:	10003626 	beq	r2,zero,800ef0c <__subdf3+0x8a0>
 800ee34:	2984b03a 	or	r2,r5,r6
 800ee38:	10001726 	beq	r2,zero,800ee98 <__subdf3+0x82c>
 800ee3c:	1808d0fa 	srli	r4,r3,3
 800ee40:	8822d0fa 	srli	r17,r17,3
 800ee44:	1806977a 	slli	r3,r3,29
 800ee48:	2080022c 	andhi	r2,r4,8
 800ee4c:	1c62b03a 	or	r17,r3,r17
 800ee50:	10000726 	beq	r2,zero,800ee70 <__subdf3+0x804>
 800ee54:	2812d0fa 	srli	r9,r5,3
 800ee58:	4880022c 	andhi	r2,r9,8
 800ee5c:	1000041e 	bne	r2,zero,800ee70 <__subdf3+0x804>
 800ee60:	300cd0fa 	srli	r6,r6,3
 800ee64:	2804977a 	slli	r2,r5,29
 800ee68:	4809883a 	mov	r4,r9
 800ee6c:	11a2b03a 	or	r17,r2,r6
 800ee70:	8806d77a 	srli	r3,r17,29
 800ee74:	200890fa 	slli	r4,r4,3
 800ee78:	882290fa 	slli	r17,r17,3
 800ee7c:	3825883a 	mov	r18,r7
 800ee80:	1906b03a 	or	r3,r3,r4
 800ee84:	0401ffc4 	movi	r16,2047
 800ee88:	003e1906 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ee8c:	000b883a 	mov	r5,zero
 800ee90:	0005883a 	mov	r2,zero
 800ee94:	003e2e06 	br	800e750 <__alt_data_end+0xfc00e750>
 800ee98:	0401ffc4 	movi	r16,2047
 800ee9c:	003e1406 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800eea0:	0005883a 	mov	r2,zero
 800eea4:	003f7506 	br	800ec7c <__alt_data_end+0xfc00ec7c>
 800eea8:	0005883a 	mov	r2,zero
 800eeac:	0009883a 	mov	r4,zero
 800eeb0:	003e7806 	br	800e894 <__alt_data_end+0xfc00e894>
 800eeb4:	123ff804 	addi	r8,r2,-32
 800eeb8:	01000804 	movi	r4,32
 800eebc:	1a10d83a 	srl	r8,r3,r8
 800eec0:	11002526 	beq	r2,r4,800ef58 <__subdf3+0x8ec>
 800eec4:	01001004 	movi	r4,64
 800eec8:	2085c83a 	sub	r2,r4,r2
 800eecc:	1884983a 	sll	r2,r3,r2
 800eed0:	1444b03a 	or	r2,r2,r17
 800eed4:	1004c03a 	cmpne	r2,r2,zero
 800eed8:	40a2b03a 	or	r17,r8,r2
 800eedc:	0005883a 	mov	r2,zero
 800eee0:	003f1606 	br	800eb3c <__alt_data_end+0xfc00eb3c>
 800eee4:	02000434 	movhi	r8,16
 800eee8:	0009883a 	mov	r4,zero
 800eeec:	423fffc4 	addi	r8,r8,-1
 800eef0:	00bfffc4 	movi	r2,-1
 800eef4:	0401ffc4 	movi	r16,2047
 800eef8:	003e6606 	br	800e894 <__alt_data_end+0xfc00e894>
 800eefc:	1c62b03a 	or	r17,r3,r17
 800ef00:	8822c03a 	cmpne	r17,r17,zero
 800ef04:	0005883a 	mov	r2,zero
 800ef08:	003f9906 	br	800ed70 <__alt_data_end+0xfc00ed70>
 800ef0c:	2807883a 	mov	r3,r5
 800ef10:	3023883a 	mov	r17,r6
 800ef14:	0401ffc4 	movi	r16,2047
 800ef18:	003df506 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ef1c:	2807883a 	mov	r3,r5
 800ef20:	3023883a 	mov	r17,r6
 800ef24:	003df206 	br	800e6f0 <__alt_data_end+0xfc00e6f0>
 800ef28:	123ff804 	addi	r8,r2,-32
 800ef2c:	01000804 	movi	r4,32
 800ef30:	1a10d83a 	srl	r8,r3,r8
 800ef34:	11000a26 	beq	r2,r4,800ef60 <__subdf3+0x8f4>
 800ef38:	01001004 	movi	r4,64
 800ef3c:	2085c83a 	sub	r2,r4,r2
 800ef40:	1884983a 	sll	r2,r3,r2
 800ef44:	1444b03a 	or	r2,r2,r17
 800ef48:	1004c03a 	cmpne	r2,r2,zero
 800ef4c:	40a2b03a 	or	r17,r8,r2
 800ef50:	0005883a 	mov	r2,zero
 800ef54:	003f8606 	br	800ed70 <__alt_data_end+0xfc00ed70>
 800ef58:	0005883a 	mov	r2,zero
 800ef5c:	003fdc06 	br	800eed0 <__alt_data_end+0xfc00eed0>
 800ef60:	0005883a 	mov	r2,zero
 800ef64:	003ff706 	br	800ef44 <__alt_data_end+0xfc00ef44>

0800ef68 <__fixdfsi>:
 800ef68:	280cd53a 	srli	r6,r5,20
 800ef6c:	00c00434 	movhi	r3,16
 800ef70:	18ffffc4 	addi	r3,r3,-1
 800ef74:	3181ffcc 	andi	r6,r6,2047
 800ef78:	01c0ff84 	movi	r7,1022
 800ef7c:	28c6703a 	and	r3,r5,r3
 800ef80:	280ad7fa 	srli	r5,r5,31
 800ef84:	3980120e 	bge	r7,r6,800efd0 <__fixdfsi+0x68>
 800ef88:	00810744 	movi	r2,1053
 800ef8c:	11800c16 	blt	r2,r6,800efc0 <__fixdfsi+0x58>
 800ef90:	00810cc4 	movi	r2,1075
 800ef94:	1185c83a 	sub	r2,r2,r6
 800ef98:	01c007c4 	movi	r7,31
 800ef9c:	18c00434 	orhi	r3,r3,16
 800efa0:	38800d16 	blt	r7,r2,800efd8 <__fixdfsi+0x70>
 800efa4:	31befb44 	addi	r6,r6,-1043
 800efa8:	2084d83a 	srl	r2,r4,r2
 800efac:	1986983a 	sll	r3,r3,r6
 800efb0:	1884b03a 	or	r2,r3,r2
 800efb4:	28000726 	beq	r5,zero,800efd4 <__fixdfsi+0x6c>
 800efb8:	0085c83a 	sub	r2,zero,r2
 800efbc:	f800283a 	ret
 800efc0:	00a00034 	movhi	r2,32768
 800efc4:	10bfffc4 	addi	r2,r2,-1
 800efc8:	2885883a 	add	r2,r5,r2
 800efcc:	f800283a 	ret
 800efd0:	0005883a 	mov	r2,zero
 800efd4:	f800283a 	ret
 800efd8:	008104c4 	movi	r2,1043
 800efdc:	1185c83a 	sub	r2,r2,r6
 800efe0:	1884d83a 	srl	r2,r3,r2
 800efe4:	003ff306 	br	800efb4 <__alt_data_end+0xfc00efb4>

0800efe8 <__floatsidf>:
 800efe8:	defffd04 	addi	sp,sp,-12
 800efec:	dfc00215 	stw	ra,8(sp)
 800eff0:	dc400115 	stw	r17,4(sp)
 800eff4:	dc000015 	stw	r16,0(sp)
 800eff8:	20002b26 	beq	r4,zero,800f0a8 <__floatsidf+0xc0>
 800effc:	2023883a 	mov	r17,r4
 800f000:	2020d7fa 	srli	r16,r4,31
 800f004:	20002d16 	blt	r4,zero,800f0bc <__floatsidf+0xd4>
 800f008:	8809883a 	mov	r4,r17
 800f00c:	800f16c0 	call	800f16c <__clzsi2>
 800f010:	01410784 	movi	r5,1054
 800f014:	288bc83a 	sub	r5,r5,r2
 800f018:	01010cc4 	movi	r4,1075
 800f01c:	2149c83a 	sub	r4,r4,r5
 800f020:	00c007c4 	movi	r3,31
 800f024:	1900160e 	bge	r3,r4,800f080 <__floatsidf+0x98>
 800f028:	00c104c4 	movi	r3,1043
 800f02c:	1947c83a 	sub	r3,r3,r5
 800f030:	88c6983a 	sll	r3,r17,r3
 800f034:	00800434 	movhi	r2,16
 800f038:	10bfffc4 	addi	r2,r2,-1
 800f03c:	1886703a 	and	r3,r3,r2
 800f040:	2941ffcc 	andi	r5,r5,2047
 800f044:	800d883a 	mov	r6,r16
 800f048:	0005883a 	mov	r2,zero
 800f04c:	280a953a 	slli	r5,r5,20
 800f050:	31803fcc 	andi	r6,r6,255
 800f054:	01000434 	movhi	r4,16
 800f058:	300c97fa 	slli	r6,r6,31
 800f05c:	213fffc4 	addi	r4,r4,-1
 800f060:	1906703a 	and	r3,r3,r4
 800f064:	1946b03a 	or	r3,r3,r5
 800f068:	1986b03a 	or	r3,r3,r6
 800f06c:	dfc00217 	ldw	ra,8(sp)
 800f070:	dc400117 	ldw	r17,4(sp)
 800f074:	dc000017 	ldw	r16,0(sp)
 800f078:	dec00304 	addi	sp,sp,12
 800f07c:	f800283a 	ret
 800f080:	00c002c4 	movi	r3,11
 800f084:	1887c83a 	sub	r3,r3,r2
 800f088:	88c6d83a 	srl	r3,r17,r3
 800f08c:	8904983a 	sll	r2,r17,r4
 800f090:	01000434 	movhi	r4,16
 800f094:	213fffc4 	addi	r4,r4,-1
 800f098:	2941ffcc 	andi	r5,r5,2047
 800f09c:	1906703a 	and	r3,r3,r4
 800f0a0:	800d883a 	mov	r6,r16
 800f0a4:	003fe906 	br	800f04c <__alt_data_end+0xfc00f04c>
 800f0a8:	000d883a 	mov	r6,zero
 800f0ac:	000b883a 	mov	r5,zero
 800f0b0:	0007883a 	mov	r3,zero
 800f0b4:	0005883a 	mov	r2,zero
 800f0b8:	003fe406 	br	800f04c <__alt_data_end+0xfc00f04c>
 800f0bc:	0123c83a 	sub	r17,zero,r4
 800f0c0:	003fd106 	br	800f008 <__alt_data_end+0xfc00f008>

0800f0c4 <__floatunsidf>:
 800f0c4:	defffe04 	addi	sp,sp,-8
 800f0c8:	dc000015 	stw	r16,0(sp)
 800f0cc:	dfc00115 	stw	ra,4(sp)
 800f0d0:	2021883a 	mov	r16,r4
 800f0d4:	20002226 	beq	r4,zero,800f160 <__floatunsidf+0x9c>
 800f0d8:	800f16c0 	call	800f16c <__clzsi2>
 800f0dc:	01010784 	movi	r4,1054
 800f0e0:	2089c83a 	sub	r4,r4,r2
 800f0e4:	01810cc4 	movi	r6,1075
 800f0e8:	310dc83a 	sub	r6,r6,r4
 800f0ec:	00c007c4 	movi	r3,31
 800f0f0:	1980120e 	bge	r3,r6,800f13c <__floatunsidf+0x78>
 800f0f4:	00c104c4 	movi	r3,1043
 800f0f8:	1907c83a 	sub	r3,r3,r4
 800f0fc:	80ca983a 	sll	r5,r16,r3
 800f100:	00800434 	movhi	r2,16
 800f104:	10bfffc4 	addi	r2,r2,-1
 800f108:	2101ffcc 	andi	r4,r4,2047
 800f10c:	0021883a 	mov	r16,zero
 800f110:	288a703a 	and	r5,r5,r2
 800f114:	2008953a 	slli	r4,r4,20
 800f118:	00c00434 	movhi	r3,16
 800f11c:	18ffffc4 	addi	r3,r3,-1
 800f120:	28c6703a 	and	r3,r5,r3
 800f124:	8005883a 	mov	r2,r16
 800f128:	1906b03a 	or	r3,r3,r4
 800f12c:	dfc00117 	ldw	ra,4(sp)
 800f130:	dc000017 	ldw	r16,0(sp)
 800f134:	dec00204 	addi	sp,sp,8
 800f138:	f800283a 	ret
 800f13c:	00c002c4 	movi	r3,11
 800f140:	188bc83a 	sub	r5,r3,r2
 800f144:	814ad83a 	srl	r5,r16,r5
 800f148:	00c00434 	movhi	r3,16
 800f14c:	18ffffc4 	addi	r3,r3,-1
 800f150:	81a0983a 	sll	r16,r16,r6
 800f154:	2101ffcc 	andi	r4,r4,2047
 800f158:	28ca703a 	and	r5,r5,r3
 800f15c:	003fed06 	br	800f114 <__alt_data_end+0xfc00f114>
 800f160:	0009883a 	mov	r4,zero
 800f164:	000b883a 	mov	r5,zero
 800f168:	003fea06 	br	800f114 <__alt_data_end+0xfc00f114>

0800f16c <__clzsi2>:
 800f16c:	00bfffd4 	movui	r2,65535
 800f170:	11000536 	bltu	r2,r4,800f188 <__clzsi2+0x1c>
 800f174:	00803fc4 	movi	r2,255
 800f178:	11000f36 	bltu	r2,r4,800f1b8 <__clzsi2+0x4c>
 800f17c:	00800804 	movi	r2,32
 800f180:	0007883a 	mov	r3,zero
 800f184:	00000506 	br	800f19c <__clzsi2+0x30>
 800f188:	00804034 	movhi	r2,256
 800f18c:	10bfffc4 	addi	r2,r2,-1
 800f190:	11000c2e 	bgeu	r2,r4,800f1c4 <__clzsi2+0x58>
 800f194:	00800204 	movi	r2,8
 800f198:	00c00604 	movi	r3,24
 800f19c:	20c8d83a 	srl	r4,r4,r3
 800f1a0:	00c20074 	movhi	r3,2049
 800f1a4:	18c8cd04 	addi	r3,r3,9012
 800f1a8:	1909883a 	add	r4,r3,r4
 800f1ac:	20c00003 	ldbu	r3,0(r4)
 800f1b0:	10c5c83a 	sub	r2,r2,r3
 800f1b4:	f800283a 	ret
 800f1b8:	00800604 	movi	r2,24
 800f1bc:	00c00204 	movi	r3,8
 800f1c0:	003ff606 	br	800f19c <__alt_data_end+0xfc00f19c>
 800f1c4:	00800404 	movi	r2,16
 800f1c8:	1007883a 	mov	r3,r2
 800f1cc:	003ff306 	br	800f19c <__alt_data_end+0xfc00f19c>

0800f1d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f1d0:	defffe04 	addi	sp,sp,-8
 800f1d4:	dfc00115 	stw	ra,4(sp)
 800f1d8:	df000015 	stw	fp,0(sp)
 800f1dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f1e0:	d0a00b17 	ldw	r2,-32724(gp)
 800f1e4:	10000326 	beq	r2,zero,800f1f4 <alt_get_errno+0x24>
 800f1e8:	d0a00b17 	ldw	r2,-32724(gp)
 800f1ec:	103ee83a 	callr	r2
 800f1f0:	00000106 	br	800f1f8 <alt_get_errno+0x28>
 800f1f4:	d0a6d204 	addi	r2,gp,-25784
}
 800f1f8:	e037883a 	mov	sp,fp
 800f1fc:	dfc00117 	ldw	ra,4(sp)
 800f200:	df000017 	ldw	fp,0(sp)
 800f204:	dec00204 	addi	sp,sp,8
 800f208:	f800283a 	ret

0800f20c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f20c:	defffb04 	addi	sp,sp,-20
 800f210:	dfc00415 	stw	ra,16(sp)
 800f214:	df000315 	stw	fp,12(sp)
 800f218:	df000304 	addi	fp,sp,12
 800f21c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f220:	e0bfff17 	ldw	r2,-4(fp)
 800f224:	10000816 	blt	r2,zero,800f248 <close+0x3c>
 800f228:	01400304 	movi	r5,12
 800f22c:	e13fff17 	ldw	r4,-4(fp)
 800f230:	800c9040 	call	800c904 <__mulsi3>
 800f234:	1007883a 	mov	r3,r2
 800f238:	00820074 	movhi	r2,2049
 800f23c:	108b4d04 	addi	r2,r2,11572
 800f240:	1885883a 	add	r2,r3,r2
 800f244:	00000106 	br	800f24c <close+0x40>
 800f248:	0005883a 	mov	r2,zero
 800f24c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800f250:	e0bffd17 	ldw	r2,-12(fp)
 800f254:	10001926 	beq	r2,zero,800f2bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f258:	e0bffd17 	ldw	r2,-12(fp)
 800f25c:	10800017 	ldw	r2,0(r2)
 800f260:	10800417 	ldw	r2,16(r2)
 800f264:	10000626 	beq	r2,zero,800f280 <close+0x74>
 800f268:	e0bffd17 	ldw	r2,-12(fp)
 800f26c:	10800017 	ldw	r2,0(r2)
 800f270:	10800417 	ldw	r2,16(r2)
 800f274:	e13ffd17 	ldw	r4,-12(fp)
 800f278:	103ee83a 	callr	r2
 800f27c:	00000106 	br	800f284 <close+0x78>
 800f280:	0005883a 	mov	r2,zero
 800f284:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f288:	e13fff17 	ldw	r4,-4(fp)
 800f28c:	800f8f40 	call	800f8f4 <alt_release_fd>
    if (rval < 0)
 800f290:	e0bffe17 	ldw	r2,-8(fp)
 800f294:	1000070e 	bge	r2,zero,800f2b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800f298:	800f1d00 	call	800f1d0 <alt_get_errno>
 800f29c:	1007883a 	mov	r3,r2
 800f2a0:	e0bffe17 	ldw	r2,-8(fp)
 800f2a4:	0085c83a 	sub	r2,zero,r2
 800f2a8:	18800015 	stw	r2,0(r3)
      return -1;
 800f2ac:	00bfffc4 	movi	r2,-1
 800f2b0:	00000706 	br	800f2d0 <close+0xc4>
    }
    return 0;
 800f2b4:	0005883a 	mov	r2,zero
 800f2b8:	00000506 	br	800f2d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f2bc:	800f1d00 	call	800f1d0 <alt_get_errno>
 800f2c0:	1007883a 	mov	r3,r2
 800f2c4:	00801444 	movi	r2,81
 800f2c8:	18800015 	stw	r2,0(r3)
    return -1;
 800f2cc:	00bfffc4 	movi	r2,-1
  }
}
 800f2d0:	e037883a 	mov	sp,fp
 800f2d4:	dfc00117 	ldw	ra,4(sp)
 800f2d8:	df000017 	ldw	fp,0(sp)
 800f2dc:	dec00204 	addi	sp,sp,8
 800f2e0:	f800283a 	ret

0800f2e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f2e4:	defffc04 	addi	sp,sp,-16
 800f2e8:	df000315 	stw	fp,12(sp)
 800f2ec:	df000304 	addi	fp,sp,12
 800f2f0:	e13ffd15 	stw	r4,-12(fp)
 800f2f4:	e17ffe15 	stw	r5,-8(fp)
 800f2f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800f2fc:	e0bfff17 	ldw	r2,-4(fp)
}
 800f300:	e037883a 	mov	sp,fp
 800f304:	df000017 	ldw	fp,0(sp)
 800f308:	dec00104 	addi	sp,sp,4
 800f30c:	f800283a 	ret

0800f310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f310:	defffe04 	addi	sp,sp,-8
 800f314:	dfc00115 	stw	ra,4(sp)
 800f318:	df000015 	stw	fp,0(sp)
 800f31c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f320:	d0a00b17 	ldw	r2,-32724(gp)
 800f324:	10000326 	beq	r2,zero,800f334 <alt_get_errno+0x24>
 800f328:	d0a00b17 	ldw	r2,-32724(gp)
 800f32c:	103ee83a 	callr	r2
 800f330:	00000106 	br	800f338 <alt_get_errno+0x28>
 800f334:	d0a6d204 	addi	r2,gp,-25784
}
 800f338:	e037883a 	mov	sp,fp
 800f33c:	dfc00117 	ldw	ra,4(sp)
 800f340:	df000017 	ldw	fp,0(sp)
 800f344:	dec00204 	addi	sp,sp,8
 800f348:	f800283a 	ret

0800f34c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800f34c:	defffb04 	addi	sp,sp,-20
 800f350:	dfc00415 	stw	ra,16(sp)
 800f354:	df000315 	stw	fp,12(sp)
 800f358:	df000304 	addi	fp,sp,12
 800f35c:	e13ffe15 	stw	r4,-8(fp)
 800f360:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f364:	e0bffe17 	ldw	r2,-8(fp)
 800f368:	10000816 	blt	r2,zero,800f38c <fstat+0x40>
 800f36c:	01400304 	movi	r5,12
 800f370:	e13ffe17 	ldw	r4,-8(fp)
 800f374:	800c9040 	call	800c904 <__mulsi3>
 800f378:	1007883a 	mov	r3,r2
 800f37c:	00820074 	movhi	r2,2049
 800f380:	108b4d04 	addi	r2,r2,11572
 800f384:	1885883a 	add	r2,r3,r2
 800f388:	00000106 	br	800f390 <fstat+0x44>
 800f38c:	0005883a 	mov	r2,zero
 800f390:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800f394:	e0bffd17 	ldw	r2,-12(fp)
 800f398:	10001026 	beq	r2,zero,800f3dc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800f39c:	e0bffd17 	ldw	r2,-12(fp)
 800f3a0:	10800017 	ldw	r2,0(r2)
 800f3a4:	10800817 	ldw	r2,32(r2)
 800f3a8:	10000726 	beq	r2,zero,800f3c8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800f3ac:	e0bffd17 	ldw	r2,-12(fp)
 800f3b0:	10800017 	ldw	r2,0(r2)
 800f3b4:	10800817 	ldw	r2,32(r2)
 800f3b8:	e17fff17 	ldw	r5,-4(fp)
 800f3bc:	e13ffd17 	ldw	r4,-12(fp)
 800f3c0:	103ee83a 	callr	r2
 800f3c4:	00000a06 	br	800f3f0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800f3c8:	e0bfff17 	ldw	r2,-4(fp)
 800f3cc:	00c80004 	movi	r3,8192
 800f3d0:	10c00115 	stw	r3,4(r2)
      return 0;
 800f3d4:	0005883a 	mov	r2,zero
 800f3d8:	00000506 	br	800f3f0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f3dc:	800f3100 	call	800f310 <alt_get_errno>
 800f3e0:	1007883a 	mov	r3,r2
 800f3e4:	00801444 	movi	r2,81
 800f3e8:	18800015 	stw	r2,0(r3)
    return -1;
 800f3ec:	00bfffc4 	movi	r2,-1
  }
}
 800f3f0:	e037883a 	mov	sp,fp
 800f3f4:	dfc00117 	ldw	ra,4(sp)
 800f3f8:	df000017 	ldw	fp,0(sp)
 800f3fc:	dec00204 	addi	sp,sp,8
 800f400:	f800283a 	ret

0800f404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f404:	defffe04 	addi	sp,sp,-8
 800f408:	dfc00115 	stw	ra,4(sp)
 800f40c:	df000015 	stw	fp,0(sp)
 800f410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f414:	d0a00b17 	ldw	r2,-32724(gp)
 800f418:	10000326 	beq	r2,zero,800f428 <alt_get_errno+0x24>
 800f41c:	d0a00b17 	ldw	r2,-32724(gp)
 800f420:	103ee83a 	callr	r2
 800f424:	00000106 	br	800f42c <alt_get_errno+0x28>
 800f428:	d0a6d204 	addi	r2,gp,-25784
}
 800f42c:	e037883a 	mov	sp,fp
 800f430:	dfc00117 	ldw	ra,4(sp)
 800f434:	df000017 	ldw	fp,0(sp)
 800f438:	dec00204 	addi	sp,sp,8
 800f43c:	f800283a 	ret

0800f440 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800f440:	deffed04 	addi	sp,sp,-76
 800f444:	dfc01215 	stw	ra,72(sp)
 800f448:	df001115 	stw	fp,68(sp)
 800f44c:	df001104 	addi	fp,sp,68
 800f450:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f454:	e0bfff17 	ldw	r2,-4(fp)
 800f458:	10000816 	blt	r2,zero,800f47c <isatty+0x3c>
 800f45c:	01400304 	movi	r5,12
 800f460:	e13fff17 	ldw	r4,-4(fp)
 800f464:	800c9040 	call	800c904 <__mulsi3>
 800f468:	1007883a 	mov	r3,r2
 800f46c:	00820074 	movhi	r2,2049
 800f470:	108b4d04 	addi	r2,r2,11572
 800f474:	1885883a 	add	r2,r3,r2
 800f478:	00000106 	br	800f480 <isatty+0x40>
 800f47c:	0005883a 	mov	r2,zero
 800f480:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800f484:	e0bfef17 	ldw	r2,-68(fp)
 800f488:	10000e26 	beq	r2,zero,800f4c4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800f48c:	e0bfef17 	ldw	r2,-68(fp)
 800f490:	10800017 	ldw	r2,0(r2)
 800f494:	10800817 	ldw	r2,32(r2)
 800f498:	1000021e 	bne	r2,zero,800f4a4 <isatty+0x64>
    {
      return 1;
 800f49c:	00800044 	movi	r2,1
 800f4a0:	00000d06 	br	800f4d8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800f4a4:	e0bff004 	addi	r2,fp,-64
 800f4a8:	100b883a 	mov	r5,r2
 800f4ac:	e13fff17 	ldw	r4,-4(fp)
 800f4b0:	800f34c0 	call	800f34c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800f4b4:	e0bff117 	ldw	r2,-60(fp)
 800f4b8:	10880020 	cmpeqi	r2,r2,8192
 800f4bc:	10803fcc 	andi	r2,r2,255
 800f4c0:	00000506 	br	800f4d8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f4c4:	800f4040 	call	800f404 <alt_get_errno>
 800f4c8:	1007883a 	mov	r3,r2
 800f4cc:	00801444 	movi	r2,81
 800f4d0:	18800015 	stw	r2,0(r3)
    return 0;
 800f4d4:	0005883a 	mov	r2,zero
  }
}
 800f4d8:	e037883a 	mov	sp,fp
 800f4dc:	dfc00117 	ldw	ra,4(sp)
 800f4e0:	df000017 	ldw	fp,0(sp)
 800f4e4:	dec00204 	addi	sp,sp,8
 800f4e8:	f800283a 	ret

0800f4ec <alt_load_section>:
 800f4ec:	defffc04 	addi	sp,sp,-16
 800f4f0:	df000315 	stw	fp,12(sp)
 800f4f4:	df000304 	addi	fp,sp,12
 800f4f8:	e13ffd15 	stw	r4,-12(fp)
 800f4fc:	e17ffe15 	stw	r5,-8(fp)
 800f500:	e1bfff15 	stw	r6,-4(fp)
 800f504:	e0fffe17 	ldw	r3,-8(fp)
 800f508:	e0bffd17 	ldw	r2,-12(fp)
 800f50c:	18800c26 	beq	r3,r2,800f540 <alt_load_section+0x54>
 800f510:	00000806 	br	800f534 <alt_load_section+0x48>
 800f514:	e0bffe17 	ldw	r2,-8(fp)
 800f518:	10c00104 	addi	r3,r2,4
 800f51c:	e0fffe15 	stw	r3,-8(fp)
 800f520:	e0fffd17 	ldw	r3,-12(fp)
 800f524:	19000104 	addi	r4,r3,4
 800f528:	e13ffd15 	stw	r4,-12(fp)
 800f52c:	18c00017 	ldw	r3,0(r3)
 800f530:	10c00015 	stw	r3,0(r2)
 800f534:	e0fffe17 	ldw	r3,-8(fp)
 800f538:	e0bfff17 	ldw	r2,-4(fp)
 800f53c:	18bff51e 	bne	r3,r2,800f514 <__alt_data_end+0xfc00f514>
 800f540:	0001883a 	nop
 800f544:	e037883a 	mov	sp,fp
 800f548:	df000017 	ldw	fp,0(sp)
 800f54c:	dec00104 	addi	sp,sp,4
 800f550:	f800283a 	ret

0800f554 <alt_load>:
 800f554:	defffe04 	addi	sp,sp,-8
 800f558:	dfc00115 	stw	ra,4(sp)
 800f55c:	df000015 	stw	fp,0(sp)
 800f560:	d839883a 	mov	fp,sp
 800f564:	01820074 	movhi	r6,2049
 800f568:	318fd504 	addi	r6,r6,16212
 800f56c:	01420074 	movhi	r5,2049
 800f570:	29491a04 	addi	r5,r5,9320
 800f574:	01020074 	movhi	r4,2049
 800f578:	210fd504 	addi	r4,r4,16212
 800f57c:	800f4ec0 	call	800f4ec <alt_load_section>
 800f580:	01820034 	movhi	r6,2048
 800f584:	31808c04 	addi	r6,r6,560
 800f588:	01420034 	movhi	r5,2048
 800f58c:	29400804 	addi	r5,r5,32
 800f590:	01020034 	movhi	r4,2048
 800f594:	21000804 	addi	r4,r4,32
 800f598:	800f4ec0 	call	800f4ec <alt_load_section>
 800f59c:	01820074 	movhi	r6,2049
 800f5a0:	31891a04 	addi	r6,r6,9320
 800f5a4:	01420074 	movhi	r5,2049
 800f5a8:	29467c04 	addi	r5,r5,6640
 800f5ac:	01020074 	movhi	r4,2049
 800f5b0:	21067c04 	addi	r4,r4,6640
 800f5b4:	800f4ec0 	call	800f4ec <alt_load_section>
 800f5b8:	80109380 	call	8010938 <alt_dcache_flush_all>
 800f5bc:	8010af80 	call	8010af8 <alt_icache_flush_all>
 800f5c0:	0001883a 	nop
 800f5c4:	e037883a 	mov	sp,fp
 800f5c8:	dfc00117 	ldw	ra,4(sp)
 800f5cc:	df000017 	ldw	fp,0(sp)
 800f5d0:	dec00204 	addi	sp,sp,8
 800f5d4:	f800283a 	ret

0800f5d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f5d8:	defffe04 	addi	sp,sp,-8
 800f5dc:	dfc00115 	stw	ra,4(sp)
 800f5e0:	df000015 	stw	fp,0(sp)
 800f5e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f5e8:	d0a00b17 	ldw	r2,-32724(gp)
 800f5ec:	10000326 	beq	r2,zero,800f5fc <alt_get_errno+0x24>
 800f5f0:	d0a00b17 	ldw	r2,-32724(gp)
 800f5f4:	103ee83a 	callr	r2
 800f5f8:	00000106 	br	800f600 <alt_get_errno+0x28>
 800f5fc:	d0a6d204 	addi	r2,gp,-25784
}
 800f600:	e037883a 	mov	sp,fp
 800f604:	dfc00117 	ldw	ra,4(sp)
 800f608:	df000017 	ldw	fp,0(sp)
 800f60c:	dec00204 	addi	sp,sp,8
 800f610:	f800283a 	ret

0800f614 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800f614:	defff904 	addi	sp,sp,-28
 800f618:	dfc00615 	stw	ra,24(sp)
 800f61c:	df000515 	stw	fp,20(sp)
 800f620:	df000504 	addi	fp,sp,20
 800f624:	e13ffd15 	stw	r4,-12(fp)
 800f628:	e17ffe15 	stw	r5,-8(fp)
 800f62c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800f630:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f634:	e0bffd17 	ldw	r2,-12(fp)
 800f638:	10000816 	blt	r2,zero,800f65c <lseek+0x48>
 800f63c:	01400304 	movi	r5,12
 800f640:	e13ffd17 	ldw	r4,-12(fp)
 800f644:	800c9040 	call	800c904 <__mulsi3>
 800f648:	1007883a 	mov	r3,r2
 800f64c:	00820074 	movhi	r2,2049
 800f650:	108b4d04 	addi	r2,r2,11572
 800f654:	1885883a 	add	r2,r3,r2
 800f658:	00000106 	br	800f660 <lseek+0x4c>
 800f65c:	0005883a 	mov	r2,zero
 800f660:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800f664:	e0bffc17 	ldw	r2,-16(fp)
 800f668:	10001026 	beq	r2,zero,800f6ac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f66c:	e0bffc17 	ldw	r2,-16(fp)
 800f670:	10800017 	ldw	r2,0(r2)
 800f674:	10800717 	ldw	r2,28(r2)
 800f678:	10000926 	beq	r2,zero,800f6a0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f67c:	e0bffc17 	ldw	r2,-16(fp)
 800f680:	10800017 	ldw	r2,0(r2)
 800f684:	10800717 	ldw	r2,28(r2)
 800f688:	e1bfff17 	ldw	r6,-4(fp)
 800f68c:	e17ffe17 	ldw	r5,-8(fp)
 800f690:	e13ffc17 	ldw	r4,-16(fp)
 800f694:	103ee83a 	callr	r2
 800f698:	e0bffb15 	stw	r2,-20(fp)
 800f69c:	00000506 	br	800f6b4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f6a0:	00bfde84 	movi	r2,-134
 800f6a4:	e0bffb15 	stw	r2,-20(fp)
 800f6a8:	00000206 	br	800f6b4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f6ac:	00bfebc4 	movi	r2,-81
 800f6b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f6b4:	e0bffb17 	ldw	r2,-20(fp)
 800f6b8:	1000070e 	bge	r2,zero,800f6d8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800f6bc:	800f5d80 	call	800f5d8 <alt_get_errno>
 800f6c0:	1007883a 	mov	r3,r2
 800f6c4:	e0bffb17 	ldw	r2,-20(fp)
 800f6c8:	0085c83a 	sub	r2,zero,r2
 800f6cc:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f6d0:	00bfffc4 	movi	r2,-1
 800f6d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f6d8:	e0bffb17 	ldw	r2,-20(fp)
}
 800f6dc:	e037883a 	mov	sp,fp
 800f6e0:	dfc00117 	ldw	ra,4(sp)
 800f6e4:	df000017 	ldw	fp,0(sp)
 800f6e8:	dec00204 	addi	sp,sp,8
 800f6ec:	f800283a 	ret

0800f6f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f6f0:	defffd04 	addi	sp,sp,-12
 800f6f4:	dfc00215 	stw	ra,8(sp)
 800f6f8:	df000115 	stw	fp,4(sp)
 800f6fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f700:	0009883a 	mov	r4,zero
 800f704:	800fbc80 	call	800fbc8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f708:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f70c:	800fc000 	call	800fc00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f710:	01820074 	movhi	r6,2049
 800f714:	31891004 	addi	r6,r6,9280
 800f718:	01420074 	movhi	r5,2049
 800f71c:	29491004 	addi	r5,r5,9280
 800f720:	01020074 	movhi	r4,2049
 800f724:	21091004 	addi	r4,r4,9280
 800f728:	8010e9c0 	call	8010e9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f72c:	8010a380 	call	8010a38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f730:	01020074 	movhi	r4,2049
 800f734:	2102a604 	addi	r4,r4,2712
 800f738:	801165c0 	call	801165c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f73c:	d0a6d317 	ldw	r2,-25780(gp)
 800f740:	d0e6d417 	ldw	r3,-25776(gp)
 800f744:	d126d517 	ldw	r4,-25772(gp)
 800f748:	200d883a 	mov	r6,r4
 800f74c:	180b883a 	mov	r5,r3
 800f750:	1009883a 	mov	r4,r2
 800f754:	80003d80 	call	80003d8 <main>
 800f758:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f75c:	01000044 	movi	r4,1
 800f760:	800f20c0 	call	800f20c <close>
  exit (result);
 800f764:	e13fff17 	ldw	r4,-4(fp)
 800f768:	80116700 	call	8011670 <exit>

0800f76c <__malloc_lock>:
 800f76c:	defffe04 	addi	sp,sp,-8
 800f770:	df000115 	stw	fp,4(sp)
 800f774:	df000104 	addi	fp,sp,4
 800f778:	e13fff15 	stw	r4,-4(fp)
 800f77c:	0001883a 	nop
 800f780:	e037883a 	mov	sp,fp
 800f784:	df000017 	ldw	fp,0(sp)
 800f788:	dec00104 	addi	sp,sp,4
 800f78c:	f800283a 	ret

0800f790 <__malloc_unlock>:
 800f790:	defffe04 	addi	sp,sp,-8
 800f794:	df000115 	stw	fp,4(sp)
 800f798:	df000104 	addi	fp,sp,4
 800f79c:	e13fff15 	stw	r4,-4(fp)
 800f7a0:	0001883a 	nop
 800f7a4:	e037883a 	mov	sp,fp
 800f7a8:	df000017 	ldw	fp,0(sp)
 800f7ac:	dec00104 	addi	sp,sp,4
 800f7b0:	f800283a 	ret

0800f7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f7b4:	defffe04 	addi	sp,sp,-8
 800f7b8:	dfc00115 	stw	ra,4(sp)
 800f7bc:	df000015 	stw	fp,0(sp)
 800f7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f7c4:	d0a00b17 	ldw	r2,-32724(gp)
 800f7c8:	10000326 	beq	r2,zero,800f7d8 <alt_get_errno+0x24>
 800f7cc:	d0a00b17 	ldw	r2,-32724(gp)
 800f7d0:	103ee83a 	callr	r2
 800f7d4:	00000106 	br	800f7dc <alt_get_errno+0x28>
 800f7d8:	d0a6d204 	addi	r2,gp,-25784
}
 800f7dc:	e037883a 	mov	sp,fp
 800f7e0:	dfc00117 	ldw	ra,4(sp)
 800f7e4:	df000017 	ldw	fp,0(sp)
 800f7e8:	dec00204 	addi	sp,sp,8
 800f7ec:	f800283a 	ret

0800f7f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f7f0:	defff904 	addi	sp,sp,-28
 800f7f4:	dfc00615 	stw	ra,24(sp)
 800f7f8:	df000515 	stw	fp,20(sp)
 800f7fc:	df000504 	addi	fp,sp,20
 800f800:	e13ffd15 	stw	r4,-12(fp)
 800f804:	e17ffe15 	stw	r5,-8(fp)
 800f808:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f80c:	e0bffd17 	ldw	r2,-12(fp)
 800f810:	10000816 	blt	r2,zero,800f834 <read+0x44>
 800f814:	01400304 	movi	r5,12
 800f818:	e13ffd17 	ldw	r4,-12(fp)
 800f81c:	800c9040 	call	800c904 <__mulsi3>
 800f820:	1007883a 	mov	r3,r2
 800f824:	00820074 	movhi	r2,2049
 800f828:	108b4d04 	addi	r2,r2,11572
 800f82c:	1885883a 	add	r2,r3,r2
 800f830:	00000106 	br	800f838 <read+0x48>
 800f834:	0005883a 	mov	r2,zero
 800f838:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f83c:	e0bffb17 	ldw	r2,-20(fp)
 800f840:	10002226 	beq	r2,zero,800f8cc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f844:	e0bffb17 	ldw	r2,-20(fp)
 800f848:	10800217 	ldw	r2,8(r2)
 800f84c:	108000cc 	andi	r2,r2,3
 800f850:	10800060 	cmpeqi	r2,r2,1
 800f854:	1000181e 	bne	r2,zero,800f8b8 <read+0xc8>
        (fd->dev->read))
 800f858:	e0bffb17 	ldw	r2,-20(fp)
 800f85c:	10800017 	ldw	r2,0(r2)
 800f860:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f864:	10001426 	beq	r2,zero,800f8b8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f868:	e0bffb17 	ldw	r2,-20(fp)
 800f86c:	10800017 	ldw	r2,0(r2)
 800f870:	10800517 	ldw	r2,20(r2)
 800f874:	e0ffff17 	ldw	r3,-4(fp)
 800f878:	180d883a 	mov	r6,r3
 800f87c:	e17ffe17 	ldw	r5,-8(fp)
 800f880:	e13ffb17 	ldw	r4,-20(fp)
 800f884:	103ee83a 	callr	r2
 800f888:	e0bffc15 	stw	r2,-16(fp)
 800f88c:	e0bffc17 	ldw	r2,-16(fp)
 800f890:	1000070e 	bge	r2,zero,800f8b0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800f894:	800f7b40 	call	800f7b4 <alt_get_errno>
 800f898:	1007883a 	mov	r3,r2
 800f89c:	e0bffc17 	ldw	r2,-16(fp)
 800f8a0:	0085c83a 	sub	r2,zero,r2
 800f8a4:	18800015 	stw	r2,0(r3)
          return -1;
 800f8a8:	00bfffc4 	movi	r2,-1
 800f8ac:	00000c06 	br	800f8e0 <read+0xf0>
        }
        return rval;
 800f8b0:	e0bffc17 	ldw	r2,-16(fp)
 800f8b4:	00000a06 	br	800f8e0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f8b8:	800f7b40 	call	800f7b4 <alt_get_errno>
 800f8bc:	1007883a 	mov	r3,r2
 800f8c0:	00800344 	movi	r2,13
 800f8c4:	18800015 	stw	r2,0(r3)
 800f8c8:	00000406 	br	800f8dc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f8cc:	800f7b40 	call	800f7b4 <alt_get_errno>
 800f8d0:	1007883a 	mov	r3,r2
 800f8d4:	00801444 	movi	r2,81
 800f8d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f8dc:	00bfffc4 	movi	r2,-1
}
 800f8e0:	e037883a 	mov	sp,fp
 800f8e4:	dfc00117 	ldw	ra,4(sp)
 800f8e8:	df000017 	ldw	fp,0(sp)
 800f8ec:	dec00204 	addi	sp,sp,8
 800f8f0:	f800283a 	ret

0800f8f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f8f4:	defffc04 	addi	sp,sp,-16
 800f8f8:	dfc00315 	stw	ra,12(sp)
 800f8fc:	df000215 	stw	fp,8(sp)
 800f900:	dc000115 	stw	r16,4(sp)
 800f904:	df000204 	addi	fp,sp,8
 800f908:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f90c:	e0bffe17 	ldw	r2,-8(fp)
 800f910:	108000d0 	cmplti	r2,r2,3
 800f914:	1000111e 	bne	r2,zero,800f95c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f918:	04020074 	movhi	r16,2049
 800f91c:	840b4d04 	addi	r16,r16,11572
 800f920:	e0bffe17 	ldw	r2,-8(fp)
 800f924:	01400304 	movi	r5,12
 800f928:	1009883a 	mov	r4,r2
 800f92c:	800c9040 	call	800c904 <__mulsi3>
 800f930:	8085883a 	add	r2,r16,r2
 800f934:	10800204 	addi	r2,r2,8
 800f938:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f93c:	04020074 	movhi	r16,2049
 800f940:	840b4d04 	addi	r16,r16,11572
 800f944:	e0bffe17 	ldw	r2,-8(fp)
 800f948:	01400304 	movi	r5,12
 800f94c:	1009883a 	mov	r4,r2
 800f950:	800c9040 	call	800c904 <__mulsi3>
 800f954:	8085883a 	add	r2,r16,r2
 800f958:	10000015 	stw	zero,0(r2)
  }
}
 800f95c:	0001883a 	nop
 800f960:	e6ffff04 	addi	sp,fp,-4
 800f964:	dfc00217 	ldw	ra,8(sp)
 800f968:	df000117 	ldw	fp,4(sp)
 800f96c:	dc000017 	ldw	r16,0(sp)
 800f970:	dec00304 	addi	sp,sp,12
 800f974:	f800283a 	ret

0800f978 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f978:	defff904 	addi	sp,sp,-28
 800f97c:	df000615 	stw	fp,24(sp)
 800f980:	df000604 	addi	fp,sp,24
 800f984:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f988:	0005303a 	rdctl	r2,status
 800f98c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f990:	e0fffe17 	ldw	r3,-8(fp)
 800f994:	00bfff84 	movi	r2,-2
 800f998:	1884703a 	and	r2,r3,r2
 800f99c:	1001703a 	wrctl	status,r2
  
  return context;
 800f9a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f9a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f9a8:	d0a00c17 	ldw	r2,-32720(gp)
 800f9ac:	10c000c4 	addi	r3,r2,3
 800f9b0:	00bfff04 	movi	r2,-4
 800f9b4:	1884703a 	and	r2,r3,r2
 800f9b8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f9bc:	d0e00c17 	ldw	r3,-32720(gp)
 800f9c0:	e0bfff17 	ldw	r2,-4(fp)
 800f9c4:	1887883a 	add	r3,r3,r2
 800f9c8:	00830034 	movhi	r2,3072
 800f9cc:	10800004 	addi	r2,r2,0
 800f9d0:	10c0062e 	bgeu	r2,r3,800f9ec <sbrk+0x74>
 800f9d4:	e0bffb17 	ldw	r2,-20(fp)
 800f9d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f9dc:	e0bffa17 	ldw	r2,-24(fp)
 800f9e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f9e4:	00bfffc4 	movi	r2,-1
 800f9e8:	00000b06 	br	800fa18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f9ec:	d0a00c17 	ldw	r2,-32720(gp)
 800f9f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800f9f4:	d0e00c17 	ldw	r3,-32720(gp)
 800f9f8:	e0bfff17 	ldw	r2,-4(fp)
 800f9fc:	1885883a 	add	r2,r3,r2
 800fa00:	d0a00c15 	stw	r2,-32720(gp)
 800fa04:	e0bffb17 	ldw	r2,-20(fp)
 800fa08:	e0bffc15 	stw	r2,-16(fp)
 800fa0c:	e0bffc17 	ldw	r2,-16(fp)
 800fa10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800fa14:	e0bffd17 	ldw	r2,-12(fp)
} 
 800fa18:	e037883a 	mov	sp,fp
 800fa1c:	df000017 	ldw	fp,0(sp)
 800fa20:	dec00104 	addi	sp,sp,4
 800fa24:	f800283a 	ret

0800fa28 <usleep>:
 800fa28:	defffd04 	addi	sp,sp,-12
 800fa2c:	dfc00215 	stw	ra,8(sp)
 800fa30:	df000115 	stw	fp,4(sp)
 800fa34:	df000104 	addi	fp,sp,4
 800fa38:	e13fff15 	stw	r4,-4(fp)
 800fa3c:	e13fff17 	ldw	r4,-4(fp)
 800fa40:	80107e00 	call	80107e0 <alt_busy_sleep>
 800fa44:	e037883a 	mov	sp,fp
 800fa48:	dfc00117 	ldw	ra,4(sp)
 800fa4c:	df000017 	ldw	fp,0(sp)
 800fa50:	dec00204 	addi	sp,sp,8
 800fa54:	f800283a 	ret

0800fa58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fa58:	defffe04 	addi	sp,sp,-8
 800fa5c:	dfc00115 	stw	ra,4(sp)
 800fa60:	df000015 	stw	fp,0(sp)
 800fa64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fa68:	d0a00b17 	ldw	r2,-32724(gp)
 800fa6c:	10000326 	beq	r2,zero,800fa7c <alt_get_errno+0x24>
 800fa70:	d0a00b17 	ldw	r2,-32724(gp)
 800fa74:	103ee83a 	callr	r2
 800fa78:	00000106 	br	800fa80 <alt_get_errno+0x28>
 800fa7c:	d0a6d204 	addi	r2,gp,-25784
}
 800fa80:	e037883a 	mov	sp,fp
 800fa84:	dfc00117 	ldw	ra,4(sp)
 800fa88:	df000017 	ldw	fp,0(sp)
 800fa8c:	dec00204 	addi	sp,sp,8
 800fa90:	f800283a 	ret

0800fa94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800fa94:	defff904 	addi	sp,sp,-28
 800fa98:	dfc00615 	stw	ra,24(sp)
 800fa9c:	df000515 	stw	fp,20(sp)
 800faa0:	df000504 	addi	fp,sp,20
 800faa4:	e13ffd15 	stw	r4,-12(fp)
 800faa8:	e17ffe15 	stw	r5,-8(fp)
 800faac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fab0:	e0bffd17 	ldw	r2,-12(fp)
 800fab4:	10000816 	blt	r2,zero,800fad8 <write+0x44>
 800fab8:	01400304 	movi	r5,12
 800fabc:	e13ffd17 	ldw	r4,-12(fp)
 800fac0:	800c9040 	call	800c904 <__mulsi3>
 800fac4:	1007883a 	mov	r3,r2
 800fac8:	00820074 	movhi	r2,2049
 800facc:	108b4d04 	addi	r2,r2,11572
 800fad0:	1885883a 	add	r2,r3,r2
 800fad4:	00000106 	br	800fadc <write+0x48>
 800fad8:	0005883a 	mov	r2,zero
 800fadc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800fae0:	e0bffb17 	ldw	r2,-20(fp)
 800fae4:	10002126 	beq	r2,zero,800fb6c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800fae8:	e0bffb17 	ldw	r2,-20(fp)
 800faec:	10800217 	ldw	r2,8(r2)
 800faf0:	108000cc 	andi	r2,r2,3
 800faf4:	10001826 	beq	r2,zero,800fb58 <write+0xc4>
 800faf8:	e0bffb17 	ldw	r2,-20(fp)
 800fafc:	10800017 	ldw	r2,0(r2)
 800fb00:	10800617 	ldw	r2,24(r2)
 800fb04:	10001426 	beq	r2,zero,800fb58 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800fb08:	e0bffb17 	ldw	r2,-20(fp)
 800fb0c:	10800017 	ldw	r2,0(r2)
 800fb10:	10800617 	ldw	r2,24(r2)
 800fb14:	e0ffff17 	ldw	r3,-4(fp)
 800fb18:	180d883a 	mov	r6,r3
 800fb1c:	e17ffe17 	ldw	r5,-8(fp)
 800fb20:	e13ffb17 	ldw	r4,-20(fp)
 800fb24:	103ee83a 	callr	r2
 800fb28:	e0bffc15 	stw	r2,-16(fp)
 800fb2c:	e0bffc17 	ldw	r2,-16(fp)
 800fb30:	1000070e 	bge	r2,zero,800fb50 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800fb34:	800fa580 	call	800fa58 <alt_get_errno>
 800fb38:	1007883a 	mov	r3,r2
 800fb3c:	e0bffc17 	ldw	r2,-16(fp)
 800fb40:	0085c83a 	sub	r2,zero,r2
 800fb44:	18800015 	stw	r2,0(r3)
        return -1;
 800fb48:	00bfffc4 	movi	r2,-1
 800fb4c:	00000c06 	br	800fb80 <write+0xec>
      }
      return rval;
 800fb50:	e0bffc17 	ldw	r2,-16(fp)
 800fb54:	00000a06 	br	800fb80 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800fb58:	800fa580 	call	800fa58 <alt_get_errno>
 800fb5c:	1007883a 	mov	r3,r2
 800fb60:	00800344 	movi	r2,13
 800fb64:	18800015 	stw	r2,0(r3)
 800fb68:	00000406 	br	800fb7c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800fb6c:	800fa580 	call	800fa58 <alt_get_errno>
 800fb70:	1007883a 	mov	r3,r2
 800fb74:	00801444 	movi	r2,81
 800fb78:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fb7c:	00bfffc4 	movi	r2,-1
}
 800fb80:	e037883a 	mov	sp,fp
 800fb84:	dfc00117 	ldw	ra,4(sp)
 800fb88:	df000017 	ldw	fp,0(sp)
 800fb8c:	dec00204 	addi	sp,sp,8
 800fb90:	f800283a 	ret

0800fb94 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800fb94:	defffd04 	addi	sp,sp,-12
 800fb98:	dfc00215 	stw	ra,8(sp)
 800fb9c:	df000115 	stw	fp,4(sp)
 800fba0:	df000104 	addi	fp,sp,4
 800fba4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800fba8:	d1600804 	addi	r5,gp,-32736
 800fbac:	e13fff17 	ldw	r4,-4(fp)
 800fbb0:	80109940 	call	8010994 <alt_dev_llist_insert>
}
 800fbb4:	e037883a 	mov	sp,fp
 800fbb8:	dfc00117 	ldw	ra,4(sp)
 800fbbc:	df000017 	ldw	fp,0(sp)
 800fbc0:	dec00204 	addi	sp,sp,8
 800fbc4:	f800283a 	ret

0800fbc8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800fbc8:	defffd04 	addi	sp,sp,-12
 800fbcc:	dfc00215 	stw	ra,8(sp)
 800fbd0:	df000115 	stw	fp,4(sp)
 800fbd4:	df000104 	addi	fp,sp,4
 800fbd8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800fbdc:	80113400 	call	8011340 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800fbe0:	00800044 	movi	r2,1
 800fbe4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800fbe8:	0001883a 	nop
 800fbec:	e037883a 	mov	sp,fp
 800fbf0:	dfc00117 	ldw	ra,4(sp)
 800fbf4:	df000017 	ldw	fp,0(sp)
 800fbf8:	dec00204 	addi	sp,sp,8
 800fbfc:	f800283a 	ret

0800fc00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800fc00:	defffe04 	addi	sp,sp,-8
 800fc04:	dfc00115 	stw	ra,4(sp)
 800fc08:	df000015 	stw	fp,0(sp)
 800fc0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800fc10:	000d883a 	mov	r6,zero
 800fc14:	000b883a 	mov	r5,zero
 800fc18:	01020074 	movhi	r4,2049
 800fc1c:	210bb704 	addi	r4,r4,11996
 800fc20:	800fdb00 	call	800fdb0 <altera_avalon_jtag_uart_init>
 800fc24:	01020074 	movhi	r4,2049
 800fc28:	210bad04 	addi	r4,r4,11956
 800fc2c:	800fb940 	call	800fb94 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800fc30:	0001883a 	nop
}
 800fc34:	0001883a 	nop
 800fc38:	e037883a 	mov	sp,fp
 800fc3c:	dfc00117 	ldw	ra,4(sp)
 800fc40:	df000017 	ldw	fp,0(sp)
 800fc44:	dec00204 	addi	sp,sp,8
 800fc48:	f800283a 	ret

0800fc4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800fc4c:	defffa04 	addi	sp,sp,-24
 800fc50:	dfc00515 	stw	ra,20(sp)
 800fc54:	df000415 	stw	fp,16(sp)
 800fc58:	df000404 	addi	fp,sp,16
 800fc5c:	e13ffd15 	stw	r4,-12(fp)
 800fc60:	e17ffe15 	stw	r5,-8(fp)
 800fc64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800fc68:	e0bffd17 	ldw	r2,-12(fp)
 800fc6c:	10800017 	ldw	r2,0(r2)
 800fc70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800fc74:	e0bffc17 	ldw	r2,-16(fp)
 800fc78:	10c00a04 	addi	r3,r2,40
 800fc7c:	e0bffd17 	ldw	r2,-12(fp)
 800fc80:	10800217 	ldw	r2,8(r2)
 800fc84:	100f883a 	mov	r7,r2
 800fc88:	e1bfff17 	ldw	r6,-4(fp)
 800fc8c:	e17ffe17 	ldw	r5,-8(fp)
 800fc90:	1809883a 	mov	r4,r3
 800fc94:	80102740 	call	8010274 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800fc98:	e037883a 	mov	sp,fp
 800fc9c:	dfc00117 	ldw	ra,4(sp)
 800fca0:	df000017 	ldw	fp,0(sp)
 800fca4:	dec00204 	addi	sp,sp,8
 800fca8:	f800283a 	ret

0800fcac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800fcac:	defffa04 	addi	sp,sp,-24
 800fcb0:	dfc00515 	stw	ra,20(sp)
 800fcb4:	df000415 	stw	fp,16(sp)
 800fcb8:	df000404 	addi	fp,sp,16
 800fcbc:	e13ffd15 	stw	r4,-12(fp)
 800fcc0:	e17ffe15 	stw	r5,-8(fp)
 800fcc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800fcc8:	e0bffd17 	ldw	r2,-12(fp)
 800fccc:	10800017 	ldw	r2,0(r2)
 800fcd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800fcd4:	e0bffc17 	ldw	r2,-16(fp)
 800fcd8:	10c00a04 	addi	r3,r2,40
 800fcdc:	e0bffd17 	ldw	r2,-12(fp)
 800fce0:	10800217 	ldw	r2,8(r2)
 800fce4:	100f883a 	mov	r7,r2
 800fce8:	e1bfff17 	ldw	r6,-4(fp)
 800fcec:	e17ffe17 	ldw	r5,-8(fp)
 800fcf0:	1809883a 	mov	r4,r3
 800fcf4:	80104900 	call	8010490 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800fcf8:	e037883a 	mov	sp,fp
 800fcfc:	dfc00117 	ldw	ra,4(sp)
 800fd00:	df000017 	ldw	fp,0(sp)
 800fd04:	dec00204 	addi	sp,sp,8
 800fd08:	f800283a 	ret

0800fd0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800fd0c:	defffc04 	addi	sp,sp,-16
 800fd10:	dfc00315 	stw	ra,12(sp)
 800fd14:	df000215 	stw	fp,8(sp)
 800fd18:	df000204 	addi	fp,sp,8
 800fd1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800fd20:	e0bfff17 	ldw	r2,-4(fp)
 800fd24:	10800017 	ldw	r2,0(r2)
 800fd28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800fd2c:	e0bffe17 	ldw	r2,-8(fp)
 800fd30:	10c00a04 	addi	r3,r2,40
 800fd34:	e0bfff17 	ldw	r2,-4(fp)
 800fd38:	10800217 	ldw	r2,8(r2)
 800fd3c:	100b883a 	mov	r5,r2
 800fd40:	1809883a 	mov	r4,r3
 800fd44:	801011c0 	call	801011c <altera_avalon_jtag_uart_close>
}
 800fd48:	e037883a 	mov	sp,fp
 800fd4c:	dfc00117 	ldw	ra,4(sp)
 800fd50:	df000017 	ldw	fp,0(sp)
 800fd54:	dec00204 	addi	sp,sp,8
 800fd58:	f800283a 	ret

0800fd5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800fd5c:	defffa04 	addi	sp,sp,-24
 800fd60:	dfc00515 	stw	ra,20(sp)
 800fd64:	df000415 	stw	fp,16(sp)
 800fd68:	df000404 	addi	fp,sp,16
 800fd6c:	e13ffd15 	stw	r4,-12(fp)
 800fd70:	e17ffe15 	stw	r5,-8(fp)
 800fd74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800fd78:	e0bffd17 	ldw	r2,-12(fp)
 800fd7c:	10800017 	ldw	r2,0(r2)
 800fd80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800fd84:	e0bffc17 	ldw	r2,-16(fp)
 800fd88:	10800a04 	addi	r2,r2,40
 800fd8c:	e1bfff17 	ldw	r6,-4(fp)
 800fd90:	e17ffe17 	ldw	r5,-8(fp)
 800fd94:	1009883a 	mov	r4,r2
 800fd98:	80101840 	call	8010184 <altera_avalon_jtag_uart_ioctl>
}
 800fd9c:	e037883a 	mov	sp,fp
 800fda0:	dfc00117 	ldw	ra,4(sp)
 800fda4:	df000017 	ldw	fp,0(sp)
 800fda8:	dec00204 	addi	sp,sp,8
 800fdac:	f800283a 	ret

0800fdb0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800fdb0:	defffa04 	addi	sp,sp,-24
 800fdb4:	dfc00515 	stw	ra,20(sp)
 800fdb8:	df000415 	stw	fp,16(sp)
 800fdbc:	df000404 	addi	fp,sp,16
 800fdc0:	e13ffd15 	stw	r4,-12(fp)
 800fdc4:	e17ffe15 	stw	r5,-8(fp)
 800fdc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fdcc:	e0bffd17 	ldw	r2,-12(fp)
 800fdd0:	00c00044 	movi	r3,1
 800fdd4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800fdd8:	e0bffd17 	ldw	r2,-12(fp)
 800fddc:	10800017 	ldw	r2,0(r2)
 800fde0:	10800104 	addi	r2,r2,4
 800fde4:	1007883a 	mov	r3,r2
 800fde8:	e0bffd17 	ldw	r2,-12(fp)
 800fdec:	10800817 	ldw	r2,32(r2)
 800fdf0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800fdf4:	e0bffe17 	ldw	r2,-8(fp)
 800fdf8:	e0ffff17 	ldw	r3,-4(fp)
 800fdfc:	d8000015 	stw	zero,0(sp)
 800fe00:	e1fffd17 	ldw	r7,-12(fp)
 800fe04:	01820074 	movhi	r6,2049
 800fe08:	31bf9c04 	addi	r6,r6,-400
 800fe0c:	180b883a 	mov	r5,r3
 800fe10:	1009883a 	mov	r4,r2
 800fe14:	8010b180 	call	8010b18 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800fe18:	e0bffd17 	ldw	r2,-12(fp)
 800fe1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800fe20:	e0bffd17 	ldw	r2,-12(fp)
 800fe24:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800fe28:	d0e6d717 	ldw	r3,-25764(gp)
 800fe2c:	e1fffd17 	ldw	r7,-12(fp)
 800fe30:	01820074 	movhi	r6,2049
 800fe34:	31801f04 	addi	r6,r6,124
 800fe38:	180b883a 	mov	r5,r3
 800fe3c:	1009883a 	mov	r4,r2
 800fe40:	80106b40 	call	80106b4 <alt_alarm_start>
 800fe44:	1000040e 	bge	r2,zero,800fe58 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800fe48:	e0fffd17 	ldw	r3,-12(fp)
 800fe4c:	00a00034 	movhi	r2,32768
 800fe50:	10bfffc4 	addi	r2,r2,-1
 800fe54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800fe58:	0001883a 	nop
 800fe5c:	e037883a 	mov	sp,fp
 800fe60:	dfc00117 	ldw	ra,4(sp)
 800fe64:	df000017 	ldw	fp,0(sp)
 800fe68:	dec00204 	addi	sp,sp,8
 800fe6c:	f800283a 	ret

0800fe70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800fe70:	defff804 	addi	sp,sp,-32
 800fe74:	df000715 	stw	fp,28(sp)
 800fe78:	df000704 	addi	fp,sp,28
 800fe7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800fe80:	e0bfff17 	ldw	r2,-4(fp)
 800fe84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800fe88:	e0bffb17 	ldw	r2,-20(fp)
 800fe8c:	10800017 	ldw	r2,0(r2)
 800fe90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fe94:	e0bffc17 	ldw	r2,-16(fp)
 800fe98:	10800104 	addi	r2,r2,4
 800fe9c:	10800037 	ldwio	r2,0(r2)
 800fea0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800fea4:	e0bffd17 	ldw	r2,-12(fp)
 800fea8:	1080c00c 	andi	r2,r2,768
 800feac:	10006d26 	beq	r2,zero,8010064 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800feb0:	e0bffd17 	ldw	r2,-12(fp)
 800feb4:	1080400c 	andi	r2,r2,256
 800feb8:	10003526 	beq	r2,zero,800ff90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800febc:	00800074 	movhi	r2,1
 800fec0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fec4:	e0bffb17 	ldw	r2,-20(fp)
 800fec8:	10800a17 	ldw	r2,40(r2)
 800fecc:	10800044 	addi	r2,r2,1
 800fed0:	1081ffcc 	andi	r2,r2,2047
 800fed4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800fed8:	e0bffb17 	ldw	r2,-20(fp)
 800fedc:	10c00b17 	ldw	r3,44(r2)
 800fee0:	e0bffe17 	ldw	r2,-8(fp)
 800fee4:	18801526 	beq	r3,r2,800ff3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800fee8:	e0bffc17 	ldw	r2,-16(fp)
 800feec:	10800037 	ldwio	r2,0(r2)
 800fef0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800fef4:	e0bff917 	ldw	r2,-28(fp)
 800fef8:	10a0000c 	andi	r2,r2,32768
 800fefc:	10001126 	beq	r2,zero,800ff44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800ff00:	e0bffb17 	ldw	r2,-20(fp)
 800ff04:	10800a17 	ldw	r2,40(r2)
 800ff08:	e0fff917 	ldw	r3,-28(fp)
 800ff0c:	1809883a 	mov	r4,r3
 800ff10:	e0fffb17 	ldw	r3,-20(fp)
 800ff14:	1885883a 	add	r2,r3,r2
 800ff18:	10800e04 	addi	r2,r2,56
 800ff1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ff20:	e0bffb17 	ldw	r2,-20(fp)
 800ff24:	10800a17 	ldw	r2,40(r2)
 800ff28:	10800044 	addi	r2,r2,1
 800ff2c:	10c1ffcc 	andi	r3,r2,2047
 800ff30:	e0bffb17 	ldw	r2,-20(fp)
 800ff34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800ff38:	003fe206 	br	800fec4 <__alt_data_end+0xfc00fec4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800ff3c:	0001883a 	nop
 800ff40:	00000106 	br	800ff48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800ff44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800ff48:	e0bff917 	ldw	r2,-28(fp)
 800ff4c:	10bfffec 	andhi	r2,r2,65535
 800ff50:	10000f26 	beq	r2,zero,800ff90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ff54:	e0bffb17 	ldw	r2,-20(fp)
 800ff58:	10c00817 	ldw	r3,32(r2)
 800ff5c:	00bfff84 	movi	r2,-2
 800ff60:	1886703a 	and	r3,r3,r2
 800ff64:	e0bffb17 	ldw	r2,-20(fp)
 800ff68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800ff6c:	e0bffc17 	ldw	r2,-16(fp)
 800ff70:	10800104 	addi	r2,r2,4
 800ff74:	1007883a 	mov	r3,r2
 800ff78:	e0bffb17 	ldw	r2,-20(fp)
 800ff7c:	10800817 	ldw	r2,32(r2)
 800ff80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800ff84:	e0bffc17 	ldw	r2,-16(fp)
 800ff88:	10800104 	addi	r2,r2,4
 800ff8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800ff90:	e0bffd17 	ldw	r2,-12(fp)
 800ff94:	1080800c 	andi	r2,r2,512
 800ff98:	103fbe26 	beq	r2,zero,800fe94 <__alt_data_end+0xfc00fe94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800ff9c:	e0bffd17 	ldw	r2,-12(fp)
 800ffa0:	1004d43a 	srli	r2,r2,16
 800ffa4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800ffa8:	00001406 	br	800fffc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800ffac:	e0bffc17 	ldw	r2,-16(fp)
 800ffb0:	e0fffb17 	ldw	r3,-20(fp)
 800ffb4:	18c00d17 	ldw	r3,52(r3)
 800ffb8:	e13ffb17 	ldw	r4,-20(fp)
 800ffbc:	20c7883a 	add	r3,r4,r3
 800ffc0:	18c20e04 	addi	r3,r3,2104
 800ffc4:	18c00003 	ldbu	r3,0(r3)
 800ffc8:	18c03fcc 	andi	r3,r3,255
 800ffcc:	18c0201c 	xori	r3,r3,128
 800ffd0:	18ffe004 	addi	r3,r3,-128
 800ffd4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ffd8:	e0bffb17 	ldw	r2,-20(fp)
 800ffdc:	10800d17 	ldw	r2,52(r2)
 800ffe0:	10800044 	addi	r2,r2,1
 800ffe4:	10c1ffcc 	andi	r3,r2,2047
 800ffe8:	e0bffb17 	ldw	r2,-20(fp)
 800ffec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800fff0:	e0bffa17 	ldw	r2,-24(fp)
 800fff4:	10bfffc4 	addi	r2,r2,-1
 800fff8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800fffc:	e0bffa17 	ldw	r2,-24(fp)
 8010000:	10000526 	beq	r2,zero,8010018 <altera_avalon_jtag_uart_irq+0x1a8>
 8010004:	e0bffb17 	ldw	r2,-20(fp)
 8010008:	10c00d17 	ldw	r3,52(r2)
 801000c:	e0bffb17 	ldw	r2,-20(fp)
 8010010:	10800c17 	ldw	r2,48(r2)
 8010014:	18bfe51e 	bne	r3,r2,800ffac <__alt_data_end+0xfc00ffac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8010018:	e0bffa17 	ldw	r2,-24(fp)
 801001c:	103f9d26 	beq	r2,zero,800fe94 <__alt_data_end+0xfc00fe94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010020:	e0bffb17 	ldw	r2,-20(fp)
 8010024:	10c00817 	ldw	r3,32(r2)
 8010028:	00bfff44 	movi	r2,-3
 801002c:	1886703a 	and	r3,r3,r2
 8010030:	e0bffb17 	ldw	r2,-20(fp)
 8010034:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010038:	e0bffb17 	ldw	r2,-20(fp)
 801003c:	10800017 	ldw	r2,0(r2)
 8010040:	10800104 	addi	r2,r2,4
 8010044:	1007883a 	mov	r3,r2
 8010048:	e0bffb17 	ldw	r2,-20(fp)
 801004c:	10800817 	ldw	r2,32(r2)
 8010050:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010054:	e0bffc17 	ldw	r2,-16(fp)
 8010058:	10800104 	addi	r2,r2,4
 801005c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8010060:	003f8c06 	br	800fe94 <__alt_data_end+0xfc00fe94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8010064:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8010068:	0001883a 	nop
 801006c:	e037883a 	mov	sp,fp
 8010070:	df000017 	ldw	fp,0(sp)
 8010074:	dec00104 	addi	sp,sp,4
 8010078:	f800283a 	ret

0801007c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 801007c:	defff804 	addi	sp,sp,-32
 8010080:	df000715 	stw	fp,28(sp)
 8010084:	df000704 	addi	fp,sp,28
 8010088:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801008c:	e0bffb17 	ldw	r2,-20(fp)
 8010090:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8010094:	e0bff917 	ldw	r2,-28(fp)
 8010098:	10800017 	ldw	r2,0(r2)
 801009c:	10800104 	addi	r2,r2,4
 80100a0:	10800037 	ldwio	r2,0(r2)
 80100a4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80100a8:	e0bffa17 	ldw	r2,-24(fp)
 80100ac:	1081000c 	andi	r2,r2,1024
 80100b0:	10000b26 	beq	r2,zero,80100e0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80100b4:	e0bff917 	ldw	r2,-28(fp)
 80100b8:	10800017 	ldw	r2,0(r2)
 80100bc:	10800104 	addi	r2,r2,4
 80100c0:	1007883a 	mov	r3,r2
 80100c4:	e0bff917 	ldw	r2,-28(fp)
 80100c8:	10800817 	ldw	r2,32(r2)
 80100cc:	10810014 	ori	r2,r2,1024
 80100d0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80100d4:	e0bff917 	ldw	r2,-28(fp)
 80100d8:	10000915 	stw	zero,36(r2)
 80100dc:	00000a06 	br	8010108 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80100e0:	e0bff917 	ldw	r2,-28(fp)
 80100e4:	10c00917 	ldw	r3,36(r2)
 80100e8:	00a00034 	movhi	r2,32768
 80100ec:	10bfff04 	addi	r2,r2,-4
 80100f0:	10c00536 	bltu	r2,r3,8010108 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80100f4:	e0bff917 	ldw	r2,-28(fp)
 80100f8:	10800917 	ldw	r2,36(r2)
 80100fc:	10c00044 	addi	r3,r2,1
 8010100:	e0bff917 	ldw	r2,-28(fp)
 8010104:	10c00915 	stw	r3,36(r2)
 8010108:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801010c:	e037883a 	mov	sp,fp
 8010110:	df000017 	ldw	fp,0(sp)
 8010114:	dec00104 	addi	sp,sp,4
 8010118:	f800283a 	ret

0801011c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801011c:	defffd04 	addi	sp,sp,-12
 8010120:	df000215 	stw	fp,8(sp)
 8010124:	df000204 	addi	fp,sp,8
 8010128:	e13ffe15 	stw	r4,-8(fp)
 801012c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010130:	00000506 	br	8010148 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8010134:	e0bfff17 	ldw	r2,-4(fp)
 8010138:	1090000c 	andi	r2,r2,16384
 801013c:	10000226 	beq	r2,zero,8010148 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8010140:	00bffd44 	movi	r2,-11
 8010144:	00000b06 	br	8010174 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010148:	e0bffe17 	ldw	r2,-8(fp)
 801014c:	10c00d17 	ldw	r3,52(r2)
 8010150:	e0bffe17 	ldw	r2,-8(fp)
 8010154:	10800c17 	ldw	r2,48(r2)
 8010158:	18800526 	beq	r3,r2,8010170 <altera_avalon_jtag_uart_close+0x54>
 801015c:	e0bffe17 	ldw	r2,-8(fp)
 8010160:	10c00917 	ldw	r3,36(r2)
 8010164:	e0bffe17 	ldw	r2,-8(fp)
 8010168:	10800117 	ldw	r2,4(r2)
 801016c:	18bff136 	bltu	r3,r2,8010134 <__alt_data_end+0xfc010134>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8010170:	0005883a 	mov	r2,zero
}
 8010174:	e037883a 	mov	sp,fp
 8010178:	df000017 	ldw	fp,0(sp)
 801017c:	dec00104 	addi	sp,sp,4
 8010180:	f800283a 	ret

08010184 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8010184:	defffa04 	addi	sp,sp,-24
 8010188:	df000515 	stw	fp,20(sp)
 801018c:	df000504 	addi	fp,sp,20
 8010190:	e13ffd15 	stw	r4,-12(fp)
 8010194:	e17ffe15 	stw	r5,-8(fp)
 8010198:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801019c:	00bff9c4 	movi	r2,-25
 80101a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80101a4:	e0bffe17 	ldw	r2,-8(fp)
 80101a8:	10da8060 	cmpeqi	r3,r2,27137
 80101ac:	1800031e 	bne	r3,zero,80101bc <altera_avalon_jtag_uart_ioctl+0x38>
 80101b0:	109a80a0 	cmpeqi	r2,r2,27138
 80101b4:	1000181e 	bne	r2,zero,8010218 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80101b8:	00002906 	br	8010260 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80101bc:	e0bffd17 	ldw	r2,-12(fp)
 80101c0:	10c00117 	ldw	r3,4(r2)
 80101c4:	00a00034 	movhi	r2,32768
 80101c8:	10bfffc4 	addi	r2,r2,-1
 80101cc:	18802126 	beq	r3,r2,8010254 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80101d0:	e0bfff17 	ldw	r2,-4(fp)
 80101d4:	10800017 	ldw	r2,0(r2)
 80101d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80101dc:	e0bffc17 	ldw	r2,-16(fp)
 80101e0:	10800090 	cmplti	r2,r2,2
 80101e4:	1000061e 	bne	r2,zero,8010200 <altera_avalon_jtag_uart_ioctl+0x7c>
 80101e8:	e0fffc17 	ldw	r3,-16(fp)
 80101ec:	00a00034 	movhi	r2,32768
 80101f0:	10bfffc4 	addi	r2,r2,-1
 80101f4:	18800226 	beq	r3,r2,8010200 <altera_avalon_jtag_uart_ioctl+0x7c>
 80101f8:	e0bffc17 	ldw	r2,-16(fp)
 80101fc:	00000206 	br	8010208 <altera_avalon_jtag_uart_ioctl+0x84>
 8010200:	00a00034 	movhi	r2,32768
 8010204:	10bfff84 	addi	r2,r2,-2
 8010208:	e0fffd17 	ldw	r3,-12(fp)
 801020c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8010210:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010214:	00000f06 	br	8010254 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8010218:	e0bffd17 	ldw	r2,-12(fp)
 801021c:	10c00117 	ldw	r3,4(r2)
 8010220:	00a00034 	movhi	r2,32768
 8010224:	10bfffc4 	addi	r2,r2,-1
 8010228:	18800c26 	beq	r3,r2,801025c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801022c:	e0bffd17 	ldw	r2,-12(fp)
 8010230:	10c00917 	ldw	r3,36(r2)
 8010234:	e0bffd17 	ldw	r2,-12(fp)
 8010238:	10800117 	ldw	r2,4(r2)
 801023c:	1885803a 	cmpltu	r2,r3,r2
 8010240:	10c03fcc 	andi	r3,r2,255
 8010244:	e0bfff17 	ldw	r2,-4(fp)
 8010248:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801024c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010250:	00000206 	br	801025c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8010254:	0001883a 	nop
 8010258:	00000106 	br	8010260 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 801025c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8010260:	e0bffb17 	ldw	r2,-20(fp)
}
 8010264:	e037883a 	mov	sp,fp
 8010268:	df000017 	ldw	fp,0(sp)
 801026c:	dec00104 	addi	sp,sp,4
 8010270:	f800283a 	ret

08010274 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8010274:	defff304 	addi	sp,sp,-52
 8010278:	dfc00c15 	stw	ra,48(sp)
 801027c:	df000b15 	stw	fp,44(sp)
 8010280:	df000b04 	addi	fp,sp,44
 8010284:	e13ffc15 	stw	r4,-16(fp)
 8010288:	e17ffd15 	stw	r5,-12(fp)
 801028c:	e1bffe15 	stw	r6,-8(fp)
 8010290:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8010294:	e0bffd17 	ldw	r2,-12(fp)
 8010298:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801029c:	00004706 	br	80103bc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80102a0:	e0bffc17 	ldw	r2,-16(fp)
 80102a4:	10800a17 	ldw	r2,40(r2)
 80102a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80102ac:	e0bffc17 	ldw	r2,-16(fp)
 80102b0:	10800b17 	ldw	r2,44(r2)
 80102b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80102b8:	e0fff717 	ldw	r3,-36(fp)
 80102bc:	e0bff817 	ldw	r2,-32(fp)
 80102c0:	18800536 	bltu	r3,r2,80102d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80102c4:	e0fff717 	ldw	r3,-36(fp)
 80102c8:	e0bff817 	ldw	r2,-32(fp)
 80102cc:	1885c83a 	sub	r2,r3,r2
 80102d0:	e0bff615 	stw	r2,-40(fp)
 80102d4:	00000406 	br	80102e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80102d8:	00c20004 	movi	r3,2048
 80102dc:	e0bff817 	ldw	r2,-32(fp)
 80102e0:	1885c83a 	sub	r2,r3,r2
 80102e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80102e8:	e0bff617 	ldw	r2,-40(fp)
 80102ec:	10001e26 	beq	r2,zero,8010368 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80102f0:	e0fffe17 	ldw	r3,-8(fp)
 80102f4:	e0bff617 	ldw	r2,-40(fp)
 80102f8:	1880022e 	bgeu	r3,r2,8010304 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80102fc:	e0bffe17 	ldw	r2,-8(fp)
 8010300:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8010304:	e0bffc17 	ldw	r2,-16(fp)
 8010308:	10c00e04 	addi	r3,r2,56
 801030c:	e0bff817 	ldw	r2,-32(fp)
 8010310:	1885883a 	add	r2,r3,r2
 8010314:	e1bff617 	ldw	r6,-40(fp)
 8010318:	100b883a 	mov	r5,r2
 801031c:	e13ff517 	ldw	r4,-44(fp)
 8010320:	8007e840 	call	8007e84 <memcpy>
      ptr   += n;
 8010324:	e0fff517 	ldw	r3,-44(fp)
 8010328:	e0bff617 	ldw	r2,-40(fp)
 801032c:	1885883a 	add	r2,r3,r2
 8010330:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8010334:	e0fffe17 	ldw	r3,-8(fp)
 8010338:	e0bff617 	ldw	r2,-40(fp)
 801033c:	1885c83a 	sub	r2,r3,r2
 8010340:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010344:	e0fff817 	ldw	r3,-32(fp)
 8010348:	e0bff617 	ldw	r2,-40(fp)
 801034c:	1885883a 	add	r2,r3,r2
 8010350:	10c1ffcc 	andi	r3,r2,2047
 8010354:	e0bffc17 	ldw	r2,-16(fp)
 8010358:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 801035c:	e0bffe17 	ldw	r2,-8(fp)
 8010360:	00bfcf16 	blt	zero,r2,80102a0 <__alt_data_end+0xfc0102a0>
 8010364:	00000106 	br	801036c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8010368:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 801036c:	e0fff517 	ldw	r3,-44(fp)
 8010370:	e0bffd17 	ldw	r2,-12(fp)
 8010374:	1880141e 	bne	r3,r2,80103c8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8010378:	e0bfff17 	ldw	r2,-4(fp)
 801037c:	1090000c 	andi	r2,r2,16384
 8010380:	1000131e 	bne	r2,zero,80103d0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8010384:	0001883a 	nop
 8010388:	e0bffc17 	ldw	r2,-16(fp)
 801038c:	10c00a17 	ldw	r3,40(r2)
 8010390:	e0bff717 	ldw	r2,-36(fp)
 8010394:	1880051e 	bne	r3,r2,80103ac <altera_avalon_jtag_uart_read+0x138>
 8010398:	e0bffc17 	ldw	r2,-16(fp)
 801039c:	10c00917 	ldw	r3,36(r2)
 80103a0:	e0bffc17 	ldw	r2,-16(fp)
 80103a4:	10800117 	ldw	r2,4(r2)
 80103a8:	18bff736 	bltu	r3,r2,8010388 <__alt_data_end+0xfc010388>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80103ac:	e0bffc17 	ldw	r2,-16(fp)
 80103b0:	10c00a17 	ldw	r3,40(r2)
 80103b4:	e0bff717 	ldw	r2,-36(fp)
 80103b8:	18800726 	beq	r3,r2,80103d8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80103bc:	e0bffe17 	ldw	r2,-8(fp)
 80103c0:	00bfb716 	blt	zero,r2,80102a0 <__alt_data_end+0xfc0102a0>
 80103c4:	00000506 	br	80103dc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80103c8:	0001883a 	nop
 80103cc:	00000306 	br	80103dc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80103d0:	0001883a 	nop
 80103d4:	00000106 	br	80103dc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80103d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80103dc:	e0fff517 	ldw	r3,-44(fp)
 80103e0:	e0bffd17 	ldw	r2,-12(fp)
 80103e4:	18801826 	beq	r3,r2,8010448 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80103e8:	0005303a 	rdctl	r2,status
 80103ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80103f0:	e0fffb17 	ldw	r3,-20(fp)
 80103f4:	00bfff84 	movi	r2,-2
 80103f8:	1884703a 	and	r2,r3,r2
 80103fc:	1001703a 	wrctl	status,r2
  
  return context;
 8010400:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8010404:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010408:	e0bffc17 	ldw	r2,-16(fp)
 801040c:	10800817 	ldw	r2,32(r2)
 8010410:	10c00054 	ori	r3,r2,1
 8010414:	e0bffc17 	ldw	r2,-16(fp)
 8010418:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801041c:	e0bffc17 	ldw	r2,-16(fp)
 8010420:	10800017 	ldw	r2,0(r2)
 8010424:	10800104 	addi	r2,r2,4
 8010428:	1007883a 	mov	r3,r2
 801042c:	e0bffc17 	ldw	r2,-16(fp)
 8010430:	10800817 	ldw	r2,32(r2)
 8010434:	18800035 	stwio	r2,0(r3)
 8010438:	e0bffa17 	ldw	r2,-24(fp)
 801043c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010440:	e0bff917 	ldw	r2,-28(fp)
 8010444:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8010448:	e0fff517 	ldw	r3,-44(fp)
 801044c:	e0bffd17 	ldw	r2,-12(fp)
 8010450:	18800426 	beq	r3,r2,8010464 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8010454:	e0fff517 	ldw	r3,-44(fp)
 8010458:	e0bffd17 	ldw	r2,-12(fp)
 801045c:	1885c83a 	sub	r2,r3,r2
 8010460:	00000606 	br	801047c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8010464:	e0bfff17 	ldw	r2,-4(fp)
 8010468:	1090000c 	andi	r2,r2,16384
 801046c:	10000226 	beq	r2,zero,8010478 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8010470:	00bffd44 	movi	r2,-11
 8010474:	00000106 	br	801047c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8010478:	00bffec4 	movi	r2,-5
}
 801047c:	e037883a 	mov	sp,fp
 8010480:	dfc00117 	ldw	ra,4(sp)
 8010484:	df000017 	ldw	fp,0(sp)
 8010488:	dec00204 	addi	sp,sp,8
 801048c:	f800283a 	ret

08010490 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010490:	defff304 	addi	sp,sp,-52
 8010494:	dfc00c15 	stw	ra,48(sp)
 8010498:	df000b15 	stw	fp,44(sp)
 801049c:	df000b04 	addi	fp,sp,44
 80104a0:	e13ffc15 	stw	r4,-16(fp)
 80104a4:	e17ffd15 	stw	r5,-12(fp)
 80104a8:	e1bffe15 	stw	r6,-8(fp)
 80104ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80104b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80104b4:	e0bffd17 	ldw	r2,-12(fp)
 80104b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80104bc:	00003706 	br	801059c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80104c0:	e0bffc17 	ldw	r2,-16(fp)
 80104c4:	10800c17 	ldw	r2,48(r2)
 80104c8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80104cc:	e0bffc17 	ldw	r2,-16(fp)
 80104d0:	10800d17 	ldw	r2,52(r2)
 80104d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80104d8:	e0fff917 	ldw	r3,-28(fp)
 80104dc:	e0bff517 	ldw	r2,-44(fp)
 80104e0:	1880062e 	bgeu	r3,r2,80104fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80104e4:	e0fff517 	ldw	r3,-44(fp)
 80104e8:	e0bff917 	ldw	r2,-28(fp)
 80104ec:	1885c83a 	sub	r2,r3,r2
 80104f0:	10bfffc4 	addi	r2,r2,-1
 80104f4:	e0bff615 	stw	r2,-40(fp)
 80104f8:	00000b06 	br	8010528 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80104fc:	e0bff517 	ldw	r2,-44(fp)
 8010500:	10000526 	beq	r2,zero,8010518 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010504:	00c20004 	movi	r3,2048
 8010508:	e0bff917 	ldw	r2,-28(fp)
 801050c:	1885c83a 	sub	r2,r3,r2
 8010510:	e0bff615 	stw	r2,-40(fp)
 8010514:	00000406 	br	8010528 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010518:	00c1ffc4 	movi	r3,2047
 801051c:	e0bff917 	ldw	r2,-28(fp)
 8010520:	1885c83a 	sub	r2,r3,r2
 8010524:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010528:	e0bff617 	ldw	r2,-40(fp)
 801052c:	10001e26 	beq	r2,zero,80105a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8010530:	e0fffe17 	ldw	r3,-8(fp)
 8010534:	e0bff617 	ldw	r2,-40(fp)
 8010538:	1880022e 	bgeu	r3,r2,8010544 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 801053c:	e0bffe17 	ldw	r2,-8(fp)
 8010540:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8010544:	e0bffc17 	ldw	r2,-16(fp)
 8010548:	10c20e04 	addi	r3,r2,2104
 801054c:	e0bff917 	ldw	r2,-28(fp)
 8010550:	1885883a 	add	r2,r3,r2
 8010554:	e1bff617 	ldw	r6,-40(fp)
 8010558:	e17ffd17 	ldw	r5,-12(fp)
 801055c:	1009883a 	mov	r4,r2
 8010560:	8007e840 	call	8007e84 <memcpy>
      ptr   += n;
 8010564:	e0fffd17 	ldw	r3,-12(fp)
 8010568:	e0bff617 	ldw	r2,-40(fp)
 801056c:	1885883a 	add	r2,r3,r2
 8010570:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8010574:	e0fffe17 	ldw	r3,-8(fp)
 8010578:	e0bff617 	ldw	r2,-40(fp)
 801057c:	1885c83a 	sub	r2,r3,r2
 8010580:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010584:	e0fff917 	ldw	r3,-28(fp)
 8010588:	e0bff617 	ldw	r2,-40(fp)
 801058c:	1885883a 	add	r2,r3,r2
 8010590:	10c1ffcc 	andi	r3,r2,2047
 8010594:	e0bffc17 	ldw	r2,-16(fp)
 8010598:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801059c:	e0bffe17 	ldw	r2,-8(fp)
 80105a0:	00bfc716 	blt	zero,r2,80104c0 <__alt_data_end+0xfc0104c0>
 80105a4:	00000106 	br	80105ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80105a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80105ac:	0005303a 	rdctl	r2,status
 80105b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80105b4:	e0fffb17 	ldw	r3,-20(fp)
 80105b8:	00bfff84 	movi	r2,-2
 80105bc:	1884703a 	and	r2,r3,r2
 80105c0:	1001703a 	wrctl	status,r2
  
  return context;
 80105c4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80105c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80105cc:	e0bffc17 	ldw	r2,-16(fp)
 80105d0:	10800817 	ldw	r2,32(r2)
 80105d4:	10c00094 	ori	r3,r2,2
 80105d8:	e0bffc17 	ldw	r2,-16(fp)
 80105dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80105e0:	e0bffc17 	ldw	r2,-16(fp)
 80105e4:	10800017 	ldw	r2,0(r2)
 80105e8:	10800104 	addi	r2,r2,4
 80105ec:	1007883a 	mov	r3,r2
 80105f0:	e0bffc17 	ldw	r2,-16(fp)
 80105f4:	10800817 	ldw	r2,32(r2)
 80105f8:	18800035 	stwio	r2,0(r3)
 80105fc:	e0bffa17 	ldw	r2,-24(fp)
 8010600:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010604:	e0bff817 	ldw	r2,-32(fp)
 8010608:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801060c:	e0bffe17 	ldw	r2,-8(fp)
 8010610:	0080100e 	bge	zero,r2,8010654 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8010614:	e0bfff17 	ldw	r2,-4(fp)
 8010618:	1090000c 	andi	r2,r2,16384
 801061c:	1000101e 	bne	r2,zero,8010660 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8010620:	0001883a 	nop
 8010624:	e0bffc17 	ldw	r2,-16(fp)
 8010628:	10c00d17 	ldw	r3,52(r2)
 801062c:	e0bff517 	ldw	r2,-44(fp)
 8010630:	1880051e 	bne	r3,r2,8010648 <altera_avalon_jtag_uart_write+0x1b8>
 8010634:	e0bffc17 	ldw	r2,-16(fp)
 8010638:	10c00917 	ldw	r3,36(r2)
 801063c:	e0bffc17 	ldw	r2,-16(fp)
 8010640:	10800117 	ldw	r2,4(r2)
 8010644:	18bff736 	bltu	r3,r2,8010624 <__alt_data_end+0xfc010624>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010648:	e0bffc17 	ldw	r2,-16(fp)
 801064c:	10800917 	ldw	r2,36(r2)
 8010650:	1000051e 	bne	r2,zero,8010668 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8010654:	e0bffe17 	ldw	r2,-8(fp)
 8010658:	00bfd016 	blt	zero,r2,801059c <__alt_data_end+0xfc01059c>
 801065c:	00000306 	br	801066c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8010660:	0001883a 	nop
 8010664:	00000106 	br	801066c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8010668:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 801066c:	e0fffd17 	ldw	r3,-12(fp)
 8010670:	e0bff717 	ldw	r2,-36(fp)
 8010674:	18800426 	beq	r3,r2,8010688 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8010678:	e0fffd17 	ldw	r3,-12(fp)
 801067c:	e0bff717 	ldw	r2,-36(fp)
 8010680:	1885c83a 	sub	r2,r3,r2
 8010684:	00000606 	br	80106a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8010688:	e0bfff17 	ldw	r2,-4(fp)
 801068c:	1090000c 	andi	r2,r2,16384
 8010690:	10000226 	beq	r2,zero,801069c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8010694:	00bffd44 	movi	r2,-11
 8010698:	00000106 	br	80106a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801069c:	00bffec4 	movi	r2,-5
}
 80106a0:	e037883a 	mov	sp,fp
 80106a4:	dfc00117 	ldw	ra,4(sp)
 80106a8:	df000017 	ldw	fp,0(sp)
 80106ac:	dec00204 	addi	sp,sp,8
 80106b0:	f800283a 	ret

080106b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80106b4:	defff504 	addi	sp,sp,-44
 80106b8:	df000a15 	stw	fp,40(sp)
 80106bc:	df000a04 	addi	fp,sp,40
 80106c0:	e13ffc15 	stw	r4,-16(fp)
 80106c4:	e17ffd15 	stw	r5,-12(fp)
 80106c8:	e1bffe15 	stw	r6,-8(fp)
 80106cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80106d0:	e03ff615 	stw	zero,-40(fp)
 80106d4:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
 80106d8:	10003c26 	beq	r2,zero,80107cc <alt_alarm_start+0x118>
  {
    if (alarm)
 80106dc:	e0bffc17 	ldw	r2,-16(fp)
 80106e0:	10003826 	beq	r2,zero,80107c4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80106e4:	e0bffc17 	ldw	r2,-16(fp)
 80106e8:	e0fffe17 	ldw	r3,-8(fp)
 80106ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80106f0:	e0bffc17 	ldw	r2,-16(fp)
 80106f4:	e0ffff17 	ldw	r3,-4(fp)
 80106f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80106fc:	0005303a 	rdctl	r2,status
 8010700:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010704:	e0fff917 	ldw	r3,-28(fp)
 8010708:	00bfff84 	movi	r2,-2
 801070c:	1884703a 	and	r2,r3,r2
 8010710:	1001703a 	wrctl	status,r2
  
  return context;
 8010714:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8010718:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801071c:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
 8010720:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010724:	e0fffd17 	ldw	r3,-12(fp)
 8010728:	e0bff617 	ldw	r2,-40(fp)
 801072c:	1885883a 	add	r2,r3,r2
 8010730:	10c00044 	addi	r3,r2,1
 8010734:	e0bffc17 	ldw	r2,-16(fp)
 8010738:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801073c:	e0bffc17 	ldw	r2,-16(fp)
 8010740:	10c00217 	ldw	r3,8(r2)
 8010744:	e0bff617 	ldw	r2,-40(fp)
 8010748:	1880042e 	bgeu	r3,r2,801075c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 801074c:	e0bffc17 	ldw	r2,-16(fp)
 8010750:	00c00044 	movi	r3,1
 8010754:	10c00405 	stb	r3,16(r2)
 8010758:	00000206 	br	8010764 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 801075c:	e0bffc17 	ldw	r2,-16(fp)
 8010760:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010764:	e0bffc17 	ldw	r2,-16(fp)
 8010768:	d0e00e04 	addi	r3,gp,-32712
 801076c:	e0fffa15 	stw	r3,-24(fp)
 8010770:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010774:	e0bffb17 	ldw	r2,-20(fp)
 8010778:	e0fffa17 	ldw	r3,-24(fp)
 801077c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010780:	e0bffa17 	ldw	r2,-24(fp)
 8010784:	10c00017 	ldw	r3,0(r2)
 8010788:	e0bffb17 	ldw	r2,-20(fp)
 801078c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010790:	e0bffa17 	ldw	r2,-24(fp)
 8010794:	10800017 	ldw	r2,0(r2)
 8010798:	e0fffb17 	ldw	r3,-20(fp)
 801079c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80107a0:	e0bffa17 	ldw	r2,-24(fp)
 80107a4:	e0fffb17 	ldw	r3,-20(fp)
 80107a8:	10c00015 	stw	r3,0(r2)
 80107ac:	e0bff817 	ldw	r2,-32(fp)
 80107b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80107b4:	e0bff717 	ldw	r2,-36(fp)
 80107b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80107bc:	0005883a 	mov	r2,zero
 80107c0:	00000306 	br	80107d0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80107c4:	00bffa84 	movi	r2,-22
 80107c8:	00000106 	br	80107d0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80107cc:	00bfde84 	movi	r2,-134
  }
}
 80107d0:	e037883a 	mov	sp,fp
 80107d4:	df000017 	ldw	fp,0(sp)
 80107d8:	dec00104 	addi	sp,sp,4
 80107dc:	f800283a 	ret

080107e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80107e0:	defffa04 	addi	sp,sp,-24
 80107e4:	dfc00515 	stw	ra,20(sp)
 80107e8:	df000415 	stw	fp,16(sp)
 80107ec:	df000404 	addi	fp,sp,16
 80107f0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80107f4:	00800244 	movi	r2,9
 80107f8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80107fc:	014003f4 	movhi	r5,15
 8010800:	29509004 	addi	r5,r5,16960
 8010804:	e13ffd17 	ldw	r4,-12(fp)
 8010808:	800c9040 	call	800c904 <__mulsi3>
 801080c:	100b883a 	mov	r5,r2
 8010810:	0100bef4 	movhi	r4,763
 8010814:	213c2004 	addi	r4,r4,-3968
 8010818:	800c8480 	call	800c848 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 801081c:	100b883a 	mov	r5,r2
 8010820:	01200034 	movhi	r4,32768
 8010824:	213fffc4 	addi	r4,r4,-1
 8010828:	800c8480 	call	800c848 <__udivsi3>
 801082c:	100b883a 	mov	r5,r2
 8010830:	e13fff17 	ldw	r4,-4(fp)
 8010834:	800c8480 	call	800c848 <__udivsi3>
 8010838:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801083c:	e0bffe17 	ldw	r2,-8(fp)
 8010840:	10002a26 	beq	r2,zero,80108ec <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010844:	e03ffc15 	stw	zero,-16(fp)
 8010848:	00001706 	br	80108a8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801084c:	00a00034 	movhi	r2,32768
 8010850:	10bfffc4 	addi	r2,r2,-1
 8010854:	10bfffc4 	addi	r2,r2,-1
 8010858:	103ffe1e 	bne	r2,zero,8010854 <__alt_data_end+0xfc010854>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801085c:	014003f4 	movhi	r5,15
 8010860:	29509004 	addi	r5,r5,16960
 8010864:	e13ffd17 	ldw	r4,-12(fp)
 8010868:	800c9040 	call	800c904 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801086c:	100b883a 	mov	r5,r2
 8010870:	0100bef4 	movhi	r4,763
 8010874:	213c2004 	addi	r4,r4,-3968
 8010878:	800c8480 	call	800c848 <__udivsi3>
 801087c:	100b883a 	mov	r5,r2
 8010880:	01200034 	movhi	r4,32768
 8010884:	213fffc4 	addi	r4,r4,-1
 8010888:	800c8480 	call	800c848 <__udivsi3>
 801088c:	1007883a 	mov	r3,r2
 8010890:	e0bfff17 	ldw	r2,-4(fp)
 8010894:	10c5c83a 	sub	r2,r2,r3
 8010898:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801089c:	e0bffc17 	ldw	r2,-16(fp)
 80108a0:	10800044 	addi	r2,r2,1
 80108a4:	e0bffc15 	stw	r2,-16(fp)
 80108a8:	e0fffc17 	ldw	r3,-16(fp)
 80108ac:	e0bffe17 	ldw	r2,-8(fp)
 80108b0:	18bfe616 	blt	r3,r2,801084c <__alt_data_end+0xfc01084c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80108b4:	014003f4 	movhi	r5,15
 80108b8:	29509004 	addi	r5,r5,16960
 80108bc:	e13ffd17 	ldw	r4,-12(fp)
 80108c0:	800c9040 	call	800c904 <__mulsi3>
 80108c4:	100b883a 	mov	r5,r2
 80108c8:	0100bef4 	movhi	r4,763
 80108cc:	213c2004 	addi	r4,r4,-3968
 80108d0:	800c8480 	call	800c848 <__udivsi3>
 80108d4:	e17fff17 	ldw	r5,-4(fp)
 80108d8:	1009883a 	mov	r4,r2
 80108dc:	800c9040 	call	800c904 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80108e0:	10bfffc4 	addi	r2,r2,-1
 80108e4:	103ffe1e 	bne	r2,zero,80108e0 <__alt_data_end+0xfc0108e0>
 80108e8:	00000d06 	br	8010920 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80108ec:	014003f4 	movhi	r5,15
 80108f0:	29509004 	addi	r5,r5,16960
 80108f4:	e13ffd17 	ldw	r4,-12(fp)
 80108f8:	800c9040 	call	800c904 <__mulsi3>
 80108fc:	100b883a 	mov	r5,r2
 8010900:	0100bef4 	movhi	r4,763
 8010904:	213c2004 	addi	r4,r4,-3968
 8010908:	800c8480 	call	800c848 <__udivsi3>
 801090c:	e17fff17 	ldw	r5,-4(fp)
 8010910:	1009883a 	mov	r4,r2
 8010914:	800c9040 	call	800c904 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010918:	10bfffc4 	addi	r2,r2,-1
 801091c:	00bffe16 	blt	zero,r2,8010918 <__alt_data_end+0xfc010918>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8010920:	0005883a 	mov	r2,zero
}
 8010924:	e037883a 	mov	sp,fp
 8010928:	dfc00117 	ldw	ra,4(sp)
 801092c:	df000017 	ldw	fp,0(sp)
 8010930:	dec00204 	addi	sp,sp,8
 8010934:	f800283a 	ret

08010938 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010938:	deffff04 	addi	sp,sp,-4
 801093c:	df000015 	stw	fp,0(sp)
 8010940:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010944:	0001883a 	nop
 8010948:	e037883a 	mov	sp,fp
 801094c:	df000017 	ldw	fp,0(sp)
 8010950:	dec00104 	addi	sp,sp,4
 8010954:	f800283a 	ret

08010958 <alt_get_errno>:
 8010958:	defffe04 	addi	sp,sp,-8
 801095c:	dfc00115 	stw	ra,4(sp)
 8010960:	df000015 	stw	fp,0(sp)
 8010964:	d839883a 	mov	fp,sp
 8010968:	d0a00b17 	ldw	r2,-32724(gp)
 801096c:	10000326 	beq	r2,zero,801097c <alt_get_errno+0x24>
 8010970:	d0a00b17 	ldw	r2,-32724(gp)
 8010974:	103ee83a 	callr	r2
 8010978:	00000106 	br	8010980 <alt_get_errno+0x28>
 801097c:	d0a6d204 	addi	r2,gp,-25784
 8010980:	e037883a 	mov	sp,fp
 8010984:	dfc00117 	ldw	ra,4(sp)
 8010988:	df000017 	ldw	fp,0(sp)
 801098c:	dec00204 	addi	sp,sp,8
 8010990:	f800283a 	ret

08010994 <alt_dev_llist_insert>:
 8010994:	defffa04 	addi	sp,sp,-24
 8010998:	dfc00515 	stw	ra,20(sp)
 801099c:	df000415 	stw	fp,16(sp)
 80109a0:	df000404 	addi	fp,sp,16
 80109a4:	e13ffe15 	stw	r4,-8(fp)
 80109a8:	e17fff15 	stw	r5,-4(fp)
 80109ac:	e0bffe17 	ldw	r2,-8(fp)
 80109b0:	10000326 	beq	r2,zero,80109c0 <alt_dev_llist_insert+0x2c>
 80109b4:	e0bffe17 	ldw	r2,-8(fp)
 80109b8:	10800217 	ldw	r2,8(r2)
 80109bc:	1000061e 	bne	r2,zero,80109d8 <alt_dev_llist_insert+0x44>
 80109c0:	80109580 	call	8010958 <alt_get_errno>
 80109c4:	1007883a 	mov	r3,r2
 80109c8:	00800584 	movi	r2,22
 80109cc:	18800015 	stw	r2,0(r3)
 80109d0:	00bffa84 	movi	r2,-22
 80109d4:	00001306 	br	8010a24 <alt_dev_llist_insert+0x90>
 80109d8:	e0bffe17 	ldw	r2,-8(fp)
 80109dc:	e0ffff17 	ldw	r3,-4(fp)
 80109e0:	e0fffc15 	stw	r3,-16(fp)
 80109e4:	e0bffd15 	stw	r2,-12(fp)
 80109e8:	e0bffd17 	ldw	r2,-12(fp)
 80109ec:	e0fffc17 	ldw	r3,-16(fp)
 80109f0:	10c00115 	stw	r3,4(r2)
 80109f4:	e0bffc17 	ldw	r2,-16(fp)
 80109f8:	10c00017 	ldw	r3,0(r2)
 80109fc:	e0bffd17 	ldw	r2,-12(fp)
 8010a00:	10c00015 	stw	r3,0(r2)
 8010a04:	e0bffc17 	ldw	r2,-16(fp)
 8010a08:	10800017 	ldw	r2,0(r2)
 8010a0c:	e0fffd17 	ldw	r3,-12(fp)
 8010a10:	10c00115 	stw	r3,4(r2)
 8010a14:	e0bffc17 	ldw	r2,-16(fp)
 8010a18:	e0fffd17 	ldw	r3,-12(fp)
 8010a1c:	10c00015 	stw	r3,0(r2)
 8010a20:	0005883a 	mov	r2,zero
 8010a24:	e037883a 	mov	sp,fp
 8010a28:	dfc00117 	ldw	ra,4(sp)
 8010a2c:	df000017 	ldw	fp,0(sp)
 8010a30:	dec00204 	addi	sp,sp,8
 8010a34:	f800283a 	ret

08010a38 <_do_ctors>:
 8010a38:	defffd04 	addi	sp,sp,-12
 8010a3c:	dfc00215 	stw	ra,8(sp)
 8010a40:	df000115 	stw	fp,4(sp)
 8010a44:	df000104 	addi	fp,sp,4
 8010a48:	00820074 	movhi	r2,2049
 8010a4c:	10867b04 	addi	r2,r2,6636
 8010a50:	e0bfff15 	stw	r2,-4(fp)
 8010a54:	00000606 	br	8010a70 <_do_ctors+0x38>
 8010a58:	e0bfff17 	ldw	r2,-4(fp)
 8010a5c:	10800017 	ldw	r2,0(r2)
 8010a60:	103ee83a 	callr	r2
 8010a64:	e0bfff17 	ldw	r2,-4(fp)
 8010a68:	10bfff04 	addi	r2,r2,-4
 8010a6c:	e0bfff15 	stw	r2,-4(fp)
 8010a70:	e0ffff17 	ldw	r3,-4(fp)
 8010a74:	00820074 	movhi	r2,2049
 8010a78:	10867c04 	addi	r2,r2,6640
 8010a7c:	18bff62e 	bgeu	r3,r2,8010a58 <__alt_data_end+0xfc010a58>
 8010a80:	0001883a 	nop
 8010a84:	e037883a 	mov	sp,fp
 8010a88:	dfc00117 	ldw	ra,4(sp)
 8010a8c:	df000017 	ldw	fp,0(sp)
 8010a90:	dec00204 	addi	sp,sp,8
 8010a94:	f800283a 	ret

08010a98 <_do_dtors>:
 8010a98:	defffd04 	addi	sp,sp,-12
 8010a9c:	dfc00215 	stw	ra,8(sp)
 8010aa0:	df000115 	stw	fp,4(sp)
 8010aa4:	df000104 	addi	fp,sp,4
 8010aa8:	00820074 	movhi	r2,2049
 8010aac:	10867b04 	addi	r2,r2,6636
 8010ab0:	e0bfff15 	stw	r2,-4(fp)
 8010ab4:	00000606 	br	8010ad0 <_do_dtors+0x38>
 8010ab8:	e0bfff17 	ldw	r2,-4(fp)
 8010abc:	10800017 	ldw	r2,0(r2)
 8010ac0:	103ee83a 	callr	r2
 8010ac4:	e0bfff17 	ldw	r2,-4(fp)
 8010ac8:	10bfff04 	addi	r2,r2,-4
 8010acc:	e0bfff15 	stw	r2,-4(fp)
 8010ad0:	e0ffff17 	ldw	r3,-4(fp)
 8010ad4:	00820074 	movhi	r2,2049
 8010ad8:	10867c04 	addi	r2,r2,6640
 8010adc:	18bff62e 	bgeu	r3,r2,8010ab8 <__alt_data_end+0xfc010ab8>
 8010ae0:	0001883a 	nop
 8010ae4:	e037883a 	mov	sp,fp
 8010ae8:	dfc00117 	ldw	ra,4(sp)
 8010aec:	df000017 	ldw	fp,0(sp)
 8010af0:	dec00204 	addi	sp,sp,8
 8010af4:	f800283a 	ret

08010af8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010af8:	deffff04 	addi	sp,sp,-4
 8010afc:	df000015 	stw	fp,0(sp)
 8010b00:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8010b04:	0001883a 	nop
 8010b08:	e037883a 	mov	sp,fp
 8010b0c:	df000017 	ldw	fp,0(sp)
 8010b10:	dec00104 	addi	sp,sp,4
 8010b14:	f800283a 	ret

08010b18 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010b18:	defff904 	addi	sp,sp,-28
 8010b1c:	dfc00615 	stw	ra,24(sp)
 8010b20:	df000515 	stw	fp,20(sp)
 8010b24:	df000504 	addi	fp,sp,20
 8010b28:	e13ffc15 	stw	r4,-16(fp)
 8010b2c:	e17ffd15 	stw	r5,-12(fp)
 8010b30:	e1bffe15 	stw	r6,-8(fp)
 8010b34:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8010b38:	e0800217 	ldw	r2,8(fp)
 8010b3c:	d8800015 	stw	r2,0(sp)
 8010b40:	e1ffff17 	ldw	r7,-4(fp)
 8010b44:	e1bffe17 	ldw	r6,-8(fp)
 8010b48:	e17ffd17 	ldw	r5,-12(fp)
 8010b4c:	e13ffc17 	ldw	r4,-16(fp)
 8010b50:	8010cc80 	call	8010cc8 <alt_iic_isr_register>
}  
 8010b54:	e037883a 	mov	sp,fp
 8010b58:	dfc00117 	ldw	ra,4(sp)
 8010b5c:	df000017 	ldw	fp,0(sp)
 8010b60:	dec00204 	addi	sp,sp,8
 8010b64:	f800283a 	ret

08010b68 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010b68:	defff904 	addi	sp,sp,-28
 8010b6c:	df000615 	stw	fp,24(sp)
 8010b70:	df000604 	addi	fp,sp,24
 8010b74:	e13ffe15 	stw	r4,-8(fp)
 8010b78:	e17fff15 	stw	r5,-4(fp)
 8010b7c:	e0bfff17 	ldw	r2,-4(fp)
 8010b80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010b84:	0005303a 	rdctl	r2,status
 8010b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010b8c:	e0fffb17 	ldw	r3,-20(fp)
 8010b90:	00bfff84 	movi	r2,-2
 8010b94:	1884703a 	and	r2,r3,r2
 8010b98:	1001703a 	wrctl	status,r2
  
  return context;
 8010b9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010ba0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010ba4:	00c00044 	movi	r3,1
 8010ba8:	e0bffa17 	ldw	r2,-24(fp)
 8010bac:	1884983a 	sll	r2,r3,r2
 8010bb0:	1007883a 	mov	r3,r2
 8010bb4:	d0a6d617 	ldw	r2,-25768(gp)
 8010bb8:	1884b03a 	or	r2,r3,r2
 8010bbc:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010bc0:	d0a6d617 	ldw	r2,-25768(gp)
 8010bc4:	100170fa 	wrctl	ienable,r2
 8010bc8:	e0bffc17 	ldw	r2,-16(fp)
 8010bcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010bd0:	e0bffd17 	ldw	r2,-12(fp)
 8010bd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010bd8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8010bdc:	0001883a 	nop
}
 8010be0:	e037883a 	mov	sp,fp
 8010be4:	df000017 	ldw	fp,0(sp)
 8010be8:	dec00104 	addi	sp,sp,4
 8010bec:	f800283a 	ret

08010bf0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010bf0:	defff904 	addi	sp,sp,-28
 8010bf4:	df000615 	stw	fp,24(sp)
 8010bf8:	df000604 	addi	fp,sp,24
 8010bfc:	e13ffe15 	stw	r4,-8(fp)
 8010c00:	e17fff15 	stw	r5,-4(fp)
 8010c04:	e0bfff17 	ldw	r2,-4(fp)
 8010c08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010c0c:	0005303a 	rdctl	r2,status
 8010c10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010c14:	e0fffb17 	ldw	r3,-20(fp)
 8010c18:	00bfff84 	movi	r2,-2
 8010c1c:	1884703a 	and	r2,r3,r2
 8010c20:	1001703a 	wrctl	status,r2
  
  return context;
 8010c24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010c28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8010c2c:	00c00044 	movi	r3,1
 8010c30:	e0bffa17 	ldw	r2,-24(fp)
 8010c34:	1884983a 	sll	r2,r3,r2
 8010c38:	0084303a 	nor	r2,zero,r2
 8010c3c:	1007883a 	mov	r3,r2
 8010c40:	d0a6d617 	ldw	r2,-25768(gp)
 8010c44:	1884703a 	and	r2,r3,r2
 8010c48:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010c4c:	d0a6d617 	ldw	r2,-25768(gp)
 8010c50:	100170fa 	wrctl	ienable,r2
 8010c54:	e0bffc17 	ldw	r2,-16(fp)
 8010c58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010c5c:	e0bffd17 	ldw	r2,-12(fp)
 8010c60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010c64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010c68:	0001883a 	nop
}
 8010c6c:	e037883a 	mov	sp,fp
 8010c70:	df000017 	ldw	fp,0(sp)
 8010c74:	dec00104 	addi	sp,sp,4
 8010c78:	f800283a 	ret

08010c7c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010c7c:	defffc04 	addi	sp,sp,-16
 8010c80:	df000315 	stw	fp,12(sp)
 8010c84:	df000304 	addi	fp,sp,12
 8010c88:	e13ffe15 	stw	r4,-8(fp)
 8010c8c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010c90:	000530fa 	rdctl	r2,ienable
 8010c94:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010c98:	00c00044 	movi	r3,1
 8010c9c:	e0bfff17 	ldw	r2,-4(fp)
 8010ca0:	1884983a 	sll	r2,r3,r2
 8010ca4:	1007883a 	mov	r3,r2
 8010ca8:	e0bffd17 	ldw	r2,-12(fp)
 8010cac:	1884703a 	and	r2,r3,r2
 8010cb0:	1004c03a 	cmpne	r2,r2,zero
 8010cb4:	10803fcc 	andi	r2,r2,255
}
 8010cb8:	e037883a 	mov	sp,fp
 8010cbc:	df000017 	ldw	fp,0(sp)
 8010cc0:	dec00104 	addi	sp,sp,4
 8010cc4:	f800283a 	ret

08010cc8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010cc8:	defff504 	addi	sp,sp,-44
 8010ccc:	dfc00a15 	stw	ra,40(sp)
 8010cd0:	df000915 	stw	fp,36(sp)
 8010cd4:	df000904 	addi	fp,sp,36
 8010cd8:	e13ffc15 	stw	r4,-16(fp)
 8010cdc:	e17ffd15 	stw	r5,-12(fp)
 8010ce0:	e1bffe15 	stw	r6,-8(fp)
 8010ce4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010ce8:	00bffa84 	movi	r2,-22
 8010cec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010cf0:	e0bffd17 	ldw	r2,-12(fp)
 8010cf4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010cf8:	e0bff817 	ldw	r2,-32(fp)
 8010cfc:	10800808 	cmpgei	r2,r2,32
 8010d00:	1000271e 	bne	r2,zero,8010da0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010d04:	0005303a 	rdctl	r2,status
 8010d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010d0c:	e0fffb17 	ldw	r3,-20(fp)
 8010d10:	00bfff84 	movi	r2,-2
 8010d14:	1884703a 	and	r2,r3,r2
 8010d18:	1001703a 	wrctl	status,r2
  
  return context;
 8010d1c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010d20:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8010d24:	00820074 	movhi	r2,2049
 8010d28:	1096a904 	addi	r2,r2,23204
 8010d2c:	e0fff817 	ldw	r3,-32(fp)
 8010d30:	180690fa 	slli	r3,r3,3
 8010d34:	10c5883a 	add	r2,r2,r3
 8010d38:	e0fffe17 	ldw	r3,-8(fp)
 8010d3c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010d40:	00820074 	movhi	r2,2049
 8010d44:	1096a904 	addi	r2,r2,23204
 8010d48:	e0fff817 	ldw	r3,-32(fp)
 8010d4c:	180690fa 	slli	r3,r3,3
 8010d50:	10c5883a 	add	r2,r2,r3
 8010d54:	10800104 	addi	r2,r2,4
 8010d58:	e0ffff17 	ldw	r3,-4(fp)
 8010d5c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010d60:	e0bffe17 	ldw	r2,-8(fp)
 8010d64:	10000526 	beq	r2,zero,8010d7c <alt_iic_isr_register+0xb4>
 8010d68:	e0bff817 	ldw	r2,-32(fp)
 8010d6c:	100b883a 	mov	r5,r2
 8010d70:	e13ffc17 	ldw	r4,-16(fp)
 8010d74:	8010b680 	call	8010b68 <alt_ic_irq_enable>
 8010d78:	00000406 	br	8010d8c <alt_iic_isr_register+0xc4>
 8010d7c:	e0bff817 	ldw	r2,-32(fp)
 8010d80:	100b883a 	mov	r5,r2
 8010d84:	e13ffc17 	ldw	r4,-16(fp)
 8010d88:	8010bf00 	call	8010bf0 <alt_ic_irq_disable>
 8010d8c:	e0bff715 	stw	r2,-36(fp)
 8010d90:	e0bffa17 	ldw	r2,-24(fp)
 8010d94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010d98:	e0bff917 	ldw	r2,-28(fp)
 8010d9c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010da0:	e0bff717 	ldw	r2,-36(fp)
}
 8010da4:	e037883a 	mov	sp,fp
 8010da8:	dfc00117 	ldw	ra,4(sp)
 8010dac:	df000017 	ldw	fp,0(sp)
 8010db0:	dec00204 	addi	sp,sp,8
 8010db4:	f800283a 	ret

08010db8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010db8:	defff804 	addi	sp,sp,-32
 8010dbc:	dfc00715 	stw	ra,28(sp)
 8010dc0:	df000615 	stw	fp,24(sp)
 8010dc4:	dc000515 	stw	r16,20(sp)
 8010dc8:	df000604 	addi	fp,sp,24
 8010dcc:	e13ffb15 	stw	r4,-20(fp)
 8010dd0:	e17ffc15 	stw	r5,-16(fp)
 8010dd4:	e1bffd15 	stw	r6,-12(fp)
 8010dd8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8010ddc:	e1bffe17 	ldw	r6,-8(fp)
 8010de0:	e17ffd17 	ldw	r5,-12(fp)
 8010de4:	e13ffc17 	ldw	r4,-16(fp)
 8010de8:	80110400 	call	8011040 <open>
 8010dec:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8010df0:	e0bffa17 	ldw	r2,-24(fp)
 8010df4:	10002216 	blt	r2,zero,8010e80 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010df8:	04020074 	movhi	r16,2049
 8010dfc:	840b4d04 	addi	r16,r16,11572
 8010e00:	e0bffa17 	ldw	r2,-24(fp)
 8010e04:	01400304 	movi	r5,12
 8010e08:	1009883a 	mov	r4,r2
 8010e0c:	800c9040 	call	800c904 <__mulsi3>
 8010e10:	8085883a 	add	r2,r16,r2
 8010e14:	10c00017 	ldw	r3,0(r2)
 8010e18:	e0bffb17 	ldw	r2,-20(fp)
 8010e1c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010e20:	04020074 	movhi	r16,2049
 8010e24:	840b4d04 	addi	r16,r16,11572
 8010e28:	e0bffa17 	ldw	r2,-24(fp)
 8010e2c:	01400304 	movi	r5,12
 8010e30:	1009883a 	mov	r4,r2
 8010e34:	800c9040 	call	800c904 <__mulsi3>
 8010e38:	8085883a 	add	r2,r16,r2
 8010e3c:	10800104 	addi	r2,r2,4
 8010e40:	10c00017 	ldw	r3,0(r2)
 8010e44:	e0bffb17 	ldw	r2,-20(fp)
 8010e48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010e4c:	04020074 	movhi	r16,2049
 8010e50:	840b4d04 	addi	r16,r16,11572
 8010e54:	e0bffa17 	ldw	r2,-24(fp)
 8010e58:	01400304 	movi	r5,12
 8010e5c:	1009883a 	mov	r4,r2
 8010e60:	800c9040 	call	800c904 <__mulsi3>
 8010e64:	8085883a 	add	r2,r16,r2
 8010e68:	10800204 	addi	r2,r2,8
 8010e6c:	10c00017 	ldw	r3,0(r2)
 8010e70:	e0bffb17 	ldw	r2,-20(fp)
 8010e74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010e78:	e13ffa17 	ldw	r4,-24(fp)
 8010e7c:	800f8f40 	call	800f8f4 <alt_release_fd>
  }
} 
 8010e80:	0001883a 	nop
 8010e84:	e6ffff04 	addi	sp,fp,-4
 8010e88:	dfc00217 	ldw	ra,8(sp)
 8010e8c:	df000117 	ldw	fp,4(sp)
 8010e90:	dc000017 	ldw	r16,0(sp)
 8010e94:	dec00304 	addi	sp,sp,12
 8010e98:	f800283a 	ret

08010e9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8010e9c:	defffb04 	addi	sp,sp,-20
 8010ea0:	dfc00415 	stw	ra,16(sp)
 8010ea4:	df000315 	stw	fp,12(sp)
 8010ea8:	df000304 	addi	fp,sp,12
 8010eac:	e13ffd15 	stw	r4,-12(fp)
 8010eb0:	e17ffe15 	stw	r5,-8(fp)
 8010eb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8010eb8:	01c07fc4 	movi	r7,511
 8010ebc:	01800044 	movi	r6,1
 8010ec0:	e17ffd17 	ldw	r5,-12(fp)
 8010ec4:	01020074 	movhi	r4,2049
 8010ec8:	210b5004 	addi	r4,r4,11584
 8010ecc:	8010db80 	call	8010db8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010ed0:	01c07fc4 	movi	r7,511
 8010ed4:	000d883a 	mov	r6,zero
 8010ed8:	e17ffe17 	ldw	r5,-8(fp)
 8010edc:	01020074 	movhi	r4,2049
 8010ee0:	210b4d04 	addi	r4,r4,11572
 8010ee4:	8010db80 	call	8010db8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010ee8:	01c07fc4 	movi	r7,511
 8010eec:	01800044 	movi	r6,1
 8010ef0:	e17fff17 	ldw	r5,-4(fp)
 8010ef4:	01020074 	movhi	r4,2049
 8010ef8:	210b5304 	addi	r4,r4,11596
 8010efc:	8010db80 	call	8010db8 <alt_open_fd>
}  
 8010f00:	0001883a 	nop
 8010f04:	e037883a 	mov	sp,fp
 8010f08:	dfc00117 	ldw	ra,4(sp)
 8010f0c:	df000017 	ldw	fp,0(sp)
 8010f10:	dec00204 	addi	sp,sp,8
 8010f14:	f800283a 	ret

08010f18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010f18:	defffe04 	addi	sp,sp,-8
 8010f1c:	dfc00115 	stw	ra,4(sp)
 8010f20:	df000015 	stw	fp,0(sp)
 8010f24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010f28:	d0a00b17 	ldw	r2,-32724(gp)
 8010f2c:	10000326 	beq	r2,zero,8010f3c <alt_get_errno+0x24>
 8010f30:	d0a00b17 	ldw	r2,-32724(gp)
 8010f34:	103ee83a 	callr	r2
 8010f38:	00000106 	br	8010f40 <alt_get_errno+0x28>
 8010f3c:	d0a6d204 	addi	r2,gp,-25784
}
 8010f40:	e037883a 	mov	sp,fp
 8010f44:	dfc00117 	ldw	ra,4(sp)
 8010f48:	df000017 	ldw	fp,0(sp)
 8010f4c:	dec00204 	addi	sp,sp,8
 8010f50:	f800283a 	ret

08010f54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010f54:	defffb04 	addi	sp,sp,-20
 8010f58:	dfc00415 	stw	ra,16(sp)
 8010f5c:	df000315 	stw	fp,12(sp)
 8010f60:	dc000215 	stw	r16,8(sp)
 8010f64:	df000304 	addi	fp,sp,12
 8010f68:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8010f6c:	e0bffe17 	ldw	r2,-8(fp)
 8010f70:	10800217 	ldw	r2,8(r2)
 8010f74:	10d00034 	orhi	r3,r2,16384
 8010f78:	e0bffe17 	ldw	r2,-8(fp)
 8010f7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010f80:	e03ffd15 	stw	zero,-12(fp)
 8010f84:	00002306 	br	8011014 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010f88:	04020074 	movhi	r16,2049
 8010f8c:	840b4d04 	addi	r16,r16,11572
 8010f90:	e0bffd17 	ldw	r2,-12(fp)
 8010f94:	01400304 	movi	r5,12
 8010f98:	1009883a 	mov	r4,r2
 8010f9c:	800c9040 	call	800c904 <__mulsi3>
 8010fa0:	8085883a 	add	r2,r16,r2
 8010fa4:	10c00017 	ldw	r3,0(r2)
 8010fa8:	e0bffe17 	ldw	r2,-8(fp)
 8010fac:	10800017 	ldw	r2,0(r2)
 8010fb0:	1880151e 	bne	r3,r2,8011008 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010fb4:	04020074 	movhi	r16,2049
 8010fb8:	840b4d04 	addi	r16,r16,11572
 8010fbc:	e0bffd17 	ldw	r2,-12(fp)
 8010fc0:	01400304 	movi	r5,12
 8010fc4:	1009883a 	mov	r4,r2
 8010fc8:	800c9040 	call	800c904 <__mulsi3>
 8010fcc:	8085883a 	add	r2,r16,r2
 8010fd0:	10800204 	addi	r2,r2,8
 8010fd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010fd8:	10000b0e 	bge	r2,zero,8011008 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8010fdc:	01400304 	movi	r5,12
 8010fe0:	e13ffd17 	ldw	r4,-12(fp)
 8010fe4:	800c9040 	call	800c904 <__mulsi3>
 8010fe8:	1007883a 	mov	r3,r2
 8010fec:	00820074 	movhi	r2,2049
 8010ff0:	108b4d04 	addi	r2,r2,11572
 8010ff4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010ff8:	e0bffe17 	ldw	r2,-8(fp)
 8010ffc:	18800226 	beq	r3,r2,8011008 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8011000:	00bffcc4 	movi	r2,-13
 8011004:	00000806 	br	8011028 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011008:	e0bffd17 	ldw	r2,-12(fp)
 801100c:	10800044 	addi	r2,r2,1
 8011010:	e0bffd15 	stw	r2,-12(fp)
 8011014:	d0a00a17 	ldw	r2,-32728(gp)
 8011018:	1007883a 	mov	r3,r2
 801101c:	e0bffd17 	ldw	r2,-12(fp)
 8011020:	18bfd92e 	bgeu	r3,r2,8010f88 <__alt_data_end+0xfc010f88>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8011024:	0005883a 	mov	r2,zero
}
 8011028:	e6ffff04 	addi	sp,fp,-4
 801102c:	dfc00217 	ldw	ra,8(sp)
 8011030:	df000117 	ldw	fp,4(sp)
 8011034:	dc000017 	ldw	r16,0(sp)
 8011038:	dec00304 	addi	sp,sp,12
 801103c:	f800283a 	ret

08011040 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8011040:	defff604 	addi	sp,sp,-40
 8011044:	dfc00915 	stw	ra,36(sp)
 8011048:	df000815 	stw	fp,32(sp)
 801104c:	df000804 	addi	fp,sp,32
 8011050:	e13ffd15 	stw	r4,-12(fp)
 8011054:	e17ffe15 	stw	r5,-8(fp)
 8011058:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801105c:	00bfffc4 	movi	r2,-1
 8011060:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8011064:	00bffb44 	movi	r2,-19
 8011068:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801106c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8011070:	d1600804 	addi	r5,gp,-32736
 8011074:	e13ffd17 	ldw	r4,-12(fp)
 8011078:	80113640 	call	8011364 <alt_find_dev>
 801107c:	e0bff815 	stw	r2,-32(fp)
 8011080:	e0bff817 	ldw	r2,-32(fp)
 8011084:	1000051e 	bne	r2,zero,801109c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8011088:	e13ffd17 	ldw	r4,-12(fp)
 801108c:	80113f40 	call	80113f4 <alt_find_file>
 8011090:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8011094:	00800044 	movi	r2,1
 8011098:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801109c:	e0bff817 	ldw	r2,-32(fp)
 80110a0:	10002b26 	beq	r2,zero,8011150 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80110a4:	e13ff817 	ldw	r4,-32(fp)
 80110a8:	80114fc0 	call	80114fc <alt_get_fd>
 80110ac:	e0bff915 	stw	r2,-28(fp)
 80110b0:	e0bff917 	ldw	r2,-28(fp)
 80110b4:	1000030e 	bge	r2,zero,80110c4 <open+0x84>
    {
      status = index;
 80110b8:	e0bff917 	ldw	r2,-28(fp)
 80110bc:	e0bffa15 	stw	r2,-24(fp)
 80110c0:	00002506 	br	8011158 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80110c4:	01400304 	movi	r5,12
 80110c8:	e13ff917 	ldw	r4,-28(fp)
 80110cc:	800c9040 	call	800c904 <__mulsi3>
 80110d0:	1007883a 	mov	r3,r2
 80110d4:	00820074 	movhi	r2,2049
 80110d8:	108b4d04 	addi	r2,r2,11572
 80110dc:	1885883a 	add	r2,r3,r2
 80110e0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80110e4:	e0fffe17 	ldw	r3,-8(fp)
 80110e8:	00900034 	movhi	r2,16384
 80110ec:	10bfffc4 	addi	r2,r2,-1
 80110f0:	1886703a 	and	r3,r3,r2
 80110f4:	e0bffc17 	ldw	r2,-16(fp)
 80110f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80110fc:	e0bffb17 	ldw	r2,-20(fp)
 8011100:	1000051e 	bne	r2,zero,8011118 <open+0xd8>
 8011104:	e13ffc17 	ldw	r4,-16(fp)
 8011108:	8010f540 	call	8010f54 <alt_file_locked>
 801110c:	e0bffa15 	stw	r2,-24(fp)
 8011110:	e0bffa17 	ldw	r2,-24(fp)
 8011114:	10001016 	blt	r2,zero,8011158 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8011118:	e0bff817 	ldw	r2,-32(fp)
 801111c:	10800317 	ldw	r2,12(r2)
 8011120:	10000826 	beq	r2,zero,8011144 <open+0x104>
 8011124:	e0bff817 	ldw	r2,-32(fp)
 8011128:	10800317 	ldw	r2,12(r2)
 801112c:	e1ffff17 	ldw	r7,-4(fp)
 8011130:	e1bffe17 	ldw	r6,-8(fp)
 8011134:	e17ffd17 	ldw	r5,-12(fp)
 8011138:	e13ffc17 	ldw	r4,-16(fp)
 801113c:	103ee83a 	callr	r2
 8011140:	00000106 	br	8011148 <open+0x108>
 8011144:	0005883a 	mov	r2,zero
 8011148:	e0bffa15 	stw	r2,-24(fp)
 801114c:	00000206 	br	8011158 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8011150:	00bffb44 	movi	r2,-19
 8011154:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8011158:	e0bffa17 	ldw	r2,-24(fp)
 801115c:	1000090e 	bge	r2,zero,8011184 <open+0x144>
  {
    alt_release_fd (index);  
 8011160:	e13ff917 	ldw	r4,-28(fp)
 8011164:	800f8f40 	call	800f8f4 <alt_release_fd>
    ALT_ERRNO = -status;
 8011168:	8010f180 	call	8010f18 <alt_get_errno>
 801116c:	1007883a 	mov	r3,r2
 8011170:	e0bffa17 	ldw	r2,-24(fp)
 8011174:	0085c83a 	sub	r2,zero,r2
 8011178:	18800015 	stw	r2,0(r3)
    return -1;
 801117c:	00bfffc4 	movi	r2,-1
 8011180:	00000106 	br	8011188 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8011184:	e0bff917 	ldw	r2,-28(fp)
}
 8011188:	e037883a 	mov	sp,fp
 801118c:	dfc00117 	ldw	ra,4(sp)
 8011190:	df000017 	ldw	fp,0(sp)
 8011194:	dec00204 	addi	sp,sp,8
 8011198:	f800283a 	ret

0801119c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801119c:	defffa04 	addi	sp,sp,-24
 80111a0:	df000515 	stw	fp,20(sp)
 80111a4:	df000504 	addi	fp,sp,20
 80111a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80111ac:	0005303a 	rdctl	r2,status
 80111b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80111b4:	e0fffc17 	ldw	r3,-16(fp)
 80111b8:	00bfff84 	movi	r2,-2
 80111bc:	1884703a 	and	r2,r3,r2
 80111c0:	1001703a 	wrctl	status,r2
  
  return context;
 80111c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80111c8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80111cc:	e0bfff17 	ldw	r2,-4(fp)
 80111d0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80111d4:	e0bffd17 	ldw	r2,-12(fp)
 80111d8:	10800017 	ldw	r2,0(r2)
 80111dc:	e0fffd17 	ldw	r3,-12(fp)
 80111e0:	18c00117 	ldw	r3,4(r3)
 80111e4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80111e8:	e0bffd17 	ldw	r2,-12(fp)
 80111ec:	10800117 	ldw	r2,4(r2)
 80111f0:	e0fffd17 	ldw	r3,-12(fp)
 80111f4:	18c00017 	ldw	r3,0(r3)
 80111f8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80111fc:	e0bffd17 	ldw	r2,-12(fp)
 8011200:	e0fffd17 	ldw	r3,-12(fp)
 8011204:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8011208:	e0bffd17 	ldw	r2,-12(fp)
 801120c:	e0fffd17 	ldw	r3,-12(fp)
 8011210:	10c00015 	stw	r3,0(r2)
 8011214:	e0bffb17 	ldw	r2,-20(fp)
 8011218:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801121c:	e0bffe17 	ldw	r2,-8(fp)
 8011220:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8011224:	0001883a 	nop
 8011228:	e037883a 	mov	sp,fp
 801122c:	df000017 	ldw	fp,0(sp)
 8011230:	dec00104 	addi	sp,sp,4
 8011234:	f800283a 	ret

08011238 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8011238:	defffb04 	addi	sp,sp,-20
 801123c:	dfc00415 	stw	ra,16(sp)
 8011240:	df000315 	stw	fp,12(sp)
 8011244:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8011248:	d0a00e17 	ldw	r2,-32712(gp)
 801124c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8011250:	d0a6d817 	ldw	r2,-25760(gp)
 8011254:	10800044 	addi	r2,r2,1
 8011258:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801125c:	00002e06 	br	8011318 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8011260:	e0bffd17 	ldw	r2,-12(fp)
 8011264:	10800017 	ldw	r2,0(r2)
 8011268:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801126c:	e0bffd17 	ldw	r2,-12(fp)
 8011270:	10800403 	ldbu	r2,16(r2)
 8011274:	10803fcc 	andi	r2,r2,255
 8011278:	10000426 	beq	r2,zero,801128c <alt_tick+0x54>
 801127c:	d0a6d817 	ldw	r2,-25760(gp)
 8011280:	1000021e 	bne	r2,zero,801128c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8011284:	e0bffd17 	ldw	r2,-12(fp)
 8011288:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801128c:	e0bffd17 	ldw	r2,-12(fp)
 8011290:	10800217 	ldw	r2,8(r2)
 8011294:	d0e6d817 	ldw	r3,-25760(gp)
 8011298:	18801d36 	bltu	r3,r2,8011310 <alt_tick+0xd8>
 801129c:	e0bffd17 	ldw	r2,-12(fp)
 80112a0:	10800403 	ldbu	r2,16(r2)
 80112a4:	10803fcc 	andi	r2,r2,255
 80112a8:	1000191e 	bne	r2,zero,8011310 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80112ac:	e0bffd17 	ldw	r2,-12(fp)
 80112b0:	10800317 	ldw	r2,12(r2)
 80112b4:	e0fffd17 	ldw	r3,-12(fp)
 80112b8:	18c00517 	ldw	r3,20(r3)
 80112bc:	1809883a 	mov	r4,r3
 80112c0:	103ee83a 	callr	r2
 80112c4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80112c8:	e0bfff17 	ldw	r2,-4(fp)
 80112cc:	1000031e 	bne	r2,zero,80112dc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80112d0:	e13ffd17 	ldw	r4,-12(fp)
 80112d4:	801119c0 	call	801119c <alt_alarm_stop>
 80112d8:	00000d06 	br	8011310 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80112dc:	e0bffd17 	ldw	r2,-12(fp)
 80112e0:	10c00217 	ldw	r3,8(r2)
 80112e4:	e0bfff17 	ldw	r2,-4(fp)
 80112e8:	1887883a 	add	r3,r3,r2
 80112ec:	e0bffd17 	ldw	r2,-12(fp)
 80112f0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80112f4:	e0bffd17 	ldw	r2,-12(fp)
 80112f8:	10c00217 	ldw	r3,8(r2)
 80112fc:	d0a6d817 	ldw	r2,-25760(gp)
 8011300:	1880032e 	bgeu	r3,r2,8011310 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8011304:	e0bffd17 	ldw	r2,-12(fp)
 8011308:	00c00044 	movi	r3,1
 801130c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8011310:	e0bffe17 	ldw	r2,-8(fp)
 8011314:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011318:	e0fffd17 	ldw	r3,-12(fp)
 801131c:	d0a00e04 	addi	r2,gp,-32712
 8011320:	18bfcf1e 	bne	r3,r2,8011260 <__alt_data_end+0xfc011260>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8011324:	0001883a 	nop
}
 8011328:	0001883a 	nop
 801132c:	e037883a 	mov	sp,fp
 8011330:	dfc00117 	ldw	ra,4(sp)
 8011334:	df000017 	ldw	fp,0(sp)
 8011338:	dec00204 	addi	sp,sp,8
 801133c:	f800283a 	ret

08011340 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8011340:	deffff04 	addi	sp,sp,-4
 8011344:	df000015 	stw	fp,0(sp)
 8011348:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801134c:	000170fa 	wrctl	ienable,zero
}
 8011350:	0001883a 	nop
 8011354:	e037883a 	mov	sp,fp
 8011358:	df000017 	ldw	fp,0(sp)
 801135c:	dec00104 	addi	sp,sp,4
 8011360:	f800283a 	ret

08011364 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8011364:	defffa04 	addi	sp,sp,-24
 8011368:	dfc00515 	stw	ra,20(sp)
 801136c:	df000415 	stw	fp,16(sp)
 8011370:	df000404 	addi	fp,sp,16
 8011374:	e13ffe15 	stw	r4,-8(fp)
 8011378:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801137c:	e0bfff17 	ldw	r2,-4(fp)
 8011380:	10800017 	ldw	r2,0(r2)
 8011384:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8011388:	e13ffe17 	ldw	r4,-8(fp)
 801138c:	80023d00 	call	80023d0 <strlen>
 8011390:	10800044 	addi	r2,r2,1
 8011394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011398:	00000d06 	br	80113d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801139c:	e0bffc17 	ldw	r2,-16(fp)
 80113a0:	10800217 	ldw	r2,8(r2)
 80113a4:	e0fffd17 	ldw	r3,-12(fp)
 80113a8:	180d883a 	mov	r6,r3
 80113ac:	e17ffe17 	ldw	r5,-8(fp)
 80113b0:	1009883a 	mov	r4,r2
 80113b4:	80116a80 	call	80116a8 <memcmp>
 80113b8:	1000021e 	bne	r2,zero,80113c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80113bc:	e0bffc17 	ldw	r2,-16(fp)
 80113c0:	00000706 	br	80113e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80113c4:	e0bffc17 	ldw	r2,-16(fp)
 80113c8:	10800017 	ldw	r2,0(r2)
 80113cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80113d0:	e0fffc17 	ldw	r3,-16(fp)
 80113d4:	e0bfff17 	ldw	r2,-4(fp)
 80113d8:	18bff01e 	bne	r3,r2,801139c <__alt_data_end+0xfc01139c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80113dc:	0005883a 	mov	r2,zero
}
 80113e0:	e037883a 	mov	sp,fp
 80113e4:	dfc00117 	ldw	ra,4(sp)
 80113e8:	df000017 	ldw	fp,0(sp)
 80113ec:	dec00204 	addi	sp,sp,8
 80113f0:	f800283a 	ret

080113f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80113f4:	defffb04 	addi	sp,sp,-20
 80113f8:	dfc00415 	stw	ra,16(sp)
 80113fc:	df000315 	stw	fp,12(sp)
 8011400:	df000304 	addi	fp,sp,12
 8011404:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011408:	d0a00617 	ldw	r2,-32744(gp)
 801140c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011410:	00003106 	br	80114d8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8011414:	e0bffd17 	ldw	r2,-12(fp)
 8011418:	10800217 	ldw	r2,8(r2)
 801141c:	1009883a 	mov	r4,r2
 8011420:	80023d00 	call	80023d0 <strlen>
 8011424:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8011428:	e0bffd17 	ldw	r2,-12(fp)
 801142c:	10c00217 	ldw	r3,8(r2)
 8011430:	e0bffe17 	ldw	r2,-8(fp)
 8011434:	10bfffc4 	addi	r2,r2,-1
 8011438:	1885883a 	add	r2,r3,r2
 801143c:	10800003 	ldbu	r2,0(r2)
 8011440:	10803fcc 	andi	r2,r2,255
 8011444:	1080201c 	xori	r2,r2,128
 8011448:	10bfe004 	addi	r2,r2,-128
 801144c:	10800bd8 	cmpnei	r2,r2,47
 8011450:	1000031e 	bne	r2,zero,8011460 <alt_find_file+0x6c>
    {
      len -= 1;
 8011454:	e0bffe17 	ldw	r2,-8(fp)
 8011458:	10bfffc4 	addi	r2,r2,-1
 801145c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011460:	e0bffe17 	ldw	r2,-8(fp)
 8011464:	e0ffff17 	ldw	r3,-4(fp)
 8011468:	1885883a 	add	r2,r3,r2
 801146c:	10800003 	ldbu	r2,0(r2)
 8011470:	10803fcc 	andi	r2,r2,255
 8011474:	1080201c 	xori	r2,r2,128
 8011478:	10bfe004 	addi	r2,r2,-128
 801147c:	10800be0 	cmpeqi	r2,r2,47
 8011480:	1000081e 	bne	r2,zero,80114a4 <alt_find_file+0xb0>
 8011484:	e0bffe17 	ldw	r2,-8(fp)
 8011488:	e0ffff17 	ldw	r3,-4(fp)
 801148c:	1885883a 	add	r2,r3,r2
 8011490:	10800003 	ldbu	r2,0(r2)
 8011494:	10803fcc 	andi	r2,r2,255
 8011498:	1080201c 	xori	r2,r2,128
 801149c:	10bfe004 	addi	r2,r2,-128
 80114a0:	10000a1e 	bne	r2,zero,80114cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80114a4:	e0bffd17 	ldw	r2,-12(fp)
 80114a8:	10800217 	ldw	r2,8(r2)
 80114ac:	e0fffe17 	ldw	r3,-8(fp)
 80114b0:	180d883a 	mov	r6,r3
 80114b4:	e17fff17 	ldw	r5,-4(fp)
 80114b8:	1009883a 	mov	r4,r2
 80114bc:	80116a80 	call	80116a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80114c0:	1000021e 	bne	r2,zero,80114cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80114c4:	e0bffd17 	ldw	r2,-12(fp)
 80114c8:	00000706 	br	80114e8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80114cc:	e0bffd17 	ldw	r2,-12(fp)
 80114d0:	10800017 	ldw	r2,0(r2)
 80114d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80114d8:	e0fffd17 	ldw	r3,-12(fp)
 80114dc:	d0a00604 	addi	r2,gp,-32744
 80114e0:	18bfcc1e 	bne	r3,r2,8011414 <__alt_data_end+0xfc011414>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80114e4:	0005883a 	mov	r2,zero
}
 80114e8:	e037883a 	mov	sp,fp
 80114ec:	dfc00117 	ldw	ra,4(sp)
 80114f0:	df000017 	ldw	fp,0(sp)
 80114f4:	dec00204 	addi	sp,sp,8
 80114f8:	f800283a 	ret

080114fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80114fc:	defffa04 	addi	sp,sp,-24
 8011500:	dfc00515 	stw	ra,20(sp)
 8011504:	df000415 	stw	fp,16(sp)
 8011508:	dc000315 	stw	r16,12(sp)
 801150c:	df000404 	addi	fp,sp,16
 8011510:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011514:	00bffa04 	movi	r2,-24
 8011518:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801151c:	e03ffc15 	stw	zero,-16(fp)
 8011520:	00001d06 	br	8011598 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8011524:	04020074 	movhi	r16,2049
 8011528:	840b4d04 	addi	r16,r16,11572
 801152c:	e0bffc17 	ldw	r2,-16(fp)
 8011530:	01400304 	movi	r5,12
 8011534:	1009883a 	mov	r4,r2
 8011538:	800c9040 	call	800c904 <__mulsi3>
 801153c:	8085883a 	add	r2,r16,r2
 8011540:	10800017 	ldw	r2,0(r2)
 8011544:	1000111e 	bne	r2,zero,801158c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8011548:	04020074 	movhi	r16,2049
 801154c:	840b4d04 	addi	r16,r16,11572
 8011550:	e0bffc17 	ldw	r2,-16(fp)
 8011554:	01400304 	movi	r5,12
 8011558:	1009883a 	mov	r4,r2
 801155c:	800c9040 	call	800c904 <__mulsi3>
 8011560:	8085883a 	add	r2,r16,r2
 8011564:	e0fffe17 	ldw	r3,-8(fp)
 8011568:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801156c:	d0e00a17 	ldw	r3,-32728(gp)
 8011570:	e0bffc17 	ldw	r2,-16(fp)
 8011574:	1880020e 	bge	r3,r2,8011580 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8011578:	e0bffc17 	ldw	r2,-16(fp)
 801157c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 8011580:	e0bffc17 	ldw	r2,-16(fp)
 8011584:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8011588:	00000606 	br	80115a4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801158c:	e0bffc17 	ldw	r2,-16(fp)
 8011590:	10800044 	addi	r2,r2,1
 8011594:	e0bffc15 	stw	r2,-16(fp)
 8011598:	e0bffc17 	ldw	r2,-16(fp)
 801159c:	10800810 	cmplti	r2,r2,32
 80115a0:	103fe01e 	bne	r2,zero,8011524 <__alt_data_end+0xfc011524>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80115a4:	e0bffd17 	ldw	r2,-12(fp)
}
 80115a8:	e6ffff04 	addi	sp,fp,-4
 80115ac:	dfc00217 	ldw	ra,8(sp)
 80115b0:	df000117 	ldw	fp,4(sp)
 80115b4:	dc000017 	ldw	r16,0(sp)
 80115b8:	dec00304 	addi	sp,sp,12
 80115bc:	f800283a 	ret

080115c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80115c0:	defffe04 	addi	sp,sp,-8
 80115c4:	df000115 	stw	fp,4(sp)
 80115c8:	df000104 	addi	fp,sp,4
 80115cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80115d0:	e0bfff17 	ldw	r2,-4(fp)
 80115d4:	10bffe84 	addi	r2,r2,-6
 80115d8:	10c00428 	cmpgeui	r3,r2,16
 80115dc:	18001a1e 	bne	r3,zero,8011648 <alt_exception_cause_generated_bad_addr+0x88>
 80115e0:	100690ba 	slli	r3,r2,2
 80115e4:	00820074 	movhi	r2,2049
 80115e8:	10857e04 	addi	r2,r2,5624
 80115ec:	1885883a 	add	r2,r3,r2
 80115f0:	10800017 	ldw	r2,0(r2)
 80115f4:	1000683a 	jmp	r2
 80115f8:	08011638 	rdprs	zero,at,1112
 80115fc:	08011638 	rdprs	zero,at,1112
 8011600:	08011648 	cmpgei	zero,at,1113
 8011604:	08011648 	cmpgei	zero,at,1113
 8011608:	08011648 	cmpgei	zero,at,1113
 801160c:	08011638 	rdprs	zero,at,1112
 8011610:	08011640 	call	801164 <__alt_mem_onchip_memory2_0+0x801164>
 8011614:	08011648 	cmpgei	zero,at,1113
 8011618:	08011638 	rdprs	zero,at,1112
 801161c:	08011638 	rdprs	zero,at,1112
 8011620:	08011648 	cmpgei	zero,at,1113
 8011624:	08011638 	rdprs	zero,at,1112
 8011628:	08011640 	call	801164 <__alt_mem_onchip_memory2_0+0x801164>
 801162c:	08011648 	cmpgei	zero,at,1113
 8011630:	08011648 	cmpgei	zero,at,1113
 8011634:	08011638 	rdprs	zero,at,1112
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8011638:	00800044 	movi	r2,1
 801163c:	00000306 	br	801164c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8011640:	0005883a 	mov	r2,zero
 8011644:	00000106 	br	801164c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8011648:	0005883a 	mov	r2,zero
  }
}
 801164c:	e037883a 	mov	sp,fp
 8011650:	df000017 	ldw	fp,0(sp)
 8011654:	dec00104 	addi	sp,sp,4
 8011658:	f800283a 	ret

0801165c <atexit>:
 801165c:	200b883a 	mov	r5,r4
 8011660:	000f883a 	mov	r7,zero
 8011664:	000d883a 	mov	r6,zero
 8011668:	0009883a 	mov	r4,zero
 801166c:	80117241 	jmpi	8011724 <__register_exitproc>

08011670 <exit>:
 8011670:	defffe04 	addi	sp,sp,-8
 8011674:	000b883a 	mov	r5,zero
 8011678:	dc000015 	stw	r16,0(sp)
 801167c:	dfc00115 	stw	ra,4(sp)
 8011680:	2021883a 	mov	r16,r4
 8011684:	801183c0 	call	801183c <__call_exitprocs>
 8011688:	00820074 	movhi	r2,2049
 801168c:	108fc504 	addi	r2,r2,16148
 8011690:	11000017 	ldw	r4,0(r2)
 8011694:	20800f17 	ldw	r2,60(r4)
 8011698:	10000126 	beq	r2,zero,80116a0 <exit+0x30>
 801169c:	103ee83a 	callr	r2
 80116a0:	8009883a 	mov	r4,r16
 80116a4:	80119bc0 	call	80119bc <_exit>

080116a8 <memcmp>:
 80116a8:	01c000c4 	movi	r7,3
 80116ac:	3980192e 	bgeu	r7,r6,8011714 <memcmp+0x6c>
 80116b0:	2144b03a 	or	r2,r4,r5
 80116b4:	11c4703a 	and	r2,r2,r7
 80116b8:	10000f26 	beq	r2,zero,80116f8 <memcmp+0x50>
 80116bc:	20800003 	ldbu	r2,0(r4)
 80116c0:	28c00003 	ldbu	r3,0(r5)
 80116c4:	10c0151e 	bne	r2,r3,801171c <memcmp+0x74>
 80116c8:	31bfff84 	addi	r6,r6,-2
 80116cc:	01ffffc4 	movi	r7,-1
 80116d0:	00000406 	br	80116e4 <memcmp+0x3c>
 80116d4:	20800003 	ldbu	r2,0(r4)
 80116d8:	28c00003 	ldbu	r3,0(r5)
 80116dc:	31bfffc4 	addi	r6,r6,-1
 80116e0:	10c00e1e 	bne	r2,r3,801171c <memcmp+0x74>
 80116e4:	21000044 	addi	r4,r4,1
 80116e8:	29400044 	addi	r5,r5,1
 80116ec:	31fff91e 	bne	r6,r7,80116d4 <__alt_data_end+0xfc0116d4>
 80116f0:	0005883a 	mov	r2,zero
 80116f4:	f800283a 	ret
 80116f8:	20c00017 	ldw	r3,0(r4)
 80116fc:	28800017 	ldw	r2,0(r5)
 8011700:	18bfee1e 	bne	r3,r2,80116bc <__alt_data_end+0xfc0116bc>
 8011704:	31bfff04 	addi	r6,r6,-4
 8011708:	21000104 	addi	r4,r4,4
 801170c:	29400104 	addi	r5,r5,4
 8011710:	39bff936 	bltu	r7,r6,80116f8 <__alt_data_end+0xfc0116f8>
 8011714:	303fe91e 	bne	r6,zero,80116bc <__alt_data_end+0xfc0116bc>
 8011718:	003ff506 	br	80116f0 <__alt_data_end+0xfc0116f0>
 801171c:	10c5c83a 	sub	r2,r2,r3
 8011720:	f800283a 	ret

08011724 <__register_exitproc>:
 8011724:	defffa04 	addi	sp,sp,-24
 8011728:	dc000315 	stw	r16,12(sp)
 801172c:	04020074 	movhi	r16,2049
 8011730:	840fc504 	addi	r16,r16,16148
 8011734:	80c00017 	ldw	r3,0(r16)
 8011738:	dc400415 	stw	r17,16(sp)
 801173c:	dfc00515 	stw	ra,20(sp)
 8011740:	18805217 	ldw	r2,328(r3)
 8011744:	2023883a 	mov	r17,r4
 8011748:	10003726 	beq	r2,zero,8011828 <__register_exitproc+0x104>
 801174c:	10c00117 	ldw	r3,4(r2)
 8011750:	010007c4 	movi	r4,31
 8011754:	20c00e16 	blt	r4,r3,8011790 <__register_exitproc+0x6c>
 8011758:	1a000044 	addi	r8,r3,1
 801175c:	8800221e 	bne	r17,zero,80117e8 <__register_exitproc+0xc4>
 8011760:	18c00084 	addi	r3,r3,2
 8011764:	18c7883a 	add	r3,r3,r3
 8011768:	18c7883a 	add	r3,r3,r3
 801176c:	12000115 	stw	r8,4(r2)
 8011770:	10c7883a 	add	r3,r2,r3
 8011774:	19400015 	stw	r5,0(r3)
 8011778:	0005883a 	mov	r2,zero
 801177c:	dfc00517 	ldw	ra,20(sp)
 8011780:	dc400417 	ldw	r17,16(sp)
 8011784:	dc000317 	ldw	r16,12(sp)
 8011788:	dec00604 	addi	sp,sp,24
 801178c:	f800283a 	ret
 8011790:	00800034 	movhi	r2,0
 8011794:	10800004 	addi	r2,r2,0
 8011798:	10002626 	beq	r2,zero,8011834 <__register_exitproc+0x110>
 801179c:	01006404 	movi	r4,400
 80117a0:	d9400015 	stw	r5,0(sp)
 80117a4:	d9800115 	stw	r6,4(sp)
 80117a8:	d9c00215 	stw	r7,8(sp)
 80117ac:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80117b0:	d9400017 	ldw	r5,0(sp)
 80117b4:	d9800117 	ldw	r6,4(sp)
 80117b8:	d9c00217 	ldw	r7,8(sp)
 80117bc:	10001d26 	beq	r2,zero,8011834 <__register_exitproc+0x110>
 80117c0:	81000017 	ldw	r4,0(r16)
 80117c4:	10000115 	stw	zero,4(r2)
 80117c8:	02000044 	movi	r8,1
 80117cc:	22405217 	ldw	r9,328(r4)
 80117d0:	0007883a 	mov	r3,zero
 80117d4:	12400015 	stw	r9,0(r2)
 80117d8:	20805215 	stw	r2,328(r4)
 80117dc:	10006215 	stw	zero,392(r2)
 80117e0:	10006315 	stw	zero,396(r2)
 80117e4:	883fde26 	beq	r17,zero,8011760 <__alt_data_end+0xfc011760>
 80117e8:	18c9883a 	add	r4,r3,r3
 80117ec:	2109883a 	add	r4,r4,r4
 80117f0:	1109883a 	add	r4,r2,r4
 80117f4:	21802215 	stw	r6,136(r4)
 80117f8:	01800044 	movi	r6,1
 80117fc:	12406217 	ldw	r9,392(r2)
 8011800:	30cc983a 	sll	r6,r6,r3
 8011804:	4992b03a 	or	r9,r9,r6
 8011808:	12406215 	stw	r9,392(r2)
 801180c:	21c04215 	stw	r7,264(r4)
 8011810:	01000084 	movi	r4,2
 8011814:	893fd21e 	bne	r17,r4,8011760 <__alt_data_end+0xfc011760>
 8011818:	11006317 	ldw	r4,396(r2)
 801181c:	218cb03a 	or	r6,r4,r6
 8011820:	11806315 	stw	r6,396(r2)
 8011824:	003fce06 	br	8011760 <__alt_data_end+0xfc011760>
 8011828:	18805304 	addi	r2,r3,332
 801182c:	18805215 	stw	r2,328(r3)
 8011830:	003fc606 	br	801174c <__alt_data_end+0xfc01174c>
 8011834:	00bfffc4 	movi	r2,-1
 8011838:	003fd006 	br	801177c <__alt_data_end+0xfc01177c>

0801183c <__call_exitprocs>:
 801183c:	defff504 	addi	sp,sp,-44
 8011840:	df000915 	stw	fp,36(sp)
 8011844:	dd400615 	stw	r21,24(sp)
 8011848:	dc800315 	stw	r18,12(sp)
 801184c:	dfc00a15 	stw	ra,40(sp)
 8011850:	ddc00815 	stw	r23,32(sp)
 8011854:	dd800715 	stw	r22,28(sp)
 8011858:	dd000515 	stw	r20,20(sp)
 801185c:	dcc00415 	stw	r19,16(sp)
 8011860:	dc400215 	stw	r17,8(sp)
 8011864:	dc000115 	stw	r16,4(sp)
 8011868:	d9000015 	stw	r4,0(sp)
 801186c:	2839883a 	mov	fp,r5
 8011870:	04800044 	movi	r18,1
 8011874:	057fffc4 	movi	r21,-1
 8011878:	00820074 	movhi	r2,2049
 801187c:	108fc504 	addi	r2,r2,16148
 8011880:	12000017 	ldw	r8,0(r2)
 8011884:	45005217 	ldw	r20,328(r8)
 8011888:	44c05204 	addi	r19,r8,328
 801188c:	a0001c26 	beq	r20,zero,8011900 <__call_exitprocs+0xc4>
 8011890:	a0800117 	ldw	r2,4(r20)
 8011894:	15ffffc4 	addi	r23,r2,-1
 8011898:	b8000d16 	blt	r23,zero,80118d0 <__call_exitprocs+0x94>
 801189c:	14000044 	addi	r16,r2,1
 80118a0:	8421883a 	add	r16,r16,r16
 80118a4:	8421883a 	add	r16,r16,r16
 80118a8:	84402004 	addi	r17,r16,128
 80118ac:	a463883a 	add	r17,r20,r17
 80118b0:	a421883a 	add	r16,r20,r16
 80118b4:	e0001e26 	beq	fp,zero,8011930 <__call_exitprocs+0xf4>
 80118b8:	80804017 	ldw	r2,256(r16)
 80118bc:	e0801c26 	beq	fp,r2,8011930 <__call_exitprocs+0xf4>
 80118c0:	bdffffc4 	addi	r23,r23,-1
 80118c4:	843fff04 	addi	r16,r16,-4
 80118c8:	8c7fff04 	addi	r17,r17,-4
 80118cc:	bd7ff91e 	bne	r23,r21,80118b4 <__alt_data_end+0xfc0118b4>
 80118d0:	00800034 	movhi	r2,0
 80118d4:	10800004 	addi	r2,r2,0
 80118d8:	10000926 	beq	r2,zero,8011900 <__call_exitprocs+0xc4>
 80118dc:	a0800117 	ldw	r2,4(r20)
 80118e0:	1000301e 	bne	r2,zero,80119a4 <__call_exitprocs+0x168>
 80118e4:	a0800017 	ldw	r2,0(r20)
 80118e8:	10003226 	beq	r2,zero,80119b4 <__call_exitprocs+0x178>
 80118ec:	a009883a 	mov	r4,r20
 80118f0:	98800015 	stw	r2,0(r19)
 80118f4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80118f8:	9d000017 	ldw	r20,0(r19)
 80118fc:	a03fe41e 	bne	r20,zero,8011890 <__alt_data_end+0xfc011890>
 8011900:	dfc00a17 	ldw	ra,40(sp)
 8011904:	df000917 	ldw	fp,36(sp)
 8011908:	ddc00817 	ldw	r23,32(sp)
 801190c:	dd800717 	ldw	r22,28(sp)
 8011910:	dd400617 	ldw	r21,24(sp)
 8011914:	dd000517 	ldw	r20,20(sp)
 8011918:	dcc00417 	ldw	r19,16(sp)
 801191c:	dc800317 	ldw	r18,12(sp)
 8011920:	dc400217 	ldw	r17,8(sp)
 8011924:	dc000117 	ldw	r16,4(sp)
 8011928:	dec00b04 	addi	sp,sp,44
 801192c:	f800283a 	ret
 8011930:	a0800117 	ldw	r2,4(r20)
 8011934:	80c00017 	ldw	r3,0(r16)
 8011938:	10bfffc4 	addi	r2,r2,-1
 801193c:	15c01426 	beq	r2,r23,8011990 <__call_exitprocs+0x154>
 8011940:	80000015 	stw	zero,0(r16)
 8011944:	183fde26 	beq	r3,zero,80118c0 <__alt_data_end+0xfc0118c0>
 8011948:	95c8983a 	sll	r4,r18,r23
 801194c:	a0806217 	ldw	r2,392(r20)
 8011950:	a5800117 	ldw	r22,4(r20)
 8011954:	2084703a 	and	r2,r4,r2
 8011958:	10000b26 	beq	r2,zero,8011988 <__call_exitprocs+0x14c>
 801195c:	a0806317 	ldw	r2,396(r20)
 8011960:	2088703a 	and	r4,r4,r2
 8011964:	20000c1e 	bne	r4,zero,8011998 <__call_exitprocs+0x15c>
 8011968:	89400017 	ldw	r5,0(r17)
 801196c:	d9000017 	ldw	r4,0(sp)
 8011970:	183ee83a 	callr	r3
 8011974:	a0800117 	ldw	r2,4(r20)
 8011978:	15bfbf1e 	bne	r2,r22,8011878 <__alt_data_end+0xfc011878>
 801197c:	98800017 	ldw	r2,0(r19)
 8011980:	153fcf26 	beq	r2,r20,80118c0 <__alt_data_end+0xfc0118c0>
 8011984:	003fbc06 	br	8011878 <__alt_data_end+0xfc011878>
 8011988:	183ee83a 	callr	r3
 801198c:	003ff906 	br	8011974 <__alt_data_end+0xfc011974>
 8011990:	a5c00115 	stw	r23,4(r20)
 8011994:	003feb06 	br	8011944 <__alt_data_end+0xfc011944>
 8011998:	89000017 	ldw	r4,0(r17)
 801199c:	183ee83a 	callr	r3
 80119a0:	003ff406 	br	8011974 <__alt_data_end+0xfc011974>
 80119a4:	a0800017 	ldw	r2,0(r20)
 80119a8:	a027883a 	mov	r19,r20
 80119ac:	1029883a 	mov	r20,r2
 80119b0:	003fb606 	br	801188c <__alt_data_end+0xfc01188c>
 80119b4:	0005883a 	mov	r2,zero
 80119b8:	003ffb06 	br	80119a8 <__alt_data_end+0xfc0119a8>

080119bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80119bc:	defffd04 	addi	sp,sp,-12
 80119c0:	df000215 	stw	fp,8(sp)
 80119c4:	df000204 	addi	fp,sp,8
 80119c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80119cc:	0001883a 	nop
 80119d0:	e0bfff17 	ldw	r2,-4(fp)
 80119d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80119d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80119dc:	10000226 	beq	r2,zero,80119e8 <_exit+0x2c>
    ALT_SIM_FAIL();
 80119e0:	002af070 	cmpltui	zero,zero,43969
 80119e4:	00000106 	br	80119ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80119e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80119ec:	003fff06 	br	80119ec <__alt_data_end+0xfc0119ec>
